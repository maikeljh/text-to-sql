Question,Answer,Summary,Alternative Prompt 1 (English),Alternative Prompt 2 (Bahasa Indonesia),Expected Result
"Find the top 5 products with the highest total sales revenue (unitprice * orderqty - unitpricediscount) across all sales, including productid, Name, total_revenue.","SELECT p.productid, p.name, 
  SUM(sod.unitprice * sod.orderqty - sod.unitpricediscount) AS total_revenue
 FROM product p
 JOIN salesorderdetail sod ON p.productid = sod.productid
 GROUP BY p.productid, p.name
 ORDER BY total_revenue DESC
 LIMIT 5;","This SQL query identifies the top 5 highest revenue-generating products by joining the 'product' and 'salesorderdetail' tables. It calculates total revenue for each product by summing (unit price Ã— quantity - discount) across all sales, then groups and sorts the results. Key operations include JOIN, GROUP BY, and a revenue calculation that accounts for both sales volume and discounts. The output provides product IDs, names, and total revenue, helping identify best-performing products. Business applications include inventory management and marketing strategy. Potential modifications: 1) add date filters to analyze trends, 2) include profit margins for profitability analysis, or 3) break down by customer segments. This query helps answer questions like 'What are our most profitable products?' or 'How do discounts affect overall revenue?'","Which 5 products brought in the most total revenue (unitprice * orderqty - unitpricediscount)? Show productid, Name, total_revenue.","5 Produk mana aja yang ngasih pendapatan paling tinggi dari total penjualan? Tampilkan productid, Name, total_revenue.","['productid', 'name', 'total_revenue']"
"Get all customers who made more than 5 purchases with total spending over 5000, showing customerid, total_orders, total_spending.","SELECT c.customerid, COUNT(soh.salesorderid) AS total_orders,
  SUM(soh.totaldue) AS total_spending
 FROM customer c
 JOIN salesorderheader soh ON c.customerid = soh.customerid
 GROUP BY c.customerid
 HAVING COUNT(soh.salesorderid) > 5 AND SUM(soh.totaldue) > 5000;","This SQL query identifies high-value customers by analyzing order patterns from the 'customer' and 'salesorderheader' tables. It calculates both the total number of orders and total spending per customer, then filters for customers with more than 5 orders AND total spending exceeding $5,000. Key operations include JOIN, GROUP BY, and HAVING with multiple aggregate conditions. The output provides customer IDs along with their order counts and lifetime value, useful for customer segmentation and loyalty programs. Business applications include targeted marketing and customer retention strategies. Potential modifications: 1) add customer names for identification, 2) include time periods to analyze purchasing trends, or 3) segment by product categories purchased. This query helps answer questions like 'Who are our most valuable customers?' or 'What spending thresholds indicate customer loyalty?'","Which customers have more than 5 orders and spent over 5000 total? Show customerid, total_orders, total_spending.","Customer mana yang belanjanya udah lebih dari 5 kali dan bayar lebih dari 5000? Tampilkan customerid, total_orders, total_spending.","['customerid', 'total_orders', 'total_spending']"
"Find the average cost and price difference per product category, including categoryid, categoryname, avg_cost, avg_price, and avg_diff.","SELECT pc.productcategoryid, pc.name AS categoryname,
  AVG(p.standardcost) AS avg_cost,
  AVG(p.listprice) AS avg_price,
  AVG(p.listprice - p.standardcost) AS avg_diff
 FROM product p
 JOIN productsubcategory ps ON p.productsubcategoryid = ps.productsubcategoryid
 JOIN productcategory pc ON ps.productcategoryid = pc.productcategoryid
 GROUP BY pc.productcategoryid, pc.name;","This SQL query analyzes product profitability by category by joining the 'product', 'productsubcategory', and 'productcategory' tables. It calculates average standard cost, list price, and the difference between them (profit margin) for each product category. Key operations include multi-table JOINs and AVG aggregations with arithmetic calculations. The output shows category IDs, names, and key financial metrics, providing insights into pricing strategies across product lines. Business applications include pricing optimization and category performance analysis. Potential modifications: 1) add filters for specific time periods to track margin trends, 2) include product count per category for weighted averages, or 3) calculate margin percentages for relative comparisons. This query helps answer questions like 'Which product categories have the highest margins?' or 'How do our pricing strategies vary across categories?'","What's the average cost and price and their difference for each category? Show categoryid, categoryname, avg_cost, avg_price, and avg_diff.","Berapa sih rata-rata harga pokok dan jual per kategori, dan beda harganya? Tampilkan categoryid, categoryname, avg_cost, avg_price, dan avg_diff.","['productcategoryid', 'categoryname', 'avg_cost', 'avg_price', 'avg_diff']"
"Show top 3 vendors with the shortest average lead time for products, including vendor id, name, and avg_lead_time.","SELECT v.businessentityid, v.name, AVG(pv.averageleadtime) AS avg_lead_time
 FROM vendor v
 JOIN productvendor pv ON v.businessentityid = pv.businessentityid
 GROUP BY v.businessentityid, v.name
 ORDER BY avg_lead_time ASC
 LIMIT 3;","This SQL query identifies the top 3 most efficient vendors based on average lead time by joining the 'vendor' and 'productvendor' tables. It calculates the average lead time for each vendor and sorts them in ascending order to find the fastest suppliers. Key operations include JOIN, GROUP BY, AVG aggregation, and ORDER BY with LIMIT. The output provides vendor IDs, names, and their average lead times, which is valuable for supply chain optimization. Business applications include vendor performance evaluation and procurement strategy. Potential modifications: 1) add product category filters to analyze vendor performance by product type, 2) include pricing data to evaluate cost vs. speed trade-offs, or 3) track lead time trends over time. This query helps answer questions like 'Which vendors deliver the fastest?' or 'How does lead time correlate with other vendor performance metrics?'","Who are the 3 vendors that usually deliver the fastest? Show vendorid, name, and avg_lead_time.","Vendor mana aja yang paling cepet nganterin barang? Ambil 3 teratas. Tampilkan vendorid, name, dan avg_lead_time.","['businessentityid', 'name', 'avg_lead_time']"
"List all sales territories with sales difference between current and previous year greater than 10%, including territoryid, name, difference_percent.","SELECT st.territoryid, st.name,
  ((st.salesytd - st.saleslastyear) / NULLIF(st.saleslastyear, 0)) * 100 AS difference_percent
 FROM salesterritory st
 WHERE ABS((st.salesytd - st.saleslastyear) / NULLIF(st.saleslastyear, 0)) * 100 > 10;","This SQL query analyzes sales territory performance by calculating year-over-year percentage growth/decline from the 'salesterritory' table. It computes the percentage difference between current year-to-date sales (salesytd) and previous year sales (saleslastyear), using NULLIF to handle division by zero. The query filters for territories with significant changes (>10% absolute difference). Key operations include percentage calculation, NULLIF for safe division, and ABS in the WHERE clause. The output shows territory IDs, names, and percentage differences, highlighting high-growth or declining regions. Business applications include sales performance analysis and territory management. Potential modifications: 1) add date filters for seasonal analysis, 2) include cost data to assess profitability changes, or 3) compare with market potential data. This query helps answer questions like 'Which territories show the most significant sales changes?' or 'How do regional performances compare year-over-year?'","Which sales territories had a sales difference more than 10% between this year and last year? Show territoryid, name, and difference_percent.","Wilayah penjualan mana yang selisih omsetnya dari tahun ke tahun lebih dari 10%? Tampilkan territoryid, name, dan difference_percent.","['territoryid', 'name', 'difference_percent']"
"Which product models have more than 2 associated product descriptions across cultures and include model id, model name, and description count? (Columns: productmodelid, Name, description_count)","SELECT pm.productmodelid, pm.name, COUNT(DISTINCT pmpdc.productdescriptionid) AS description_count
 FROM productmodel pm
 JOIN productmodelproductdescriptionculture pmpdc ON pm.productmodelid = pmpdc.productmodelid
 GROUP BY pm.productmodelid, pm.name
 HAVING COUNT(DISTINCT pmpdc.productdescriptionid) > 2;","This SQL query identifies product models with multiple descriptions by joining the 'productmodel' and 'productmodelproductdescriptionculture' tables. It counts the distinct number of descriptions associated with each product model and filters for models with more than 2 descriptions using GROUP BY and HAVING clauses. The output provides product model IDs, names, and their description counts, highlighting products with rich, multi-cultural content. Business applications include content management and localization strategy. Potential modifications: 1) add culture information to analyze language coverage, 2) include description length metrics to assess content depth, or 3) join with sales data to evaluate if more descriptions correlate with better performance. This query helps answer questions like 'Which products have the most comprehensive descriptions?' or 'How does description count vary across product categories?'","Which product models have more than 2 descriptions in different languages? Show productmodelid, Name, and description_count.","Model produk mana yang punya lebih dari 2 deskripsi dalam berbagai bahasa? Tampilkan productmodelid, Name, dan description_count.","['productmodelid', 'name', 'description_count']"
"List top 5 products that appear in both purchase and sales with the greatest price spread between purchase (max unitprice in purchaseorderdetail) and sales (min unitprice in salesorderdetail). (Columns: productid, max_purchase_price, min_sales_price, price_spread)","WITH purchase AS (
  SELECT productid, MAX(unitprice) AS max_purchase_price
  FROM purchaseorderdetail
  GROUP BY productid
 ),
 sales AS (
  SELECT productid, MIN(unitprice) AS min_sales_price
  FROM salesorderdetail
  GROUP BY productid
 )
 SELECT p.productid, p.max_purchase_price, s.min_sales_price,
  (p.max_purchase_price - s.min_sales_price) AS price_spread
 FROM purchase p
 JOIN sales s ON p.productid = s.productid
 ORDER BY price_spread DESC
 LIMIT 5;","This SQL query identifies products with the largest price discrepancies between purchase and sale prices using a CTE-based approach. It first calculates the maximum purchase price per product from 'purchaseorderdetail' and the minimum sales price per product from 'salesorderdetail', then joins these results to compute the price spread. Key operations include two CTEs (Common Table Expressions), GROUP BY aggregations, a JOIN between the CTEs, and arithmetic calculation of price differences. The output shows the top 5 products with the largest spreads between their highest purchase price and lowest sales price. Business applications include pricing strategy optimization and margin analysis. Potential modifications: 1) add product names for better identification, 2) include average prices for more context, or 3) filter by product categories to analyze patterns. This query helps answer questions like 'Which products have the most inconsistent pricing?' or 'Where are we potentially losing margin?'","Which 5 products are both bought and sold, with the biggest price gap between buying and selling? Show productid, max_purchase_price, min_sales_price, price_spread.","5 Produk apa aja yang dibeli dan dijual dengan selisih harganya paling besar? Tampilkan productid, max_purchase_price, min_sales_price, price_spread.","['productid', 'max_purchase_price', 'min_sales_price', 'price_spread']"
"Determine which territories have the most consistent sales over years based on standard deviation of salespersonquotahistory. (Columns: territoryid, stddev_salesquota)","SELECT sp.territoryid,
  STDDEV(sq.salesquota) AS stddev_salesquota
 FROM salesperson sp
 JOIN salespersonquotahistory sq ON sp.businessentityid = sq.businessentityid
 GROUP BY sp.territoryid
 ORDER BY stddev_salesquota ASC
 LIMIT 5;","This SQL query analyzes sales quota consistency across territories by calculating the standard deviation of sales quotas from the 'salesperson' and 'salespersonquotahistory' tables. It groups the results by territory and identifies the 5 territories with the most consistent (lowest variability) sales quotas. Key operations include JOIN, GROUP BY, STDDEV aggregation, and ORDER BY with LIMIT. The output shows territory IDs and their corresponding quota standard deviations, highlighting territories with uniform quota expectations. Business applications include sales performance benchmarking and territory management strategy. Potential modifications: 1) add territory names for better identification, 2) include average quotas to assess absolute values alongside consistency, or 3) filter by time periods to analyze quota stability trends. This query helps answer questions like 'Which territories have the most consistent sales quotas?' or 'How does quota consistency correlate with sales performance?'",Which territories have the most stable sales over the years (lowest stddev)? Show territoryid and stddev_salesquota.,Wilayah mana yang penjualannya paling stabil tiap tahun? Lihat dari standar deviasinya. Tampilkan territoryid dan stddev_salesquota.,"['territoryid', 'stddev_salesquota']"
Find all products whose cost has been steadily increasing in every historical record (monotonic increase). (Columns: productid),"SELECT productid
 FROM (
  SELECT productid,
  standardcost,
  LAG(standardcost) OVER (PARTITION BY productid ORDER BY startdate) AS prev_cost
  FROM productcosthistory
 ) t
 GROUP BY productid
 HAVING BOOL_AND(standardcost >= prev_cost);","This SQL query identifies products that have never decreased in standard cost over time by analyzing the 'productcosthistory' table. It uses a window function (LAG) to compare each cost entry with its previous value, then applies BOOL_AND in the HAVING clause to filter for products where all cost changes were non-decreasing. Key operations include a subquery with PARTITION BY and ORDER BY in the window function, and the clever use of BOOL_AND to verify monotonic increases. The output lists product IDs that have consistently maintained or increased their standard costs. Business applications include cost trend analysis and pricing strategy. Potential modifications: 1) add date ranges to analyze specific periods, 2) include the magnitude of cost increases, or 3) join with product information for better context. This query helps answer questions like 'Which products have never had cost reductions?' or 'How stable are our product costs over time?'",Which products always had increasing cost in every record? Show productid.,Produk mana saja yang harga pokoknya selalu naik di tiap riwayatnya? Tampilkan productid.,['productid']
"List top 3 work orders that used the most actual resource hours per unit of stocked quantity. (Columns: workorderid, productid, ratio)","SELECT wr.workorderid, wr.productid,
  SUM(wr.actualresourcehrs) / NULLIF(w.stockedqty, 0) AS ratio
 FROM workorderrouting wr
 JOIN workorder w ON wr.workorderid = w.workorderid AND wr.productid = w.productid
 GROUP BY wr.workorderid, wr.productid, w.stockedqty
 ORDER BY ratio DESC
 LIMIT 3;","This SQL query identifies the top 3 least efficient work orders by calculating the ratio of actual resource hours to stocked quantity, using data from the 'workorderrouting' and 'workorder' tables. The query joins these tables on workorderid and productid, then computes the resource hours per unit produced (with NULLIF to prevent division by zero). Key operations include JOIN, GROUP BY, arithmetic calculation with NULLIF, and ORDER BY with LIMIT. The output shows work order IDs, product IDs, and their inefficiency ratios, highlighting production bottlenecks. Business applications include process optimization and resource allocation. Potential modifications: 1) add product names for better identification, 2) include cost data to assess financial impact, or 3) filter by date ranges to analyze trends. This query helps answer questions like 'Which production runs are least efficient?' or 'How does resource utilization vary by product?'","Which 3 work orders used the most hours per unit produced? Show workorderid, productid, and ratio.","3 Work order mana yang paling boros jam kerja per produk? Tampilkan workorderid, productid, dan ratio.","['workorderid', 'productid', 'ratio']"
"Get the 3 ship methods with the highest average freight charge relative to subtotal in salesorderheader. (Columns: shipmethodid, avg_ratio)","SELECT shipmethodid,
  AVG(freight / NULLIF(subtotal, 0)) AS avg_ratio
 FROM salesorderheader
 GROUP BY shipmethodid
 ORDER BY avg_ratio DESC
 LIMIT 3;","This SQL query analyzes shipping cost efficiency by calculating the average ratio of freight costs to order subtotals for each shipping method, using data from the 'salesorderheader' table. It groups results by shipmethodid, computes the freight-to-subtotal ratio (with NULLIF to handle division by zero), and identifies the top 3 most expensive shipping methods relative to order value. Key operations include GROUP BY, AVG aggregation with arithmetic calculation, and ORDER BY with LIMIT. The output shows shipping method IDs and their average cost ratios, highlighting potentially inefficient shipping options. Business applications include logistics optimization and pricing strategy. Potential modifications: 1) add shipping method names for clarity, 2) include order volume to assess frequency of use, or 3) filter by date ranges to analyze seasonal trends. This query helps answer questions like 'Which shipping methods have the highest relative costs?' or 'How does shipping cost efficiency vary by order size?'","Which 5 customers spent the most and bought more than 5 times? Show customerid, total_orders, total_spending.","Siapa aja 5 pelanggan yang belanja lebih dari 5 kali dan ngeluarin duit paling banyak? Tampilkan customerid, total_orders, dan total_spending.","['shipmethodid', 'avg_ratio']"
"Find top 5 credit cards by usage frequency, showing creditcardid and usage_count from personcreditcard. (Columns: creditcardid, usage_count)","SELECT creditcardid, COUNT(*) AS usage_count
 FROM personcreditcard
 GROUP BY creditcardid
 ORDER BY usage_count DESC
 LIMIT 5;","This SQL query identifies the top 5 most frequently used credit cards by analyzing data from the 'personcreditcard' table. It counts the number of associations between credit cards and people, grouping by creditcardid and sorting by usage count in descending order. Key operations include GROUP BY, COUNT aggregation, and ORDER BY with LIMIT. The output shows credit card IDs and their usage counts, highlighting the most popular payment methods. Business applications include payment processing optimization and customer spending analysis. Potential modifications: 1) join with transaction data to analyze spending patterns, 2) include card type information for payment method analysis, or 3) filter by date ranges to identify usage trends. This query helps answer questions like 'Which credit cards are used most frequently?' or 'How are payment methods distributed among customers?'","What's the average price vs. cost difference for each product category? Show categoryid, categoryname, avg_cost, avg_price, and avg_diff.","Berapa rata-rata selisih harga sama biaya per kategori produk? Tampilkan categoryid, categoryname, avg_cost, avg_price, dan avg_diff.","['creditcardid', 'usage_count']"
"Identify product models that are linked to more than 1 illustration. Show productmodelid and illustration_count. (Columns: productmodelid, illustration_count)","SELECT productmodelid, COUNT(*) AS illustration_count
 FROM productmodelillustration
 GROUP BY productmodelid
 HAVING COUNT(*) > 1;","This SQL query identifies product models with multiple illustrations by analyzing the 'productmodelillustration' table. It counts the number of illustrations associated with each product model and filters for models with more than one illustration using GROUP BY and HAVING clauses. The output shows product model IDs and their corresponding illustration counts, highlighting products with rich visual documentation. Business applications include product content management and marketing material optimization. Potential modifications: 1) join with product information to identify high-value products, 2) include illustration types to analyze content diversity, or 3) filter by date ranges to track content development trends. This query helps answer questions like 'Which product models have the most comprehensive visual documentation?' or 'How does illustration count correlate with product performance?'","Which 3 vendors deliver products the fastest on average? Show vendor id, name, and avg_lead_time.","3 Vendor mana aja yang rata-rata paling cepat kirim barang? Tampilkan vendor id, name, dan avg_lead_time.","['productmodelid', 'illustration_count']"
"List employees who worked continuously in the same department for more than 2 years without a break. Show businessentityid, departmentid, total_days. (Columns: businessentityid, departmentid, total_days)","SELECT businessentityid, departmentid, 
  SUM(COALESCE(enddate, CURRENT_DATE) - startdate) AS total_days
FROM employeedepartmenthistory
GROUP BY businessentityid, departmentid
HAVING SUM(COALESCE(enddate, CURRENT_DATE) - startdate) > 730;","This SQL query identifies long-term employee assignments by calculating the total days employees have spent in each department from the 'employeedepartmenthistory' table. It handles current assignments (where enddate is null) by using COALESCE with CURRENT_DATE, sums the duration in days for each employee-department combination, and filters for assignments lasting more than 2 years (730 days). Key operations include date arithmetic, COALESCE for null handling, GROUP BY, and HAVING with a duration threshold. The output shows employee IDs, department IDs, and total assignment days, highlighting stable department assignments. Business applications include workforce planning and department stability analysis. Potential modifications: 1) join with employee/department names for readability, 2) calculate average durations across departments, or 3) analyze duration patterns by job title. This query helps answer questions like 'Which employees have the longest department tenure?' or 'How stable are our department assignments?'","Which sales territories saw more than 10% change in sales from last year? Show territoryid, name, difference_percent.","Wilayah penjualan mana yang beda penjualannya lebih dari 10% dibanding tahun lalu? Tampilkan territoryid, name, dan difference_percent.","['businessentityid', 'departmentid', 'total_days']"
"Identify vendors whose supplied products have the highest average unitprice in purchase order details. Show vendorid, avg_unitprice. (Columns: vendorid, avg_unitprice)","SELECT poh.vendorid, AVG(pod.unitprice) AS avg_unitprice
 FROM purchaseorderheader poh
 JOIN purchaseorderdetail pod ON poh.purchaseorderid = pod.purchaseorderid
 GROUP BY poh.vendorid
 ORDER BY avg_unitprice DESC
 LIMIT 5;","This SQL query identifies the top 5 vendors with the highest average unit prices by analyzing purchase order data from the 'purchaseorderheader' and 'purchaseorderdetail' tables. The query joins these tables on purchaseorderid, calculates the average unit price per vendor, and sorts the results in descending order. Key operations include JOIN, GROUP BY, AVG aggregation, and ORDER BY with LIMIT. The output provides vendor IDs and their average unit prices, highlighting potentially expensive suppliers. Business applications include vendor performance evaluation and procurement cost analysis. Potential modifications: 1) add vendor names for better identification, 2) include purchase volume to assess cost versus quantity trade-offs, or 3) filter by date ranges to analyze price trends. This query helps answer questions like 'Which vendors charge the highest average prices?' or 'How do vendor prices compare across product categories?'","Which product models have more than two product descriptions across languages? Show productmodelid, Name, and description_count.","Model produk mana yang punya lebih dari dua deskripsi dalam berbagai bahasa? Tampilkan productmodelid, Name, dan description_count.","['vendorid', 'avg_unitprice']"
"List all products that have never been sold, never reviewed, and never appeared in a work order. (Columns: productid, Name)","SELECT p.productid, p.name
 FROM product p
 LEFT JOIN salesorderdetail sod ON p.productid = sod.productid
 LEFT JOIN productreview pr ON p.productid = pr.productid
 LEFT JOIN workorder wo ON p.productid = wo.productid
 WHERE sod.productid IS NULL AND pr.productid IS NULL AND wo.productid IS NULL;","This SQL query identifies inactive products by finding items that have never been sold, reviewed, or manufactured, as evidenced by left joins to the 'salesorderdetail', 'productreview', and 'workorder' tables with NULL checks. The query returns product IDs and names for products that appear in none of these activity tables. Key operations include multiple LEFT JOINs with IS NULL conditions in the WHERE clause to detect absence of related records. The output helps identify potentially obsolete or unused inventory. Business applications include inventory optimization and product lifecycle management. Potential modifications: 1) add product categories to analyze patterns, 2) include creation dates to assess how long products have been inactive, or 3) join with purchase data to identify never-ordered items. This query helps answer questions like 'Which products are completely inactive in our system?' or 'How much inventory consists of unused items?'","Which 5 products show the biggest price gap between buying and selling? Show productid, max_purchase_price, min_sales_price, and price_spread.","Produk mana yang punya selisih harga jual dan beli paling gede? Tampilkan productid, max_purchase_price, min_sales_price, dan price_spread.","['productid', 'name']"
"Find the top 5 product models with the widest average price range (difference between min and max list price across all history). (Columns: productmodelid, price_range)","SELECT p.productmodelid,
  MAX(plph.listprice) - MIN(plph.listprice) AS price_range
 FROM product p
 JOIN productlistpricehistory plph ON p.productid = plph.productid
 GROUP BY p.productmodelid
 ORDER BY price_range DESC
 LIMIT 5;","This SQL query identifies product models with the greatest price fluctuations by analyzing the 'product' and 'productlistpricehistory' tables. It calculates the price range (difference between maximum and minimum list prices) for each product model, then sorts the results to show the top 5 models with the most significant price variations. Key operations include JOIN, GROUP BY, MAX/MIN aggregations, arithmetic calculation of price differences, and ORDER BY with LIMIT. The output shows product model IDs and their price ranges, highlighting products with volatile pricing. Business applications include pricing strategy analysis and inventory valuation. Potential modifications: 1) add time periods to analyze seasonal patterns, 2) include average prices for context, or 3) join with sales data to assess price elasticity. This query helps answer questions like 'Which products have the most unstable pricing?' or 'How does price volatility correlate with sales performance?'",Which territories have the most stable sales based on standard deviation? Show territoryid and stddev_salesquota.,Wilayah mana yang penjualannya paling stabil dilihat dari deviasi standarnya? Tampilkan territoryid dan stddev_salesquota.,"['productmodelid', 'price_range']"
"Which 5 currencies have the most volatile exchange rate (based on standard deviation of endofdayrate)? (Columns: currencycode, volatility)","SELECT currencycode, STDDEV(rate) AS volatility FROM (
  SELECT fromcurrencycode AS currencycode, endofdayrate AS rate FROM currencyrate
  UNION ALL
  SELECT tocurrencycode AS currencycode, endofdayrate AS rate FROM currencyrate
 ) AS rates
 GROUP BY currencycode
 ORDER BY volatility DESC
 LIMIT 5;","This SQL query identifies the top 5 most volatile currencies by analyzing exchange rate data from the 'currencyrate' table. It combines both 'from' and 'to' currency rates through a UNION ALL operation, then calculates the standard deviation of rates for each currency to measure volatility. Key operations include a derived table with UNION ALL, STDDEV aggregation, and ORDER BY with LIMIT. The output shows currency codes and their volatility scores, highlighting currencies with the most fluctuating exchange rates. Business applications include foreign exchange risk assessment and international pricing strategy. Potential modifications: 1) add date filters to analyze volatility trends over time, 2) include average rates for context, or 3) join with transaction data to assess financial impact. This query helps answer questions like 'Which currencies pose the highest exchange rate risk?' or 'How does currency volatility vary across regions?'",Which products consistently increased in cost every time? Show productid.,Produk apa aja yang harganya selalu naik terus tiap dicatat? Tampilkan productid.,"['currencycode', 'volatility']"
"List the top 3 employees with the most number of distinct jobtitles over time. (Columns: businessentityid, jobtitle_count)","SELECT businessentityid, COUNT(DISTINCT jobtitle) AS jobtitle_count
 FROM (
  SELECT e.businessentityid, e.jobtitle, edh.startdate
  FROM employee e
  JOIN employeedepartmenthistory edh ON e.businessentityid = edh.businessentityid
 ) AS t
 GROUP BY businessentityid
 ORDER BY jobtitle_count DESC
 LIMIT 3;","This SQL query identifies employees with the most diverse career paths by counting distinct job titles held across departments, using data from the 'employee' and 'employeedepartmenthistory' tables. It joins these tables to track job title changes, counts unique job titles per employee, and returns the top 3 employees with the most varied job histories. Key operations include JOIN, subquery, COUNT(DISTINCT), GROUP BY, and ORDER BY with LIMIT. The output shows employee IDs and their count of distinct job titles, highlighting versatile employees. Business applications include talent management and career path analysis. Potential modifications: 1) add employee names for identification, 2) include department information to analyze cross-functional experience, or 3) filter by time periods to assess career progression speed. This query helps answer questions like 'Which employees have the most diverse organizational experience?' or 'How does job mobility correlate with performance?'","Which 3 work orders had the most actual hours used per stocked unit? Show workorderid, productid, and ratio.","Work order mana yang pakai jam kerja paling banyak dibanding jumlah barangnya? Tampilkan workorderid, productid, dan ratio.","['businessentityid', 'jobtitle_count']"
"Get the total number of documents grouped by their status and folderflag. (Columns: status, folderflag, total_docs)","SELECT status, folderflag, COUNT(*) AS total_docs
 FROM document
 GROUP BY status, folderflag;","This SQL query analyzes document management patterns by counting documents grouped by their status and folder flag attributes from the 'Document' table. It provides a breakdown of document counts across different status and folder flag combinations. Key operations include GROUP BY on multiple columns and COUNT aggregation. The output reveals document distribution patterns, useful for understanding workflow states and organizational structures. Business applications include document management optimization and workflow analysis. Potential modifications: 1) add date filters to analyze temporal trends, 2) include document type categories for more granular analysis, or 3) calculate percentages of total documents for relative comparisons. This query helps answer questions like 'How are documents distributed across different statuses?' or 'What proportion of documents are flagged as folders?'",Which 3 shipping methods cost the most in freight compared to order value? Show shipmethodid and avg_ratio.,Metode kirim mana yang ongkirnya paling mahal dibanding nilai ordernya? Tampilkan shipmethodid dan avg_ratio.,"['status', 'folderflag', 'total_docs']"
"Find stores that are linked to employees who received the highest bonuses (Top 3). (Columns: store_name, employeeid, bonus)","SELECT s.name AS store_name, e.businessentityid AS employeeid, sp.bonus
 FROM store s
 JOIN salesperson sp ON s.salespersonid = sp.businessentityid
 JOIN employee e ON sp.businessentityid = e.businessentityid
 ORDER BY sp.bonus DESC
 LIMIT 3;","This SQL query identifies the top 3 employees with the highest bonuses by joining the 'store', 'salesperson', and 'employee' tables on businessentityid. It selects store names, employee IDs, and bonus amounts, ordering results by bonus in descending order and limiting to the top 3 records. The query's primary purpose is to highlight top-performing sales personnel for recognition or performance analysis. Key modifications could include: 1) Adding a date filter to analyze bonus trends over time, 2) Including sales metrics to correlate bonuses with performance, or 3) Expanding the result set to show all employees above a certain bonus threshold. This query could help answer business questions about incentive effectiveness, compensation distribution, or identifying high-performing stores based on their sales team's bonuses.",Which credit cards are used the most? Show creditcardid and usage_count.,Kartu kredit mana yang paling sering dipake? Tampilkan creditcardid dan usage_count.,"['store_name', 'employeeid', 'bonus']"
"List products where weight is above average of their sizeunitmeasure group. (Columns: productid, name, weight, avg_group_weight)","SELECT p.productid, p.name, p.weight, avg_group.avg_weight AS avg_group_weight
 FROM product p
 JOIN (
  SELECT sizeunitmeasurecode, AVG(weight) AS avg_weight
  FROM product
  WHERE weight IS NOT NULL
  GROUP BY sizeunitmeasurecode
 ) AS avg_group ON p.sizeunitmeasurecode = avg_group.sizeunitmeasurecode
 WHERE p.weight > avg_group.avg_weight;","This SQL query identifies products that are heavier than the average weight of products within their respective size unit measure groups. It joins the 'product' table with a subquery that calculates the average weight per 'sizeunitmeasurecode', then filters for products exceeding their group's average weight. The query returns product IDs, names, actual weights, and their group's average weight for comparison. This analysis could help identify unusually heavy products for quality control or shipping cost optimization. Key modifications could include: 1) Adding product categories to analyze weight outliers by category, 2) Comparing weights against median instead of average to reduce outlier impact, or 3) Including cost data to assess if heavier products correlate with higher production costs. The query could answer business questions about product standardization, potential manufacturing inconsistencies, or opportunities for weight reduction in product design.",Which product models are linked to more than 1 illustration? Show productmodelid and illustration_count.,Model produk mana yang punya lebih dari satu ilustrasi? Tampilkan productmodelid dan illustration_count.,"['productid', 'name', 'weight', 'avg_group_weight']"
"Identify top 5 products with the highest standard cost volatility over time using productcosthistory. Show productid, name, standardcost stddev, and count of records.","SELECT p.productid, p.name,
  STDDEV(pch.standardcost) AS cost_stddev,
  COUNT(*) AS record_count
FROM product p
JOIN productcosthistory pch ON p.productid = pch.productid
GROUP BY p.productid, p.name
ORDER BY cost_stddev DESC
LIMIT 5;","This SQL query identifies the top 5 products with the most volatile standard costs by calculating the standard deviation of cost changes from the 'productcosthistory' table joined with the 'product' table. For each product, it computes the standard deviation of standard costs (cost_stddev) and counts historical records, then sorts results by cost variability in descending order. This helps pinpoint products with significant cost fluctuations, useful for procurement analysis and pricing strategy. Key modifications could include: 1) Adding date filters to analyze cost volatility trends over specific periods, 2) Incorporating product categories to compare variability across different product types, or 3) Joining with vendor data to assess if cost changes correlate with supplier changes. The query could answer business questions about which products require closer cost monitoring, which suppliers cause the most price variability, or how cost stability affects profit margins.","Who worked di satu divisi lebih dari 2 tahun tanpa pindah? Show businessentityid, departmentid, and total_days.","Siapa aja yang kerja terus di satu divisi selama lebih dari 2 tahun? Tampilkan businessentityid, departmentid, dan total_days.","['productid', 'name', 'cost_stddev', 'record_count']"
"List the top 10 products with the highest cumulative transaction cost from transactionhistory and transactionhistoryarchive. Show productid, name, total_cost.","SELECT p.productid, p.name,
  SUM(COALESCE(t.actualcost, 0)) + SUM(COALESCE(ta.actualcost, 0)) AS total_cost
FROM product p
LEFT JOIN transactionhistory t ON p.productid = t.productid
LEFT JOIN transactionhistoryarchive ta ON p.productid = ta.productid
GROUP BY p.productid, p.name
ORDER BY total_cost DESC
LIMIT 10;","This SQL query calculates the total actual cost for each product by summing costs from both current transactions (transactionhistory) and archived transactions (transactionhistoryarchive). It joins the 'product' table with both transaction tables using LEFT JOINs to ensure all products are included, even those without transactions, and uses COALESCE to handle null values. The query groups results by product ID and name, then identifies the top 10 highest-cost products by ordering the summed costs in descending order. This helps identify products with the highest cumulative transaction costs, useful for inventory valuation and cost analysis. Key modifications could include: 1) Adding date filters to analyze cost trends over specific time periods, 2) Incorporating product categories to compare costs across different product types, or 3) Calculating cost per unit by joining with quantity data. The query could answer business questions about which products contribute most to operational costs, how costs are distributed across the product catalog, or identifying candidates for cost reduction initiatives.",Which vendors have the highest average unit price in purchases? Show vendorid and avg_unitprice.,Vendor mana yang harga unit barangnya paling mahal rata-ratanya? Tampilkan vendorid dan avg_unitprice.,"['productid', 'name', 'total_cost']"
Find employees who have changed departments the most throughout their employment. Show businessentityid and change_count.,"SELECT businessentityid,
  COUNT(DISTINCT departmentid) AS change_count
 FROM employeedepartmenthistory
 GROUP BY businessentityid
 ORDER BY change_count DESC
 LIMIT 10;","This SQL query identifies the top 10 employees with the most department changes by counting distinct department IDs for each employee in the 'employeedepartmenthistory' table. It groups records by businessentityid, calculates the number of unique department changes (change_count), and sorts results in descending order. This helps analyze employee mobility patterns and identify frequent department transfers. Key modifications could include: 1) Adding date filters to focus on specific time periods of organizational changes, 2) Joining with employee data to analyze department changes by job title or tenure, or 3) Calculating average duration per department to distinguish between short-term assignments and permanent transfers. The query could answer business questions about workforce flexibility, departmental rotation programs, or identifying employees with broad organizational experience.","Which products were never sold, reviewed, or used in a work order? Show productid and name.","Produk apa aja yang belum pernah dijual, di-review, atau dipakai di work order? Tampilkan productid dan name.","['businessentityid', 'change_count']"
Determine vendors who supplied the largest number of different products. Show businessentityid and product_count.,"SELECT businessentityid,
  COUNT(DISTINCT productid) AS product_count
 FROM productvendor
 GROUP BY businessentityid
 ORDER BY product_count DESC
 LIMIT 10;","This SQL query identifies the top 10 vendors supplying the most distinct products by counting unique product IDs associated with each vendor in the 'productvendor' table. It groups records by businessentityid (vendor ID), calculates the count of distinct products supplied (product_count), and sorts results in descending order. This helps procurement teams identify key suppliers with the broadest product offerings. Key modifications could include: 1) Adding vendor names from a vendor table for better readability, 2) Filtering by product category to analyze vendor specialization, or 3) Incorporating purchase volume data to assess vendor importance beyond product variety. The query could answer business questions about supplier diversification strategies, identifying potential single-source dependencies, or evaluating vendor performance based on product range.",Which 5 product models have the biggest difference in price history? Show productmodelid and price_range.,Model produk mana yang rentang perubahan harganya paling besar? Tampilkan productmodelid dan price_range.,"['businessentityid', 'product_count']"
"Get average review rating and total reviews per product model. Show productmodelid, name, avg_rating, total_reviews.","SELECT pm.productmodelid, pm.name,
  AVG(pr.rating) AS avg_rating,
  COUNT(pr.productreviewid) AS total_reviews
FROM productmodel pm
JOIN product p ON pm.productmodelid = p.productmodelid
JOIN productreview pr ON p.productid = pr.productid
GROUP BY pm.productmodelid, pm.name
ORDER BY avg_rating DESC
LIMIT 10;","This SQL query identifies the top 10 product models with the highest average customer ratings by joining the 'productmodel', 'product', and 'productreview' tables. It calculates the average rating (avg_rating) and total review count (total_reviews) for each product model, grouping by model ID and name, then sorting by average rating in descending order. This helps identify the best-performing products based on customer feedback. Key modifications could include: 1) Adding a minimum review count filter to ensure statistical significance, 2) Incorporating product category data to compare ratings across different product types, or 3) Analyzing rating trends over time by joining with review dates. The query could answer business questions about product quality perception, identifying potential candidates for product awards or promotions, or comparing customer satisfaction across different product lines.",Which 5 currencies fluctuate the most? Show currencycode and volatility.,Mata uang mana yang nilai tukarnya paling naik turun? Tampilkan currencycode dan volatility.,"['productmodelid', 'name', 'avg_rating', 'total_reviews']"
"Find locations with the highest total actual cost from workorderrouting. Show locationid, name, total_actual_cost.","SELECT l.locationid, l.name,
  SUM(wr.actualcost) AS total_actual_cost
FROM workorderrouting wr
JOIN location l ON wr.locationid = l.locationid
GROUP BY l.locationid, l.name
ORDER BY total_actual_cost DESC
LIMIT 10;","This SQL query identifies the top 10 highest-cost manufacturing locations by analyzing work order routing data. It joins the workorderrouting and Location tables to calculate the total actual costs incurred at each location, then ranks them in descending order. This analysis helps operations managers pinpoint the most expensive facilities for potential cost optimization efforts. The query could be extended by: 1) adding date filters to analyze cost trends over time, 2) including production volume metrics to assess cost efficiency, or 3) breaking down costs by work order type or product category. Potential applications include answering: 'Which manufacturing locations contribute most to our operational costs?' or 'Are there opportunities to redistribute production for better cost efficiency?'",Which 3 employees had the most job titles over time? Show businessentityid and jobtitle_count.,Karyawan mana aja yang paling sering ganti jabatan? Tampilkan businessentityid dan jobtitle_count.,"['locationid', 'name', 'total_actual_cost']"
Determine the average lead time per product category from productvendor and productsubcategory. Show category name and avg_leadtime.,"SELECT pc.name AS category_name,
  AVG(pv.averageleadtime) AS avg_leadtime
FROM product p
JOIN productsubcategory ps ON p.productsubcategoryid = ps.productsubcategoryid
JOIN productcategory pc ON ps.productcategoryid = pc.productcategoryid
JOIN productvendor pv ON p.productid = pv.productid
GROUP BY pc.name
ORDER BY avg_leadtime DESC;","This SQL query analyzes average supplier lead times by product category by joining the product, productsubcategory, productcategory, and productvendor tables. It calculates the average lead time (averageleadtime) for products in each category, then orders results from longest to shortest lead times. This analysis helps supply chain teams identify which product categories typically have the longest procurement cycles, enabling better inventory planning and supplier management. The query could be extended by: 1) adding standard deviation to understand lead time variability, 2) filtering for specific vendors to assess performance differences, or 3) incorporating inventory turnover rates to identify potential stockout risks. Potential applications include answering: 'Which product categories have the most challenging supply chains?' or 'How should we adjust our inventory policies based on procurement lead times?'","How many documents are there by status and folderflag? Show status, folderflag, and total_docs.","Ada berapa dokumen berdasarkan status dan folderflag-nya? Tampilkan status, folderflag, dan total_docs.","['category_name', 'avg_leadtime']"
Identify the top 5 customers with the highest number of sales orders. Show customerid and total_orders.,"SELECT customerid,
  COUNT(*) AS total_orders
 FROM salesorderheader
 GROUP BY customerid
 ORDER BY total_orders DESC
 LIMIT 5;","This SQL query identifies the top 5 customers by order volume by counting the number of sales orders per customer in the salesorderheader table. It groups records by customerid, counts the total orders per customer, and sorts the results in descending order to highlight the most active customers. This analysis helps sales teams recognize valuable customers for loyalty programs and targeted marketing. The query could be extended by: 1) adding date filters to analyze recent purchasing activity, 2) joining with customer tables to include demographic information, or 3) incorporating order value data to identify high-value customers. Potential applications include answering: 'Who are our most frequent purchasers?' or 'Which customers should we prioritize for retention efforts?'","Which stores have employees with the biggest bonuses? Show store_name, employeeid, and bonus.","Toko mana yang punya pegawai dengan bonus paling gede? Tampilkan store_name, employeeid, dan bonus.","['customerid', 'total_orders']"
"List the most frequently used ship methods and their total usage count in sales orders. Show shipmethodid, name, usage_count.","SELECT s.shipmethodid, s.name,
  COUNT(*) AS usage_count
FROM salesorderheader soh
JOIN shipmethod s ON soh.shipmethodid = s.shipmethodid
GROUP BY s.shipmethodid, s.name
ORDER BY usage_count DESC;","This SQL query analyzes shipping method popularity by counting how often each method is used in sales orders. It joins the salesorderheader and shipmethod tables, groups results by shipping method ID and name, and orders them by usage count in descending order. The output helps logistics teams understand shipping preferences across the organization, which can inform carrier contract negotiations and service improvements. The query could be extended by: 1) adding date filters to analyze seasonal shipping patterns, 2) incorporating order value data to assess cost-effectiveness of popular methods, or 3) joining with customer data to identify regional preferences. Potential applications include answering: 'Which shipping methods are most frequently used?' or 'Are there underutilized shipping options that could better serve our customers?'",Which product models have the biggest average difference between their lowest and highest list prices? Show productmodelid and price_range.,Model produk mana yang punya selisih harga list paling besar rata-ratanya? Tampilkan productmodelid dan price_range.,"['shipmethodid', 'name', 'usage_count']"
"Find which product categories have products with the largest weight range. Show category name, min_weight, max_weight, weight_diff.","SELECT pc.name AS category_name,
  MIN(p.weight) AS min_weight,
  MAX(p.weight) AS max_weight,
  MAX(p.weight) - MIN(p.weight) AS weight_diff
FROM product p
JOIN productsubcategory ps ON p.productsubcategoryid = ps.productsubcategoryid
JOIN productcategory pc ON ps.productcategoryid = pc.productcategoryid
WHERE p.weight IS NOT NULL
GROUP BY pc.name
ORDER BY weight_diff DESC
LIMIT 5;","This SQL query analyzes product weight variations across different categories by joining the product, productsubcategory, and productcategory tables. It calculates minimum, maximum, and range of weights for each product category, filtering out products with null weights. The results are ordered by the largest weight differences to highlight categories with the most variability. This analysis helps inventory and logistics teams understand weight distribution patterns, which can inform packaging strategies and shipping cost estimates. The query could be extended by: 1) adding average weight calculations to better understand central tendencies, 2) including product count per category to assess sample sizes, or 3) filtering for specific subcategories to drill down into particular product lines. Potential applications include answering: 'Which product categories show the greatest weight variability?' or 'How might weight distributions impact our shipping cost structures?'",Which 5 currencies fluctuate the most based on exchange rate changes? Show currencycode and volatility.,Mata uang apa aja yang nilai tukarnya paling naik turun? Tampilkan currencycode dan volatility.,"['category_name', 'min_weight', 'max_weight', 'weight_diff']"
"List each salespersonâ€™s full name and their highest single order total (totaldue), only for orders above 10000. Show salesperson_name and max_order_total.","SELECT 
  CONCAT(p.firstname, ' ', p.lastname) AS salesperson_name,
  MAX(soh.totaldue) AS max_order_total
 FROM salesorderheader soh
 JOIN salesperson sp ON soh.salespersonid = sp.businessentityid
 JOIN person p ON sp.businessentityid = p.businessentityid
 WHERE soh.totaldue > 10000
 GROUP BY salesperson_name;","This SQL query identifies the maximum order total for each salesperson on high-value orders (over $10,000) by joining the salesorderheader, salesperson, and person tables. It concatenates first and last names for readability, filters for orders exceeding $10,000, and calculates the maximum order total per salesperson. The output helps sales managers recognize top performers on large deals and assess sales team effectiveness with high-value customers. The query could be extended by: 1) adding date ranges to analyze performance trends, 2) including average order totals to compare consistency across salespeople, or 3) joining with customer data to identify key accounts. Potential applications include answering: 'Which salespeople consistently close the largest deals?' or 'How do our top performers handle high-value customers differently?'",Which 3 employees had the most different job titles over time? Show businessentityid and jobtitle_count.,Siapa aja 3 karyawan yang paling sering ganti jabatan? Tampilkan businessentityid dan jobtitle_count.,"['salesperson_name', 'max_order_total']"
Find the top 5 products with the highest average sales order quantity. Show product_id and avg_quantity.,"SELECT 
  sod.productid,
  AVG(sod.orderqty) AS avg_quantity
 FROM salesorderdetail sod
 GROUP BY sod.productid
 ORDER BY avg_quantity DESC
 LIMIT 5;","This SQL query identifies the top 5 products with the highest average order quantities by analyzing the salesorderdetail table. It calculates the average order quantity (orderqty) per productid and sorts the results in descending order. The output helps inventory and sales teams recognize products that are typically purchased in large quantities, which can inform bulk purchasing decisions and inventory management strategies. The query could be extended by: 1) adding date filters to identify seasonal purchasing patterns, 2) joining with product tables to include product names and categories, or 3) calculating the coefficient of variation to assess order quantity consistency. Potential applications include answering: 'Which products have the highest average order volumes?' or 'Are there opportunities to offer bulk discounts on frequently large-quantity items?'","How many documents are there by their status and folderflag? Show status, folderflag, and total_docs.","Ada berapa dokumen untuk tiap status dan folderflag? Tampilkan status, folderflag, dan total_docs.","['productid', 'avg_quantity']"
Show vendors who have provided more than 3 different products. Show vendor_id and num_products_supplied.,"SELECT 
  pv.businessentityid AS vendor_id,
  COUNT(DISTINCT pv.productid) AS num_products_supplied
 FROM productvendor pv
 GROUP BY vendor_id
 HAVING COUNT(DISTINCT pv.productid) > 3;","This SQL query identifies vendors who supply more than 3 distinct products by analyzing the productvendor table. It counts unique productids per vendor (businessentityid) and filters for vendors supplying more than 3 products using a HAVING clause. The output helps procurement teams identify key suppliers with diverse product offerings, which could be valuable for supply chain optimization and vendor relationship management. The query could be extended by: 1) joining with vendor tables to include vendor names and contact details, 2) adding product category filters to analyze suppliers by specific product types, or 3) incorporating purchase volume data to assess supplier importance. Potential applications include answering: 'Which vendors provide the most product diversity to our organization?' or 'Are there opportunities to consolidate purchases with our most versatile suppliers?'","Which stores are connected to employees who got the biggest bonuses? Show store_name, employeeid, and bonus.","Toko mana aja yang pegawainya dapat bonus paling gede? Tampilkan store_name, employeeid, dan bonus.","['vendor_id', 'num_products_supplied']"
Find employees who have changed departments at least twice. Show employee_id and department_change_count.,"SELECT 
  edh.businessentityid AS employee_id,
  COUNT(DISTINCT edh.departmentid) AS department_change_count
 FROM employeedepartmenthistory edh
 GROUP BY edh.businessentityid
 HAVING COUNT(DISTINCT edh.departmentid) >= 2;","This SQL query identifies employees who have worked in multiple departments by analyzing the employeedepartmenthistory table. It counts distinct department assignments per employee (businessentityid) and filters for those with 2 or more department changes using a HAVING clause. The output helps HR track employee mobility and career progression within the organization. This analysis could inform talent development programs or department transfer policies. The query could be extended by: 1) adding date ranges to analyze mobility trends over time, 2) joining with employee tables to include demographic details, or 3) calculating average tenure per department for mobile employees. Potential applications include answering: 'Which employees have the most cross-departmental experience?' or 'Is there a correlation between department mobility and promotion rates?'","Which products weigh more than the average weight in their size unit group? Show productid, name, weight, and avg_group_weight.","Produk apa yang beratnya di atas rata-rata dalam grup ukuran yang sama? Tampilkan productid, name, weight, dan avg_group_weight.","['employee_id', 'department_change_count']"
List the customers whose sales orders include more than 3 different products. Show customer_id and num_distinct_products.,"SELECT 
  soh.customerid,
  COUNT(DISTINCT sod.productid) AS num_distinct_products
 FROM salesorderheader soh
 JOIN salesorderdetail sod ON soh.salesorderid = sod.salesorderid
 GROUP BY soh.customerid
 HAVING COUNT(DISTINCT sod.productid) > 3;","This SQL query identifies customers who have purchased more than 3 distinct products by joining the 'salesorderheader' and 'salesorderdetail' tables on salesorderid. It counts unique productids per customerid and filters for customers with product diversity exceeding 3 items using a HAVING clause. The output helps marketing teams recognize product-diverse customers who may be receptive to cross-selling or loyalty programs. The query could be modified by: 1) adding date ranges to analyze purchasing patterns over time, 2) including customer demographics to identify high-value segments, or 3) calculating average order value alongside product diversity. Potential questions this could answer include: 'Which customers demonstrate the most varied purchasing behavior?' or 'Is there a correlation between product diversity and customer lifetime value?'","Which 5 products had the most unstable standard cost? Show productid, name, stddev of cost, and how many records they have.","Produk apa aja yang biaya standarnya paling gak stabil? Tampilkan productid, name, standar deviasi cost, dan jumlah recordnya.","['customerid', 'num_distinct_products']"
Show the most common ship methods for orders over 5000 totaldue. Show shipmethod_name and num_orders.,"SELECT 
  sm.name AS shipmethod_name,
  COUNT(*) AS num_orders
FROM salesorderheader soh
JOIN shipmethod sm ON soh.shipmethodid = sm.shipmethodid
WHERE soh.totaldue > 5000
GROUP BY sm.name
ORDER BY num_orders DESC;","This SQL query analyzes high-value sales orders (over $5000) by counting how many orders use each shipping method. It joins the 'salesorderheader' and 'shipmethod' tables on shipmethodid, filters for orders with totaldue exceeding 5000, and groups results by shipping method name. The output ranks shipping methods by their popularity among high-value orders in descending order. This helps logistics teams understand which shipping options are preferred for valuable shipments, potentially informing carrier negotiations or service improvements. The query could be modified by: 1) adding date filters to track shipping preferences over time, 2) including average order value per shipping method to assess value correlations, or 3) breaking down results by geographic region to identify location-based preferences. Potential questions this could answer include: 'Which shipping methods are most trusted for high-value orders?' or 'Are there underutilized shipping options that could better serve our premium customers?'","What are the 10 products with the highest total transaction cost from transaction records? Show productid, name, and total_cost.","Apa aja 10 produk yang total biaya transaksinya paling tinggi? Tampilkan productid, name, dan total_cost.","['shipmethod_name', 'num_orders']"
Identify the top 5 products with the highest cost fluctuations. Show product_id and cost_variance.,"SELECT 
  pch.productid,
  MAX(pch.standardcost) - MIN(pch.standardcost) AS cost_variance
 FROM productcosthistory pch
 GROUP BY pch.productid
 ORDER BY cost_variance DESC
 LIMIT 5;","This SQL query identifies the top 5 products with the highest historical cost variance by calculating the difference between maximum and minimum standard costs recorded in the productcosthistory table. It groups records by productid and computes the cost variance as the range between the highest and lowest standardcost values for each product. The results are ordered by cost_variance in descending order to highlight products with the most significant price fluctuations. This analysis helps procurement teams identify items with volatile pricing that may require contract renegotiation or alternative sourcing strategies. The query could be modified by: 1) adding date filters to analyze cost variance within specific time periods, 2) joining with product tables to include descriptive information, or 3) calculating percentage variance to normalize comparisons across differently priced products. Potential questions this could answer include: 'Which products have shown the most price instability?' or 'Are there seasonal patterns in our highest-variance products?'",Which employees changed departments the most times during their career? Show businessentityid and change_count.,Karyawan mana aja yang paling sering pindah departemen? Tampilkan businessentityid dan change_count.,"['productid', 'cost_variance']"
"Find the top 5 employees with the longest cumulative duration across all departments they've worked in. Show businessentityid, total_days.","SELECT businessentityid,
  SUM(COALESCE(enddate, CURRENT_DATE) - startdate) AS total_days
  FROM employeedepartmenthistory
  GROUP BY businessentityid
  ORDER BY total_days DESC
  LIMIT 5;","This SQL query identifies the top 5 employees with the longest cumulative tenure across all departments by calculating their total days worked. It uses the 'employeedepartmenthistory' table, employing COALESCE to handle null end dates (assuming current employment) by substituting CURRENT_DATE, and sums date differences between start and end dates for each businessentityid. The results are ordered by total_days in descending order. This analysis helps recognize long-serving employees for retention programs or institutional knowledge assessment. The query could be modified by: 1) filtering for specific departments to analyze departmental tenure patterns, 2) adding employee names from a related table for better identification, or 3) calculating average tenure per department assignment. Potential questions this could answer include: 'Which employees have the most organizational experience?' or 'How does department-hopping affect total tenure compared to stable department assignments?'",Which vendors supplied the highest number of unique products? Show businessentityid and product_count.,Vendor mana yang nyuplai produk paling beragam? Tampilkan businessentityid dan product_count.,"['businessentityid', 'total_days']"
"List the top 5 products with the highest discrepancy between standard cost and average purchase unit price. Show productid, standard_cost, avg_purchase_price, cost_diff.","SELECT p.productid, p.standardcost, AVG(pod.unitprice) AS avg_purchase_price,
  ABS(p.standardcost - AVG(pod.unitprice)) AS cost_diff
  FROM product p
  JOIN purchaseorderdetail pod ON p.productid = pod.productid
  GROUP BY p.productid, p.standardcost
  ORDER BY cost_diff DESC
  LIMIT 5;","This SQL query identifies the top 5 products with the largest discrepancies between their standard cost and average purchase price. It joins the 'product' and 'purchaseorderdetail' tables on productid, calculates the average purchase price per product, and computes the absolute difference between standard cost and average purchase price. The results are ordered by this cost difference in descending order. This analysis helps detect potential pricing inconsistencies or cost calculation errors in procurement. Business users could leverage this to investigate supplier pricing anomalies or internal cost accounting issues. The query could be modified by: 1) adding a percentage difference calculation to better compare across products with different price ranges, 2) filtering for specific product categories to focus analysis, or 3) including supplier information to identify problematic vendor relationships. Potential questions this query could help answer include: 'Which products have the most significant variance between expected and actual purchase costs?' or 'Are there systematic pricing discrepancies with certain suppliers?'","How good are products rated by customers on average and how many reviews do they have? Show productmodelid, name, avg_rating, and total_reviews.","Rata-rata rating produk gimana dan ada berapa reviewnya? Tampilkan productmodelid, name, avg_rating, dan total_reviews.","['productid', 'standardcost', 'avg_purchase_price', 'cost_diff']"
Find products that appear in work orders and sales orders but not in purchase orders. Show productid and total_workorders.,"SELECT wo.productid, COUNT(*) AS total_workorders
  FROM workorder wo
  WHERE wo.productid IN (
  SELECT sod.productid FROM salesorderdetail sod
  ) AND wo.productid NOT IN (
  SELECT pod.productid FROM purchaseorderdetail pod
  )
  GROUP BY wo.productid;","This SQL query identifies products that have work orders associated with them, are listed in sales order details, but are not found in purchase order details. It joins the 'workorder' table with subqueries from 'salesorderdetail' and 'purchaseorderdetail' tables, using IN and NOT IN clauses to filter products. The query counts work orders per qualifying product, providing insight into products that are sold and maintained but not directly purchased. This output could help analyze potential supply chain issues or consignment inventory scenarios. Modifications could include: 1) adding product names from a product table for better readability, 2) filtering by date ranges to identify temporal patterns, or 3) incorporating cost data to assess financial impact. The query could answer questions like: 'Which sold products require maintenance but aren't in our purchase system?' or 'Are there consignment items creating unexpected maintenance workloads?'","Which work order locations have the biggest total actual costs? Show locationid, name, and total_actual_cost.","Lokasi kerja mana yang habisin biaya aktual paling besar? Tampilkan locationid, name, dan total_actual_cost.","['productid', 'total_workorders']"
"Find top 5 customers with most frequently used credit cards. Show customerid, creditcardid, usage_count.","SELECT soh.customerid, soh.creditcardid, COUNT(*) AS usage_count
  FROM salesorderheader soh
  WHERE soh.creditcardid IS NOT NULL
  GROUP BY soh.customerid, soh.creditcardid
  ORDER BY usage_count DESC
  LIMIT 5;","This SQL query identifies the top 5 most frequently used credit card and customer combinations by analyzing the 'salesorderheader' table. It counts the number of transactions for each customer-credit card pair (excluding non-credit card transactions) and returns the most frequently used combinations. This analysis helps recognize preferred payment methods of high-volume customers, which is valuable for payment processing optimization and customer relationship management. Key modifications could include: 1) adding transaction amount analysis, 2) comparing with other payment methods, or 3) examining usage patterns over time. This query could answer business questions about payment preferences, help optimize payment processing fees, or inform decisions about credit card reward programs.",Whatâ€™s the average lead time for each product category? Show category name and avg_leadtime.,Berapa rata-rata waktu tunggu untuk tiap kategori produk? Tampilkan category name dan avg_leadtime.,"['customerid', 'creditcardid', 'usage_count']"
List top 5 product categories with the most diverse subcategories. Show productcategoryid and subcategory_count.,"SELECT productcategoryid, COUNT(*) AS subcategory_count
  FROM productsubcategory
  GROUP BY productcategoryid
  ORDER BY subcategory_count DESC
  LIMIT 5;","his SQL query identifies the top 5 product categories with the most subcategories by analyzing the 'productsubcategory' table. It counts the number of subcategories for each product category and returns the categories with the highest subcategory counts. This analysis helps recognize product categories with the most granular classification, which is valuable for inventory organization and merchandising strategy. Key modifications could include: 1) joining with product data to analyze sales per subcategory, 2) calculating average products per subcategory, or 3) examining subcategory growth over time. This query could answer business questions about product classification structure, help optimize category management, or inform decisions about product taxonomy.",Which 5 customers placed the most sales orders? Show customerid and total_orders.,Pelanggan mana aja yang paling sering pesan barang? Tampilkan customerid dan total_orders.,"['productcategoryid', 'subcategory_count']"
"Find top 5 products with the longest time span between list price changes. Show productid, days_span.","SELECT productid,
  MAX(startdate) - MIN(startdate) AS days_span
  FROM productlistpricehistory
  GROUP BY productid
  ORDER BY days_span DESC
  LIMIT 5;","This SQL query identifies the top 5 products with the longest price change history by analyzing the 'productlistpricehistory' table. It calculates the time span (in days) between the earliest and most recent price changes for each product and returns the products with the longest price change histories. This analysis helps recognize products with the most dynamic pricing strategies, which is valuable for pricing analysis and inventory management. Key modifications could include: 1) calculating the number of price changes per product, 2) analyzing the magnitude of price changes, or 3) comparing with sales volume trends. This query could answer business questions about pricing strategy longevity, help identify products requiring price stability analysis, or inform decisions about price change frequency.","What ship methods are used most often in sales orders? Show shipmethodid, name, and usage_count.","Metode kirim apa yang paling sering dipakai buat pesanan? Tampilkan shipmethodid, name, dan usage_count.","['productid', 'days_span']"
"List the top 5 employees who have the longest cumulative department tenure (total days worked across all departments). Show businessentityid and total_days_worked. (Columns: businessentityid, total_days_worked)","SELECT edh.businessentityid,
  SUM(COALESCE(edh.enddate, CURRENT_DATE) - edh.startdate) AS total_days_worked
  FROM employeedepartmenthistory edh
  GROUP BY edh.businessentityid
  ORDER BY total_days_worked DESC
  LIMIT 5;","This SQL query identifies the top 5 longest-tenured employees by calculating their total days worked across all departments. It analyzes the 'employeedepartmenthistory' table, summing the duration (in days) between start and end dates for each employee (using CURRENT_DATE for active employees) and returns those with the longest cumulative tenure. This analysis helps recognize the most experienced employees, which is valuable for succession planning and institutional knowledge retention. Key modifications could include: 1) calculating average tenure per department, 2) analyzing tenure distribution by job title, or 3) comparing tenure with performance metrics. This query could answer business questions about employee retention, help identify subject matter experts, or inform mentorship program development.","Which product categories have the biggest spread in product weights? Show category name, min_weight, max_weight, and weight_diff.","Kategori produk mana yang punya selisih berat paling besar? Tampilkan category name, min_weight, max_weight, dan weight_diff.","['businessentityid', 'total_days_worked']"
List top 5 departments with the longest cumulative employee tenure. Show departmentid and total_days.,"SELECT edh.departmentid,
       SUM(COALESCE(edh.enddate, CURRENT_DATE) - edh.startdate) AS total_days
FROM employeedepartmenthistory edh
GROUP BY edh.departmentid
ORDER BY total_days DESC
LIMIT 5;","This SQL query identifies the top 5 departments with the highest cumulative employee tenure by analyzing the 'employeedepartmenthistory' table. It calculates the total days employees have spent in each department (using COALESCE to handle current employees without end dates) and returns the departments with the longest combined tenure. This analysis helps recognize departments with the most stable workforce, which is valuable for organizational planning and employee retention strategies. Key modifications could include: 1) calculating average tenure per department, 2) analyzing tenure trends over time, or 3) comparing with department performance metrics. This query could answer business questions about workforce stability, help identify departments with strong retention, or inform decisions about department management practices.","For each salesperson, whatâ€™s their biggest order value above 10k? Show salesperson_name and max_order_total.",Penjual mana yang pernah dapat pesanan paling besar di atas 10 ribu? Tampilkan salesperson_name dan max_order_total.,"['departmentid', 'total_days']"
List the top 5 most active employees based on the number of work orders they handled. Show businessentityid and workorder_count.,"SELECT e.businessentityid, COUNT(DISTINCT wo.workorderid) AS workorder_count
FROM employee e
JOIN workorder wo ON e.businessentityid = wo.productid
GROUP BY e.businessentityid
ORDER BY workorder_count DESC
LIMIT 5;","This SQL query identifies the top 5 employees with the most distinct work orders assigned by joining the 'employee' and 'workorder' tables. It counts the number of unique work orders for each employee and returns the employees with the highest work order counts. This analysis helps recognize the most productive employees based on work order volume, which is valuable for performance evaluation and resource allocation. Key modifications could include: 1) adding time periods to analyze productivity trends, 2) calculating work order completion rates, or 3) examining work order complexity. This query could answer business questions about employee productivity, help identify top performers, or inform decisions about workload distribution.",Which 5 products have the highest average quantity sold per order? Show product_id and avg_quantity.,Produk mana yang rata-rata dijual paling banyak per pesanan? Tampilkan product_id dan avg_quantity.,"['businessentityid', 'workorder_count']"
"List the product categories with the highest number of distinct products sold in sales orders. Show productcategoryid, name, product_count.","SELECT pc.productcategoryid, pc.name, COUNT(DISTINCT sod.productid) AS product_count
  FROM salesorderdetail sod
  JOIN product p ON sod.productid = p.productid
  JOIN productsubcategory ps ON p.productsubcategoryid = ps.productsubcategoryid
  JOIN productcategory pc ON ps.productcategoryid = pc.productcategoryid
  GROUP BY pc.productcategoryid, pc.name
  ORDER BY product_count DESC
  LIMIT 5;","This SQL query identifies the top 5 product categories with the most distinct products sold by joining the 'salesorderdetail', 'product', 'productsubcategory', and 'productcategory' tables. It counts the number of unique products sold for each category and returns the categories with the highest product diversity in sales. This analysis helps recognize which product categories have the broadest customer appeal, which is valuable for inventory management and marketing strategy. Key modifications could include: 1) adding time filters to analyze seasonal trends, 2) calculating sales volume per category, or 3) examining average order quantities. This query could answer business questions about product category performance, help optimize product assortment, or inform decisions about category promotions.",Which vendors supplied more than 3 unique products? Show vendor_id and num_products_supplied.,Vendor mana aja yang nyuplai lebih dari 3 produk berbeda? Tampilkan vendor_id dan num_products_supplied.,"['productcategoryid', 'name', 'product_count']"
Find the top 5 departments with the most total employment history records. Show departmentid and total_records.,"SELECT edh.departmentid, COUNT(*) AS total_records
  FROM employeedepartmenthistory edh
  GROUP BY edh.departmentid
  ORDER BY total_records DESC
  LIMIT 5;","This SQL query identifies the top 5 departments with the most employee records in the department history by analyzing the 'employeedepartmenthistory' table. It counts the number of records for each department and returns the departments with the highest counts, ordered from most to least records. This analysis helps recognize departments with the most employee movement or largest size, which is valuable for HR planning and organizational analysis. Key modifications could include: 1) adding time filters to analyze trends, 2) joining with employee data to count distinct employees, or 3) comparing with current department sizes. This query could answer business questions about department activity, help with workforce planning, or inform decisions about resource allocation.",Which employees switched departments at least twice? Show employee_id and department_change_count.,Karyawan mana aja yang pernah pindah departemen minimal dua kali? Tampilkan employee_id dan department_change_count.,"['departmentid', 'total_records']"