Question,Answer,Summary,Alternative Prompt 1 (English),Alternative Prompt 2 (Bahasa Indonesia),Expected Result
How much total revenue did we make in 1997? Show the result as 1997 Total Revenues.,SELECT SUM(od.unit_price * od.quantity * (1.0 - od.discount)) AS total_revenue_1997 FROM order_details od INNER JOIN orders o ON od.order_id = o.order_id WHERE EXTRACT(YEAR FROM o.order_date) = 1997;,"This SQL query calculates the total revenue generated in 1997 by summing the product of unit price, quantity, and discount-adjusted values from order details. It joins the 'order_details' and 'orders' tables on 'order_id' and filters for orders placed in 1997 using EXTRACT on the 'order_date' field. The primary metric is 'total_revenue_1997', which provides a key business performance indicator. The query could be modified by (1) grouping revenue by month or quarter to analyze seasonal trends, (2) adding product categories from a related table to break down revenue by product type, or (3) comparing 1997 revenue to other years by adjusting the WHERE clause. This query would help analysts answer questions about annual sales performance, year-over-year growth, and the effectiveness of discount strategies in 1997.",How much money did we make in 1997 total? Show it as '1997 Total Revenues'.,Total pendapatan kita tahun 1997 berapa sih? Tampilkan sebagai '1997 Total Revenues'.,['total_revenue_1997']
How much has each customer paid us in total? Show their CompanyName and total as Total.,"SELECT c.company_name, SUM(od.unit_price * od.quantity * (1.0 - od.discount)) AS total FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id INNER JOIN order_details od ON od.order_id = o.order_id GROUP BY c.company_name ORDER BY total DESC;","This SQL query calculates the total revenue generated by each customer, sorted in descending order by revenue. It joins the 'customers', 'orders', and 'order_details' tables using 'customer_id' and 'order_id', and computes the sum of the product of unit price, quantity, and discount-adjusted values for each customer. The primary metric is 'total', representing the aggregated revenue per customer. The results are grouped by 'company_name' and ordered by total revenue, providing insights into top-performing customers. This query can be modified by (1) adding a date filter to analyze revenue within a specific time period, (2) including customer regions or categories to segment revenue by demographics, or (3) calculating average order value per customer by dividing total revenue by the count of orders. The query helps answer business questions such as identifying key accounts, evaluating customer loyalty, and assessing the impact of discounts on overall revenue.",How much has each customer paid overall? Show 'CompanyName' and total as 'Total'.,Tiap customer udah bayar ke kita totalnya berapa? Tampilkan 'CompanyName' dan totalnya sebagai 'Total'.,"['company_name', 'total']"
What are the top 10 best-selling products based on sales revenue after getting discounted? Show the ProductName and Sales amount.,"SELECT p.product_name, SUM(od.unit_price * od.quantity * (1.0 - od.discount)) AS sales FROM products p INNER JOIN order_details od ON od.product_id = p.product_id GROUP BY p.product_name ORDER BY sales DESC LIMIT 10;","This SQL query identifies the top 10 best-selling products by calculating total sales revenue (unit price multiplied by quantity and adjusted for discount) for each product. It joins the 'products' and 'order_details' tables on product_id, groups results by product_name, and sorts by descending sales. The query provides valuable insights into product performance by revealing highest revenue-generating items. Key modifications could include: 1) adding product categories to analyze performance by category, 2) filtering by date range to examine sales trends over time, or 3) incorporating inventory data to assess sales-to-stock ratios. This query could answer business questions such as: 'Which products contribute most to revenue?', 'How do discounts impact overall sales volume?', or 'What are our most profitable products?'","What are our top 10 most sold products, looking from revenue after getting discounted? Show 'ProductName' and 'Sales amount'.",10 produk paling laku berdasarkan pendapatan setelah didiskonkan? Tampilkan 'ProductName' dan 'Sales amount'.,"['product_name', 'sales']"
Which customers from the UK have paid us more than $1000 in total? Show ContactName and Payments.,"SELECT c.contact_name,
       SUM(od.unit_price * od.quantity * (1.0 - od.discount)) AS payments
FROM customers c
INNER JOIN orders o ON o.customer_id = c.customer_id
INNER JOIN order_details od ON od.order_id = o.order_id
WHERE c.country = 'UK'
GROUP BY c.contact_name
HAVING SUM(od.unit_price * od.quantity * (1.0 - od.discount)) > 1000;","This SQL query identifies UK-based customers who have made total payments exceeding £1000 by calculating the sum of their order values (unit price multiplied by quantity and adjusted for discount). It joins the 'customers', 'orders', and 'order_details' tables using customer_id and order_id, filters for UK customers, and groups results by contact_name with a HAVING clause to focus on high-value customers. The output helps identify key accounts for targeted marketing or loyalty programs. Key modifications could include: 1) adding order dates to analyze spending patterns over time, 2) comparing UK customer spending to other regions by adjusting the country filter, or 3) incorporating product categories to understand purchasing preferences. This query could answer business questions such as: 'Who are our most valuable UK customers?', 'How does discounting affect customer spending thresholds?', or 'What's the minimum spend threshold that identifies our top 20% of customers?'",Which UK customers paid more than $1000? Show 'ContactName' and 'Payments'.,Customer dari UK yang bayar lebih dari $1000 siapa aja? Tampilkan 'ContactName' dan 'Payments'.,"['contact_name', 'payments']"
"How much revenue has each customer generated in total, including those who made no purchases, and how much of that revenue came specifically from the year 1997? Please show the CustomerID, CompanyName, and Country, along with the total revenue labeled as Customer Total and the revenue from 1997 labeled as 1997, ordered by Customer Total.","SELECT c.customer_id, c.company_name, c.country, COALESCE(SUM(od.unit_price * od.quantity * (1.0 - od.discount)), 0) AS customer_total, COALESCE((SELECT SUM(od2.unit_price * od2.quantity * (1.0 - od2.discount)) FROM orders o2 JOIN order_details od2 ON o2.order_id = od2.order_id WHERE o2.customer_id = c.customer_id AND EXTRACT(YEAR FROM o2.order_date) = 1997), 0) AS revenue_1997 FROM customers c LEFT JOIN orders o ON o.customer_id = c.customer_id LEFT JOIN order_details od ON od.order_id = o.order_id GROUP BY c.customer_id, c.company_name, c.country ORDER BY customer_total;","This SQL query analyzes customer spending patterns by calculating total lifetime revenue and 1997-specific revenue for each customer. It joins the 'customers', 'orders', and 'order_details' tables using LEFT JOINs to include all customers (even those without orders), calculates discounted order totals (unit_price * quantity * (1 - discount)), and uses a correlated subquery to isolate 1997 revenue. Key features include COALESCE to handle null values, EXTRACT for year filtering, and LEFT JOINs to preserve all customers. The output helps identify high-value customers and year-over-year spending changes. Modifications could include: 1) adding more year-specific columns for trend analysis, 2) comparing 1997 revenue to lifetime averages, or 3) filtering by country/region. This query answers questions like 'Which customers are our biggest spenders overall?' and 'How did 1997 revenue compare to lifetime spending patterns?'","How much has each customer paid in total, including those who didn’t make any purchases, and how much of that was paid in 1997? Please include the CustomerID, CompanyName, and Country, and show the total revenue as Customer Total and the 1997 revenue as 1997, sorted by Customer Total.","Berapa total pembayaran yang dilakukan oleh setiap customer, termasuk yang tidak melakukan pembelian sama sekali, dan berapa yang berasal dari tahun 1997? Tampilkan CustomerID, CompanyName, dan Country, serta total pendapatan sebagai Customer Total dan pendapatan tahun 1997 sebagai 1997, urutkan berdasarkan Customer Total.","['customer_id', 'company_name', 'country', 'customer_total', 'revenue_1997']"
"Which top 1 employee have handled the most orders? Show employee_id, first_name, last_name, and total_orders.","SELECT e.employee_id, e.first_name, e.last_name, COUNT(o.order_id) AS total_orders
  FROM employees e
  JOIN orders o ON e.employee_id = o.employee_id
  GROUP BY e.employee_id, e.first_name, e.last_name
  ORDER BY total_orders DESC
  LIMIT 1;","This SQL query identifies the top 1 employee by order volume by joining the 'employees' and 'orders' tables on employee_id, counting orders per employee, and sorting in descending order. Key operations include a simple JOIN, COUNT aggregation, and LIMIT for result restriction. The output highlights the most productive sales staff, useful for performance evaluation and incentive programs. Modifications could include: 1) adding date filters to analyze performance trends over time, 2) incorporating order value metrics to assess revenue impact, or 3) joining with territories data to evaluate regional performance. This query helps answer questions like 'Who are our most active sales employees?' and 'Which staff members handle the highest order volumes?'","Which top 1 employee handled the most orders? Show 'employee_id', 'first_name', 'last_name', 'total_orders'.","Top 1 Karyawan mana yang paling banyak urus order? Tampilkan 'employee_id', 'first_name', 'last_name', 'total_orders'.","['employee_id', 'first_name', 'last_name', 'total_orders']"
What are the top 5 countries by total number of customers? Show country and total_customers.,"SELECT country, COUNT(customer_id) AS total_customers
  FROM customers
  GROUP BY country
  ORDER BY total_customers DESC
  LIMIT 5;","This SQL query identifies the top 5 countries with the highest customer counts by aggregating customer data from the 'customers' table. Key operations include COUNT aggregation, GROUP BY for country-level grouping, and ORDER BY with LIMIT to focus on the top results. The output provides valuable market penetration insights, helping businesses understand their strongest geographic markets. Modifications could include: 1) adding percentage calculations to show country share of total customers, 2) filtering by customer activity date to analyze recent growth trends, or 3) joining with order data to correlate customer count with sales volume. This query helps answer questions like 'Where is our customer base concentrated geographically?' and 'Which markets show the strongest customer acquisition?'",Top 5 countries with the most customers? Show 'country' and 'total_customers'.,5 negara dengan jumlah customer terbanyak? Tampilkan 'country' dan 'total_customers'.,"['country', 'total_customers']"
"Which top 1 supplier provide the most products? Show supplier_id, company_name, and product_count.","SELECT s.supplier_id, s.company_name, COUNT(p.product_id) AS product_count
  FROM suppliers s
  JOIN products p ON s.supplier_id = p.supplier_id
  GROUP BY s.supplier_id, s.company_name
  ORDER BY product_count DESC
  LIMIT 1;","This SQL query analyzes supplier product offerings by counting the number of products each supplier provides. It joins the 'suppliers' and 'products' tables on supplier_id, groups the results by supplier, and orders them by product count in descending order and get top 1 with LIMIT. The output helps identify key suppliers based on product volume, which is valuable for supply chain management and procurement strategies. Modifications could include: 1) adding product category filters to analyze supplier specialization, 2) incorporating product availability/discontinued status to assess active offerings, or 3) joining with order data to evaluate supplier performance metrics. This query helps answer questions like 'Which suppliers provide the most products?' and 'How diversified are our supplier relationships?'","Which top 1 supplier offer the most products? Show 'supplier_id', 'company_name', 'product_count'.","Top 1 supplier mana yang punya produk paling banyak? Tampilkan 'supplier_id', 'company_name', 'product_count'.","['supplier_id', 'company_name', 'product_count']"
"What are the total units sold per product? Show product_id, product_name, and total_units_sold.","SELECT p.product_id, p.product_name, SUM(od.quantity) AS total_units_sold
  FROM products p
  JOIN order_details od ON p.product_id = od.product_id
  GROUP BY p.product_id, p.product_name
  ORDER BY total_units_sold DESC;","This SQL query analyzes product sales performance by calculating total units sold for each product. It joins the 'products' and 'order_details' tables on product_id, aggregates the sum of quantities sold, and sorts results in descending order by sales volume. The output identifies best-selling products, which is crucial for inventory management and sales strategy. Key operations include a JOIN between product and order data, SUM aggregation of quantities, and ORDER BY for ranking. The query can be modified by: 1) adding date filters to analyze sales trends over time, 2) including category information to compare performance across product types, or 3) calculating revenue by incorporating unit prices. It helps answer business questions like 'What are our top-selling products?' and 'Which items should we prioritize for inventory stocking?'","How many units sold for each product? Show 'product_id', 'product_name', 'total_units_sold'.","Total unit terjual per produk? Tampilkan 'product_id', 'product_name', 'total_units_sold'.","['product_id', 'product_name', 'total_units_sold']"
Which top 1 region has the most territories? Show region_id and total_territories.,"SELECT r.region_id, COUNT(t.territory_id) AS total_territories
  FROM region r
  JOIN territories t ON r.region_id = t.region_id
  GROUP BY r.region_id
  ORDER BY total_territories DESC
  LIMIT 1;","This SQL query counts the number of territories per region by joining the 'region' and 'territories' tables on 'region_id', grouping the results by region, and ordering them by territory count in descending order and getting top 1 with LIMIT. The primary metric is the count of territories ('total_territories') for each region, providing a simple distribution analysis. No filters are applied, making it a comprehensive count across all regions. The output helps identify which regions have the most territories, useful for sales territory planning or resource allocation. Potential modifications include: (1) adding a WHERE clause to focus on specific regions or territories, (2) extending the query to calculate the percentage of total territories each region represents, or (3) joining with additional tables to incorporate demographic or performance data per region. This query could answer questions like 'Which regions have the highest territory coverage?' or 'How are territories distributed across regions?'",Which top 1 region have the most territories? Show 'region_id' and 'total_territories'.,Top 1 region mana yang punya territory paling banyak? Tampilkan 'region_id' dan 'total_territories'.,"['region_id', 'total_territories']"
"Which top 1 shipper was used the most for deliveries? Show shipper_id, company_name, and shipment_count.","SELECT s.shipper_id, s.company_name, COUNT(o.order_id) AS shipment_count
  FROM shippers s
  JOIN orders o ON s.shipper_id = o.ship_via
  GROUP BY s.shipper_id, s.company_name
  ORDER BY shipment_count DESC
  LIMIT 1;","This SQL query identifies the shipper with the highest number of shipments by joining the 'shippers' and 'orders' tables on 'shipper_id' (aliased as 'ship_via' in orders), counting orders per shipper, and returning the top result by shipment count. Key operations include a JOIN, GROUP BY on shipper details, COUNT aggregation, and ORDER BY with LIMIT to isolate the top performer. The primary metric is 'shipment_count', revealing the most utilized shipper. No filters are applied, making it a broad performance assessment. The output helps logistics teams recognize the most active shipping partner, useful for contract negotiations or service evaluations. Potential modifications include: (1) adding a date filter to analyze recent performance trends, (2) calculating market share percentages among shippers by comparing counts to total orders, or (3) joining with shipment delay data to assess whether high-volume shippers maintain quality. This query could answer questions like 'Which shipping partner handles the most orders?' or 'Is there correlation between shipment volume and delivery performance?'","Which top 1 shipping company was used the most? Show 'shipper_id', 'company_name', 'shipment_count'.","Top 1 shipper mana yang paling sering dipakai? Tampilkan 'shipper_id', 'company_name', 'shipment_count'.","['shipper_id', 'company_name', 'shipment_count']"
What is the total freight cost per country? Show ship_country and total_freight.,"SELECT ship_country, SUM(freight) AS total_freight
  FROM orders
  GROUP BY ship_country
  ORDER BY total_freight DESC;","This SQL query calculates the total freight costs by country by aggregating the 'freight' column from the 'orders' table, grouped by 'ship_country' and sorted in descending order of total freight. The primary metric is the sum of freight costs ('total_freight') per destination country, providing a clear view of shipping expenditure distribution. No filters are applied, making it a comprehensive analysis of all orders. The output helps identify high-cost shipping destinations, useful for logistics optimization and cost management. Potential modifications include: (1) adding a date filter to analyze freight cost trends over time, (2) joining with customer data to calculate freight costs per customer segment, or (3) comparing freight costs against order values to assess shipping cost ratios. This query could answer questions like 'Which countries have the highest shipping costs?' or 'How do freight expenses distribute across our shipping destinations?'",Total freight costs per country? Show 'ship_country' and 'total_freight'.,Total ongkir per negara berapa aja? Tampilkan 'ship_country' dan 'total_freight'.,"['ship_country', 'total_freight']"
"Which top 1 employee has the highest total sales amount? Show employee_id, first_name, last_name, and total_sales.","SELECT e.employee_id, e.first_name, e.last_name,
  SUM(od.unit_price * od.quantity * (1 - od.discount)) AS total_sales
  FROM employees e
  JOIN orders o ON e.employee_id = o.employee_id
  JOIN order_details od ON o.order_id = od.order_id
  GROUP BY e.employee_id, e.first_name, e.last_name
  ORDER BY total_sales DESC
  LIMIT 1;","This SQL query identifies the top-performing employee by total sales revenue by joining the 'employees', 'orders', and 'order_details' tables. It calculates net sales (unit_price × quantity × (1 - discount)) for each employee, sums these values, and returns the employee with the highest sales. Key operations include multi-table JOINs, arithmetic calculations with discount application, SUM aggregation, and ORDER BY with LIMIT to isolate the top performer. The primary metric is 'total_sales', representing the complete revenue generated per employee. No filters are applied, providing a comprehensive performance assessment. The output helps recognize top sales contributors, useful for performance evaluation and incentive planning. Potential modifications include: (1) adding a date filter to analyze sales performance for specific periods, (2) calculating average order value per employee by dividing total sales by order count, or (3) joining with customer data to analyze sales by customer segments. This query could answer questions like 'Who is our highest-grossing sales employee?' or 'How do employee sales performances compare?'","Who top 1 sold the most? Show 'employee_id', 'first_name', 'last_name', 'total_sales'.","Top 1 karyawan mana yang hasilin penjualan paling gede? Tampilkan 'employee_id', 'first_name', 'last_name', 'total_sales'.","['employee_id', 'first_name', 'last_name', 'total_sales']"
"Which top 1 product has generated the highest revenue? Show product_id, product_name, and revenue.","SELECT p.product_id, p.product_name,
  SUM(od.unit_price * od.quantity * (1 - od.discount)) AS revenue
  FROM products p
  JOIN order_details od ON p.product_id = od.product_id
  GROUP BY p.product_id, p.product_name
  ORDER BY revenue DESC
  LIMIT 1;","This SQL query identifies the highest-grossing product by calculating total revenue (unit_price × quantity × (1 - discount)) from the 'products' and 'order_details' tables, joined on product_id. It aggregates revenue by product and returns the top performer. Key operations include a table JOIN, revenue calculation incorporating discounts, SUM aggregation, and ORDER BY with LIMIT. The primary metric is 'revenue', showing each product's total sales value. No filters are applied, providing a complete product performance analysis. The output helps identify best-selling products for inventory and marketing decisions. Potential modifications include: (1) adding a date filter to analyze seasonal performance, (2) calculating profit by incorporating product cost data, or (3) grouping by product category to identify top-performing categories. This query could answer questions like 'What is our highest-revenue product?' or 'How do products rank by sales performance?'","Which top 1 product made the most money? Show 'product_id', 'product_name', 'revenue'.","Top 1 produk mana yang hasilin duit paling banyak? Tampilkan 'product_id', 'product_name', 'revenue'.","['product_id', 'product_name', 'revenue']"
"What is the average number of orders per customer? Show total_customers, total_orders, and average_orders_per_customer.","SELECT COUNT(DISTINCT c.customer_id) AS total_customers,
  COUNT(o.order_id) AS total_orders,
  CAST(COUNT(*) AS REAL) / COUNT(DISTINCT c.customer_id) AS average_orders_per_customer
  FROM customers c
  JOIN orders o ON c.customer_id = o.customer_id;","This SQL query calculates key customer engagement metrics by determining the total number of unique customers, total orders placed, and average orders per customer. It joins the 'customers' and 'orders' tables on customer_id, using COUNT(DISTINCT) for unique customers and a division of total orders by unique customers to calculate the average. The query provides foundational insights into customer purchasing behavior and order frequency. Potential modifications include: 1) adding date filters to analyze trends over specific time periods, 2) segmenting by customer demographics or regions by incorporating additional WHERE clauses, or 3) comparing these metrics across different product categories. This query helps answer business questions such as: 'What is our customer base's overall order frequency?', 'How does order volume relate to our customer count?', or 'What's the baseline for customer engagement we should aim to improve?'","On average, how many times each customer order? Show 'total_customers', 'total_orders', 'average_orders_per_customer'.","Rata-rata order per customer berapa? Tampilkan 'total_customers', 'total_orders', 'average_orders_per_customer'.","['total_customers', 'total_orders', 'average_orders_per_customer']"
"Which top 1 category has the most products? Show category_id, category_name, and product_count.","SELECT c.category_id, c.category_name, COUNT(p.product_id) AS product_count
  FROM categories c
  JOIN products p ON c.category_id = p.category_id
  GROUP BY c.category_id, c.category_name
  ORDER BY product_count DESC
  LIMIT 1;","This SQL query identifies the product category with the highest number of products by joining the 'categories' and 'products' tables on category_id. It counts products per category and returns the category with the maximum product count. Key operations include a table JOIN, COUNT aggregation, GROUP BY on category attributes, and ORDER BY with LIMIT to isolate the top category. The primary metric is 'product_count', revealing product distribution across categories. No filters are applied, providing a complete inventory analysis. The output helps identify the largest product category, useful for inventory management and category strategy. Potential modifications include: (1) adding a filter for active/discontinued products to analyze only current inventory, (2) calculating the percentage of total products each category represents, or (3) joining with sales data to compare product count against actual sales performance. This query could answer questions like 'Which category has the most products?' or 'How is our product inventory distributed across categories?'","Which top 1 category has the most products? Show 'category_id', 'category_name', 'product_count'.","Top 1 kategori mana yang punya produk paling banyak? Tampilkan 'category_id', 'category_name', 'product_count'.","['category_id', 'category_name', 'product_count']"
What is the monthly revenue in 1997? Show month and monthly_revenue.,"SELECT
  to_char(o.order_date, 'YYYY-MM') AS month,
  SUM(od.unit_price * od.quantity * (1 - od.discount)) AS monthly_revenue
FROM orders AS o
JOIN order_details AS od
  ON o.order_id = od.order_id
WHERE
  EXTRACT(YEAR FROM o.order_date) = 1997
GROUP BY
  month
ORDER BY
  month;","This SQL query analyzes monthly revenue trends for the year 1997 by calculating the sum of order values (unit price multiplied by quantity and adjusted for discount) grouped by month. It joins the 'orders' and 'order_details' tables on order_id, filters for the year 1997 using EXTRACT, and formats the output with month-year labels. The query provides valuable insights into seasonal sales patterns and revenue performance. Key modifications could include: 1) expanding the date range or comparing multiple years to identify trends, 2) adding product categories to analyze revenue by product type, or 3) incorporating customer segments to understand purchasing behavior differences. This query helps answer business questions such as: 'What were our highest and lowest revenue months in 1997?', 'How did discounts impact overall revenue patterns?', or 'What seasonal trends should we anticipate for inventory planning?'","Monthly revenue for 1997? Show 'month', 'monthly_revenue'.",Pendapatan per bulan selama 1997? Tampilkan 'month' dan 'monthly_revenue'.,"['month', 'monthly_revenue']"
What are the top 3 cities with the highest number of orders? Show city and total_orders.,"SELECT ship_city AS city, COUNT(order_id) AS total_orders
  FROM orders
  WHERE ship_city IS NOT NULL
  GROUP BY ship_city
  ORDER BY total_orders DESC
  LIMIT 3;","This SQL query identifies the top 3 cities with the highest number of orders by analyzing the 'orders' table. It counts orders per city (excluding NULL values), groups by 'ship_city', and returns the cities with the most orders in descending order. Key operations include COUNT aggregation, GROUP BY, and ORDER BY with LIMIT. The primary metric is 'total_orders', showing order volume by destination city. The WHERE clause filters out NULL values to ensure data quality. The output helps identify key markets and shipping destinations, valuable for logistics planning and regional sales analysis. Potential modifications include: (1) adding a date filter to analyze recent order trends by city, (2) joining with customer data to differentiate between business and consumer orders, or (3) calculating order value by city by incorporating order_details data. This query could answer questions like 'Which cities receive the most orders?' or 'Where should we focus our shipping infrastructure improvements?'",Top 3 cities with the most orders? Show 'city' and 'total_orders'.,3 kota dengan jumlah order terbanyak? Tampilkan 'city' dan 'total_orders'.,"['city', 'total_orders']"
"Which top customer has bought the most different products? Show 'customer_id', 'company_name', and 'distinct_product_count', and return only the top 1 based on the number of distinct products purchased.","SELECT
  c.customer_id,
  c.company_name,
  COUNT(DISTINCT od.product_id) AS distinct_product_count
FROM
  customers c
JOIN orders o ON c.customer_id = o.customer_id
JOIN order_details od ON o.order_id = od.order_id
GROUP BY
  c.customer_id, c.company_name
ORDER BY
  distinct_product_count DESC
LIMIT 1;","This SQL query identifies the customer who has purchased the widest variety of distinct products by counting unique product IDs per customer. It joins the 'customers', 'orders', and 'order_details' tables through customer_id and order_id relationships, then groups results by customer to calculate their distinct product count. The query highlights customer engagement diversity by revealing which company explores the most products in your catalog. Key modifications could include: 1) adding date filters to analyze purchasing patterns during specific periods, 2) setting a minimum order threshold to focus on active customers, or 3) comparing product diversity across customer segments or regions. This query helps answer business questions such as: 'Which customers are most adventurous in trying our product range?', 'Does product diversity correlate with customer loyalty or lifetime value?', or 'Which customer segments might benefit from cross-selling opportunities?'","Who’s the top customer that bought the most different products? Show their customer_id, company_name, and how many unique products they’ve purchased as distinct_product_count. Just return the top one based on that count.","Top 1 customer mana yang membeli produk paling beragam? Tampilkan 'customer_id', 'company_name', dan 'distinct_product_count', dan ambil satu customer teratas berdasarkan jumlah produk berbeda yang dibeli.","['customer_id', 'company_name', 'distinct_product_count']"
"Which top 5 suppliers ship the highest average priced products? Show supplier_id, company_name, and average_price.","SELECT s.supplier_id, s.company_name, AVG(p.unit_price) AS average_price
FROM suppliers s
JOIN products p ON s.supplier_id = p.supplier_id
GROUP BY s.supplier_id, s.company_name
ORDER BY average_price DESC
LIMIT 5;","This SQL query identifies the top 5 suppliers with the highest average product prices by joining the 'suppliers' and 'products' tables. It calculates the average unit price per supplier and sorts suppliers by this average in descending order. Key operations include a table JOIN, AVG aggregation, and ORDER BY with LIMIT to focus on the top performers. The primary metric 'average_price' reveals pricing strategies across suppliers. No filters are applied, providing a comprehensive supplier price analysis. The output helps procurement teams identify premium suppliers and assess pricing strategies, valuable for cost management and supplier negotiations. Potential modifications include: (1) adding product category filters to analyze prices within specific categories, (2) comparing average prices against product quality ratings, or (3) calculating price ranges (min/max) per supplier to understand pricing consistency. This query could answer questions like 'Which suppliers provide the most expensive products on average?' or 'How do supplier pricing strategies compare?'","Which top 5 suppliers ship the priciest stuff on average? Show 'supplier_id', 'company_name', 'average_price'.","Top 5 supplier mana yang ngirim produk paling mahal rata-rata? Tampilkan 'supplier_id', 'company_name', 'average_price'.","['supplier_id', 'company_name', 'average_price']"
What is the average discount given per order? Show order_id and average_discount. Order by order id,"SELECT order_id, AVG(discount) AS average_discount
FROM order_details
GROUP BY order_id
ORDER BY order_id;","This SQL query identifies the top 10 orders with the highest average discount rates by analyzing the 'order_details' table. It calculates the average discount per order and sorts orders by discount magnitude in descending order. Key operations include AVG aggregation, GROUP BY on order_id, and ORDER BY with LIMIT by order_id. The primary metric 'average_discount' reveals discounting patterns at the order level. No filters are applied, providing a complete view of discount practices. The output helps identify orders with unusually high discounts, valuable for pricing strategy analysis and discount policy evaluation. Potential modifications include: (1) joining with customer data to analyze discount patterns by customer segment, (2) adding product category information to see if certain product types receive higher discounts, or (3) comparing discount rates against order sizes to identify volume discount patterns. This query could answer questions like 'Which orders received the deepest discounts?' or 'What is our typical discount range per order?'",What’s the average discount per order? Show 'order_id' and 'average_discount'. Order by id,Rata-rata diskon per order berapa? Tampilkan 'order_id' dan 'average_discount'. Urutkan berdasarkan id,"['order_id', 'average_discount']"
"Which top 5 employees are assigned to territories in the most different regions? Show their employee_id, first_name, last_name, and the number of distinct regions as region_count.","SELECT e.employee_id, e.first_name, e.last_name, COUNT(DISTINCT t.region_id) AS region_count
  FROM employees e
  JOIN employee_territories et ON e.employee_id = et.employee_id
  JOIN territories t ON et.territory_id = t.territory_id
  GROUP BY e.employee_id, e.first_name, e.last_name
  ORDER BY region_count DESC
  LIMIT 5;","This SQL query identifies the top 5 employees with the broadest regional coverage by counting the distinct regions they service through their assigned territories. It joins the 'employees', 'employee_territories', and 'territories' tables via employee_id and territory_id relationships, then groups by employee to calculate their unique region count. The query helps assess workforce geographic distribution and identifies employees with diverse regional experience. Key modifications could include: 1) adding performance metrics to analyze if broader coverage correlates with sales success, 2) filtering by time period to track regional expansion patterns, or 3) comparing region counts across departments or job titles. This query helps answer business questions such as: 'Which employees have the most geographically diverse responsibilities?', 'How does regional coverage relate to employee performance metrics?', or 'Are certain regions underrepresented in our workforce distribution?'","Who are the top 5 employees working across the most different regions based on their assigned territories? Show 'employee_id', 'first_name', 'last_name', and 'region_count'.","Siapa 5 karyawan teratas yang menangani wilayah kerja (territory) dari jumlah region yang paling banyak? Tampilkan 'employee_id', 'first_name', 'last_name', dan 'region_count'.","['employee_id', 'first_name', 'last_name', 'region_count']"
"Which customers have ordered more than 10,000 units in total? Show customer_id, company_name, and total_units_ordered.","SELECT c.customer_id, c.company_name, SUM(od.quantity) AS total_units_ordered
  FROM customers c
  JOIN orders o ON c.customer_id = o.customer_id
  JOIN order_details od ON o.order_id = od.order_id
  GROUP BY c.customer_id, c.company_name
  HAVING SUM(od.quantity) > 10000
  ORDER BY total_units_ordered DESC;","This SQL query identifies high-volume customers by calculating total units ordered per customer, filtering for those who purchased over 10,000 units. It joins the 'customers', 'orders', and 'order_details' tables to connect customer information with order quantities. The query aggregates quantity data using SUM, applies a HAVING filter to focus on bulk purchasers, and sorts results by total units in descending order. Key operations include multi-table JOINs, SUM aggregation, HAVING for post-aggregation filtering, and ORDER BY. The primary metric 'total_units_ordered' highlights purchasing volume, with the HAVING clause isolating significant customers. The output helps identify key accounts for relationship management and sales strategy. Potential modifications include: (1) adding product category filters to analyze purchasing patterns by product type, (2) incorporating date ranges to identify seasonal bulk purchasers, or (3) calculating average order size alongside total volume. This query could answer questions like 'Which customers purchase the largest quantities?' or 'Who are our most important volume customers?'","Which customers ordered over 10,000 units? Show 'customer_id', 'company_name', 'total_units_ordered'.","Customer siapa saja yang total order-nya lebih dari 10.000 unit? Tampilkan 'customer_id', 'company_name', 'total_units_ordered'.","['customer_id', 'company_name', 'total_units_ordered']"
Which year had the highest total order revenue? Show year and total_revenue.,"SELECT EXTRACT(YEAR FROM o.order_date) AS year,
  SUM(od.unit_price * od.quantity * (1 - od.discount)) AS total_revenue
  FROM orders o
  JOIN order_details od ON o.order_id = od.order_id
  GROUP BY year
  ORDER BY total_revenue DESC
  LIMIT 1;","This SQL query identifies the highest-grossing year by calculating total revenue (unit_price × quantity × (1 - discount)) from the 'orders' and 'order_details' tables. It extracts the year from order dates, sums the revenue by year, and returns the year with maximum sales. Key operations include EXTRACT for year isolation, revenue calculation incorporating discounts, SUM aggregation, and ORDER BY with LIMIT. The primary metric 'total_revenue' shows annual sales performance. No additional filters are applied, providing a complete historical analysis. The output pinpoints the company's peak sales year, valuable for business performance evaluation and trend analysis. Potential modifications include: (1) breaking down results by quarter within the top year, (2) comparing revenue against marketing spend by joining budget data, or (3) analyzing product category contributions to the peak year's success. This query could answer questions like 'What was our most profitable year?' or 'How has our annual revenue performance trended over time?'",Which year made the most revenue? Show 'year' and 'total_revenue'.,Tahun mana yang pendapatannya paling tinggi? Tampilkan 'year' dan 'total_revenue'.,"['year', 'total_revenue']"
"Which product category has the highest average price? Show category_id, category_name, and average_price.","SELECT c.category_id, c.category_name, AVG(p.unit_price) AS average_price
FROM categories c
JOIN products p ON c.category_id = p.category_id
GROUP BY c.category_id, c.category_name
ORDER BY average_price DESC
LIMIT 1;","This SQL query identifies the product category with the highest average unit price by joining the 'categories' and 'products' tables. It calculates the average price per category and returns the category with the maximum average price. Key operations include a table JOIN, AVG aggregation, and ORDER BY with LIMIT to isolate the top category. The primary metric 'average_price' reveals pricing differences across product categories. No filters are applied, providing a comprehensive category price analysis. The output helps identify premium product categories, useful for pricing strategy and product positioning. Potential modifications include: (1) adding a filter for discontinued products to focus only on current offerings, (2) comparing average prices against sales volume to identify price elasticity, or (3) calculating price ranges (min/max) per category to understand pricing consistency. This query could answer questions like 'Which product category commands the highest average price?' or 'How do our product categories compare in terms of pricing?'","Which product category has the highest average price? Show 'category_id', 'category_name', 'average_price'.","Top 1 kategori produk mana yang harga rata-ratanya paling tinggi? Tampilkan 'category_id', 'category_name', 'average_price'.","['category_id', 'category_name', 'average_price']"
"Which top 1 employee manages the most other employees? Show employee_id, first_name, last_name, and report_count.","SELECT e.employee_id, e.first_name, e.last_name, COUNT(e2.employee_id) AS report_count
  FROM employees e
  JOIN employees e2 ON e.employee_id = e2.reports_to
  GROUP BY e.employee_id, e.first_name, e.last_name
  ORDER BY report_count DESC
  LIMIT 1;","This SQL query identifies the employee with the most direct reports by performing a self-join on the 'employees' table. It counts how many employees report to each manager (where e.employee_id = e2.reports_to), groups by manager attributes, and returns the manager with the highest count. Key operations include a self-JOIN, COUNT aggregation, GROUP BY on employee details, and ORDER BY with LIMIT to isolate the top manager. The primary metric 'report_count' reveals organizational structure and management spans. No filters are applied, providing a complete view of reporting relationships. The output helps identify key managerial roles with the widest spans of control, useful for organizational analysis and leadership development. Potential modifications include: (1) adding hierarchical level tracking to analyze multi-level reporting structures, (2) comparing report counts against team performance metrics, or (3) filtering by department to identify management density in specific areas. This query could answer questions like 'Who has the largest team in our organization?' or 'How are reporting responsibilities distributed among managers?'","Which top 1 employee manages the most subordinates? Show 'employee_id', 'first_name', 'last_name', 'report_count'.","Top 1 karyawan mana yang punya bawahan paling banyak? Tampilkan 'employee_id', 'first_name', 'last_name', 'report_count'.","['employee_id', 'first_name', 'last_name', 'report_count']"
"Which products are currently out of stock? Show product_id, product_name, and units_in_stock.","SELECT product_id, product_name, units_in_stock
  FROM products
  WHERE units_in_stock = 0;","This SQL query identifies out-of-stock products by selecting records from the 'products' table where units_in_stock equals 0. It returns the product_id, product_name, and units_in_stock for these items. The query uses a simple WHERE filter to isolate products with zero inventory. The output provides a clear list of products needing restocking, which is critical for inventory management and supply chain operations. Potential modifications include: (1) adding product category information to identify which categories have the most out-of-stock items, (2) including supplier details to facilitate reordering, or (3) filtering for products that are both out-of-stock and currently on promotion. This query could answer questions like 'Which products need immediate restocking?' or 'Are there particular product categories that frequently run out of stock?'","Which products are out of stock now? Show 'product_id', 'product_name', 'units_in_stock'.","Produk apa aja yang lagi kosong stoknya? Tampilkan 'product_id', 'product_name', 'units_in_stock'.","['product_id', 'product_name', 'units_in_stock']"
Which top 1 country has the most suppliers? Show country and supplier_count.,"SELECT country, COUNT(*) AS supplier_count
  FROM suppliers
  GROUP BY country
  ORDER BY supplier_count DESC
  LIMIT 1;","This SQL query identifies the country with the highest number of suppliers by counting and grouping supplier records by country from the 'suppliers' table. It returns the top country based on supplier count in descending order. Key operations include COUNT aggregation, GROUP BY on country, and ORDER BY with LIMIT to isolate the top result. The primary metric 'supplier_count' reveals geographic concentration of suppliers. No filters are applied, providing a complete view of supplier distribution. The output helps identify primary sourcing locations, valuable for supply chain optimization and risk assessment. Potential modifications include: (1) adding a region filter to analyze supplier distribution within specific areas, (2) comparing supplier count against purchase volume by country, or (3) calculating the percentage of total suppliers each country represents. This query could answer questions like 'Which country hosts most of our suppliers?' or 'How geographically diverse is our supplier base?'",Which top 1 country has the most suppliers? Show 'country' and 'supplier_count'.,Top 1 negara mana yang punya supplier paling banyak? Tampilkan 'country' dan 'supplier_count'.,"['country', 'supplier_count']"
Which top 3 cities have the highest number of customers? Show city and customer_count.,"SELECT city, COUNT(*) AS customer_count
  FROM customers
  WHERE city IS NOT NULL
  GROUP BY city
  ORDER BY customer_count DESC
  LIMIT 3;","This SQL query identifies the top 3 cities with the highest concentration of customers by counting customers per city in the 'customers' table. It filters out null city values, groups results by city, and returns the most populous customer locations. The output helps businesses understand their strongest local markets for targeted marketing and resource allocation. Key operations include COUNT aggregation, GROUP BY for city-level grouping, and ORDER BY with LIMIT to focus on top results. The query can be modified to: 1) include regional breakdowns for broader geographic analysis, 2) add customer value metrics to identify high-value locations, or 3) filter by customer activity to distinguish between active and inactive customer bases. It helps answer business questions like 'Where are our customer bases concentrated?' and 'Which local markets should we prioritize for expansion?'",Which top 3 cities have the most customers? Show 'city' and 'customer_count'.,Top 3 kota mana yang punya customer paling banyak? Tampilkan 'city' dan 'customer_count'.,"['city', 'customer_count']"
"What is the total number of discontinued products by category? Show category_id, category_name, and discontinued_count.","SELECT c.category_id, c.category_name, COUNT(p.product_id) AS discontinued_count
  FROM categories c
  JOIN products p ON c.category_id = p.category_id
  WHERE p.discontinued = 1
  GROUP BY c.category_id, c.category_name
  ORDER BY discontinued_count DESC;","This SQL query analyzes product discontinuation patterns by category by counting discontinued products in each category. It joins the 'categories' and 'products' tables, filters for discontinued products (discontinued = 1), and groups the results by category to show which categories have the most discontinued items. The output helps identify problematic product categories and informs inventory management decisions. Key operations include a table JOIN, COUNT aggregation with GROUP BY, and filtering on the discontinued flag. The query can be modified to: 1) include date discontinued to analyze trends over time, 2) add supplier information to identify problematic suppliers, or 3) calculate the percentage of discontinued products per category. It helps answer business questions like 'Which product categories have the highest discontinuation rates?' and 'Should we reconsider our offerings in certain categories?'","How many discontinued products are in each category? Show 'category_id', 'category_name', 'discontinued_count'.","Jumlah produk discontinue per kategori gimana? Tampilkan 'category_id', 'category_name', 'discontinued_count'.","['category_id', 'category_name', 'discontinued_count']"
Which customers have not placed any orders? Show customer_id and company_name.,"SELECT c.customer_id, c.company_name
  FROM customers c
  LEFT JOIN orders o ON c.customer_id = o.customer_id
  WHERE o.order_id IS NULL;","This SQL query identifies customers who have never placed an order by performing a LEFT JOIN between the 'customers' and 'orders' tables and filtering for NULL order IDs. The output provides a list of inactive customers, which is valuable for customer retention and marketing efforts. Key operations include a LEFT JOIN to preserve all customers and IS NULL check to identify non-ordering customers. The query can be modified to: 1) include customer registration dates to analyze how long they've been inactive, 2) add demographic data to identify patterns among non-ordering customers, or 3) join with contact history to evaluate engagement attempts. It helps answer business questions like 'Which customers have never made a purchase?' and 'How can we better engage our inactive customer base?'",Which customers never ordered anything? Show 'customer_id' and 'company_name'.,Customer mana yang belum pernah order sama sekali? Tampilkan 'customer_id' dan 'company_name'.,"['customer_id', 'company_name']"
"Which top 1 shipper has the highest average freight cost per order? Show shipper_id, company_name, and avg_freight.","SELECT s.shipper_id, s.company_name, AVG(o.freight) AS avg_freight
FROM shippers s
JOIN orders o ON s.shipper_id = o.ship_via
GROUP BY s.shipper_id, s.company_name
ORDER BY avg_freight DESC
LIMIT 1;","This SQL query identifies the shipper with the highest average freight costs by analyzing order data. It joins the 'shippers' and 'orders' tables, calculates the average freight cost per shipper, and returns the shipper with the highest average. The output helps evaluate shipping costs and negotiate better rates with carriers. Key operations include a table JOIN, AVG aggregation, and ORDER BY with LIMIT to identify the top result. The query can be modified to: 1) include date ranges to analyze cost trends over time, 2) add order volume metrics to assess cost-effectiveness, or 3) compare freight costs by destination regions. It helps answer business questions like 'Which shipping provider is the most expensive on average?' and 'How can we optimize our shipping costs?'","Which top 1 shipper has the highest average freight cost? Show 'shipper_id', 'company_name', 'avg_freight'.","Top 1 shipper mana yang ongkir rata-ratanya paling mahal? Tampilkan 'shipper_id', 'company_name', 'avg_freight'.","['shipper_id', 'company_name', 'avg_freight']"
"Find the names of employees who have handled at least 10 orders, along with the total number of orders they processed. Show first_name, last_name, and total_orders_handled.","SELECT e.first_name, e.last_name, COUNT(o.order_id) AS total_orders_handled
FROM employees e
JOIN orders o ON e.employee_id = o.employee_id
GROUP BY e.employee_id, e.first_name, e.last_name
HAVING COUNT(o.order_id) >= 10;","This SQL query identifies high-performing employees by counting the number of orders each employee has handled, filtering for those with 10 or more orders. It joins the 'employees' and 'orders' tables, groups the results by employee, and applies a HAVING clause to focus on productive staff members. The output helps recognize top performers and evaluate workforce productivity. Key operations include a table JOIN, COUNT aggregation, and HAVING for post-aggregation filtering. The query can be modified to: 1) add date ranges to analyze recent performance, 2) include order value metrics to assess revenue impact, or 3) join with customer data to evaluate customer retention rates. It helps answer business questions like 'Who are our most productive employees?' and 'What is the order handling capacity of our staff?'","Who handled at least 10 orders? Show 'first_name', 'last_name', 'total_orders_handled'.","Karyawan siapa saja yang udah ngurus minimal 10 order? Tampilkan 'first_name', 'last_name', 'total_orders_handled'.","['first_name', 'last_name', 'total_orders_handled']"
"Show the total amount of orders for each year/month. Show order_year, order_month, and no_of_orders.","SELECT
  EXTRACT(YEAR FROM order_date) AS order_year,
  EXTRACT(MONTH FROM order_date) AS order_month,
  COUNT(*) AS no_of_orders
FROM orders
GROUP BY order_year, order_month;","This SQL query analyzes monthly order trends by counting the number of orders per month across years. It extracts year and month components from the order_date in the 'orders' table, then groups and counts orders by these time periods. The output provides valuable insights into seasonal sales patterns and business growth trends. Key operations include EXTRACT for date part isolation, COUNT aggregation, and multi-column GROUP BY. The query can be modified to: 1) add revenue calculations to analyze monetary trends, 2) filter by product categories to identify seasonal items, or 3) compare year-over-year growth by adding percentage change calculations. It helps answer critical business questions like 'What are our busiest months?' and 'How is our order volume changing over time?'","Total orders per year and month? Show 'order_year', 'order_month', 'no_of_orders'.","Jumlah order per tahun dan bulan berapa aja? Tampilkan 'order_year', 'order_month', 'no_of_orders'.","['order_year', 'order_month', 'no_of_orders']"
Show the total number of customers in each region. Show region and total_customers.,"SELECT c.region, COUNT(c.customer_id) AS total_customers
FROM customers c
GROUP BY c.region
","This SQL query analyzes customer distribution by region by counting the number of customers in each region from the 'customers' table. It groups the results by region and calculates the total customers per region, providing insights into geographic customer concentration. The output is valuable for regional sales strategy and resource allocation decisions. Key operations include COUNT aggregation and GROUP BY for regional grouping. The query can be modified to: 1) add percentage calculations to show each region's share of total customers, 2) include customer activity metrics to differentiate between active and inactive customers by region, or 3) join with order data to correlate customer count with sales volume. It helps answer business questions like 'Where is our customer base concentrated geographically?' and 'Which regions should we target for expansion?'",How many customers are there per region? Show 'region' and 'total_customers'.,Jumlah customer per region berapa? Tampilkan 'region' dan 'total_customers'.,"['region', 'total_customers']"
List the product names and their suppliers for products that have never been ordered. Show product_name and supplier_name.,"SELECT p.product_name, s.company_name AS supplier_name
FROM products p
JOIN suppliers s ON p.supplier_id = s.supplier_id
WHERE p.product_id NOT IN (SELECT DISTINCT product_id FROM order_details);
","This SQL query identifies products that have never been ordered by comparing the products table against order records. It joins the 'products' and 'suppliers' tables to display product-supplier relationships, then uses a NOT IN subquery against the 'order_details' table to find products with no sales history. The output helps inventory management by highlighting potentially obsolete or poorly marketed items. Key operations include a LEFT JOIN between products and suppliers, and a NOT IN subquery to filter out products that appear in orders. The query can be modified to: 1) include product categories to analyze patterns among unsold items, 2) add date filters to find products not sold within specific periods, or 3) calculate inventory holding costs for these products. It helps answer critical business questions like 'Which products are failing to attract customers?' and 'Should we discontinue certain items from our catalog?'",List products that were never ordered and their suppliers. Show 'product_name' and 'supplier_name'.,Produk yang belum pernah diorder dan suppliernya apa aja? Tampilkan 'product_name' dan 'supplier_name'.,"['product_name', 'supplier_name']"
Show the total number of employees per region along with the region description. Show region_description and total_employees.,"SELECT r.region_description, COUNT(e.employee_id) AS total_employees
FROM region r
JOIN territories t ON r.region_id = t.region_id
JOIN employee_territories et ON t.territory_id = et.territory_id
JOIN employees e ON et.employee_id = e.employee_id
GROUP BY r.region_description
ORDER BY total_employees DESC;
","This SQL query analyzes employee distribution across regions by counting the number of employees assigned to each region. It joins the 'region', 'territories', 'employee_territories', and 'employees' tables to track employee assignments through territories to regions. The output shows which regions have the most employee coverage, valuable for workforce planning and regional management. Key operations include multi-table JOINs to connect regions to employees via territories, COUNT aggregation, and GROUP BY for regional grouping. The query can be modified to: 1) include employee roles to analyze specialization by region, 2) add performance metrics to assess regional productivity, or 3) filter by date ranges to track staffing changes over time. It helps answer business questions like 'How are our employees distributed geographically?' and 'Which regions have the strongest workforce presence?'",How many employees are there in each region? Show 'region_description' and 'total_employees'.,Jumlah karyawan per region berapa? Tampilkan 'region_description' dan 'total_employees'.,"['region_description', 'total_employees']"
Find the employees who have never handled any orders and display their first name and last name. Show first_name and last_name.,"SELECT first_name, last_name
FROM employees
WHERE employee_id NOT IN (SELECT DISTINCT employee_id FROM orders);
","This SQL query identifies employees who haven't processed any orders by comparing the employees table against order records. It uses the 'employees' table with a subquery against the 'orders' table to find employees with no order assignments. The output helps HR and management identify underutilized staff or potential training needs. Key operations include a NOT IN clause with a subquery to find non-matching records. The query can be modified to: 1) include hire dates to analyze if non-participation correlates with tenure, 2) add department information to spot departmental patterns, or 3) join with other activity tables to check for non-sales contributions. It helps answer important questions like 'Which employees aren't engaged in order processing?' and 'Are there staffing imbalances in our order workflow?'",Which employees never handled any orders? Show 'first_name' and 'last_name'.,Siapa aja karyawan yang belum pernah ngurus order? Tampilkan 'first_name' dan 'last_name'.,"['first_name', 'last_name']"
"Show the product name and the reorder level of all products with units in stock that are below their reorder level. Show product_name, units_in_stock, and reorder_level.","SELECT product_name, units_in_stock, reorder_level
FROM products
WHERE units_in_stock < reorder_level;
","This SQL query identifies products that need reordering by comparing current stock levels to reorder thresholds. It queries the 'products' table to find items where 'units_in_stock' falls below the 'reorder_level', helping maintain optimal inventory levels. The output provides a prioritized list for procurement actions, crucial for inventory management and supply chain operations. Key operations include a simple table scan with a WHERE filter comparing two numeric columns. The query can be modified to: 1) include supplier information to facilitate reordering, 2) add product categories to analyze stock issues by category, or 3) calculate how far below reorder level each product is to prioritize urgent orders. It helps answer critical business questions like 'Which products need immediate restocking?' and 'Are our reorder levels set appropriately across product lines?'","Which products are below reorder level in stock? Show 'product_name', 'units_in_stock', 'reorder_level'.","Produk apa aja yang stoknya udah di bawah level reorder? Tampilkan 'product_name', 'units_in_stock', 'reorder_level'.","['product_name', 'units_in_stock', 'reorder_level']"
"Find the employees who manage territories in more than one region and show their names along with the number of regions they manage. Show first_name, last_name, and total_regions.","SELECT e.first_name, e.last_name, COUNT(DISTINCT r.region_id) AS total_regions
FROM employees e
JOIN employee_territories et ON e.employee_id = et.employee_id
JOIN territories t ON et.territory_id = t.territory_id
JOIN region r ON t.region_id = r.region_id
GROUP BY e.employee_id, e.first_name, e.last_name
HAVING COUNT(DISTINCT r.region_id) > 1
ORDER BY total_regions DESC;
","This SQL query identifies employees who work across multiple regions by analyzing territory assignments. It joins the 'employees', 'employee_territories', 'territories', and 'region' tables to count distinct regions per employee, filtering for those covering more than one region. The output helps evaluate workforce flexibility and cross-regional expertise, which is valuable for resource allocation and team structuring. Key operations include multi-table JOINs, COUNT(DISTINCT) for unique region counting, and HAVING for filtering multi-region employees. The query can be modified to: 1) include performance metrics to assess effectiveness across regions, 2) add date ranges to analyze regional coverage trends, or 3) incorporate customer data to evaluate multi-region customer support. It helps answer business questions like 'Which employees have the most diverse regional experience?' and 'How effectively are we utilizing cross-regional staff?'","Which employees are assigned to territories that belong to more than one region? Show 'first_name', 'last_name', and the number of unique regions as 'total_regions'.","Karyawan siapa saja yang ngurus territory di lebih dari 1 region? Tampilkan 'first_name', 'last_name', 'total_regions'.","['first_name', 'last_name', 'total_regions']"
"Retrieve the orders that were shipped later than the required date. Show order_id, customer_name, and the number of days they were delayed as delay_in_days.","SELECT o.order_id, c.company_name AS customer_name, (o.shipped_date - o.required_date) AS delay_in_days
FROM orders o
JOIN customers c ON o.customer_id = c.customer_id
WHERE o.shipped_date > o.required_date;","This SQL query analyzes order fulfillment delays by calculating the difference between shipped and required dates for overdue orders. It joins the 'orders' and 'customers' tables to identify delayed shipments and computes the delay duration in days. The output helps evaluate supply chain performance and customer service issues by highlighting the most significantly delayed orders. Key operations include date arithmetic to calculate delays, a JOIN to connect orders with customers, and a WHERE filter to focus only on late shipments. The query can be modified to: 1) group delays by customer to identify problematic accounts, 2) include product categories to analyze delay patterns by product type, or 3) add order value to assess the financial impact of delays. It helps answer critical business questions like 'Which orders experienced the worst shipping delays?' and 'How does our fulfillment performance impact customer satisfaction?'","Which orders were shipped late? Show 'order_id', 'customer_name', and 'delay_in_days'.","Order mana saja yang dikirim lebih lambat dari tanggal yang diminta? Tampilkan 'order_id', 'customer_name', dan 'delay_in_days' (jumlah hari keterlambatan).","['order_id', 'customer_name', 'delay_in_days']"
"Find the product that have been ordered the least, showing the product name and total quantity ordered. Show product_name and total_quantity_ordered.","SELECT p.product_name, COALESCE(SUM(od.quantity), 0) AS total_quantity_ordered
FROM products p
LEFT JOIN order_details od ON p.product_id = od.product_id
GROUP BY p.product_name
ORDER BY total_quantity_ordered ASC
LIMIT 1;
","This SQL query identifies the product with the lowest sales volume by counting total quantities ordered for each product. It uses a LEFT JOIN between the 'products' and 'order_details' tables to ensure all products are included (even those never ordered), calculates the sum of quantities ordered, and returns the single worst-performing product. The output helps identify underperforming inventory that may need promotional support or discontinuation. Key operations include a LEFT JOIN to preserve all products, COALESCE to handle null values, SUM aggregation, and ORDER BY with LIMIT to isolate the bottom result. The query can be modified to: 1) show bottom N products instead of just one, 2) add date filters to analyze recent performance trends, or 3) include product categories to identify weak product lines. It helps answer business questions like 'Which product sells the least?' and 'What inventory should we review for potential discontinuation?'",Which product got ordered the least? Show 'product_name' and 'total_quantity_ordered'.,Produk yang paling jarang diorder apa? Tampilkan 'product_name' dan 'total_quantity_ordered'.,"['product_name', 'total_quantity_ordered']"
Find the total number of customers per country and display the results in descending order. Show country and total_customers.,"SELECT country, COUNT(customer_id) AS total_customers
FROM customers
GROUP BY country
ORDER BY total_customers DESC;
","This SQL query analyzes customer distribution by country by counting the number of customers in each country from the 'customers' table. It groups the results by country and sorts them in descending order by customer count, providing a clear view of geographic customer concentration. The output is valuable for market analysis, helping identify strong and weak markets for business strategy and resource allocation. Key operations include COUNT aggregation and GROUP BY for country-level grouping. The query can be modified to: 1) add percentage calculations to show each country's share of total customers, 2) include customer activity metrics to differentiate between active and inactive customers by country, or 3) join with order data to correlate customer count with sales volume. It helps answer important business questions like 'Where is our customer base concentrated geographically?' and 'Which markets should we target for expansion?'","Customers per country, most to least? Show 'country' and 'total_customers'.","Jumlah customer per negara, dari yang paling banyak ke dikit? Tampilkan 'country' dan 'total_customers'.","['country', 'total_customers']"
"Retrieve the top 1 customer who placed the most expensive single order and show their name along with the total order value. Show customer_name, order_id, and order_value.","SELECT c.contact_name AS customer_name, o.order_id, 
       SUM(od.unit_price * od.quantity * (1 - od.discount)) AS order_value
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
JOIN order_details od ON o.order_id = od.order_id
GROUP BY c.customer_id, c.contact_name, o.order_id
ORDER BY order_value DESC
LIMIT 1;
","This SQL query identifies the highest-value order in the database by calculating the total discounted value of each order. It joins the 'customers', 'orders', and 'order_details' tables to compute the sum of (unit_price × quantity × (1 - discount)) for each order, then returns the single most valuable order. The output helps identify premium customers and high-value transactions for VIP treatment and sales strategy. Key operations include multi-table JOINs, SUM aggregation with discount calculation, and ORDER BY with LIMIT to isolate the top result. The query can be modified to: 1) show top N orders instead of just one, 2) add date filters to find highest-value orders in specific periods, or 3) include product categories to analyze what drives high-value orders. It helps answer business questions like 'What was our most valuable single order?' and 'Which customers make the largest purchases?'","Who top 1 placed the most expensive order? Show 'customer_name', 'order_id', 'order_value'.","Top 1 customer mana yang pernah bikin order paling mahal? Tampilkan 'customer_name', 'order_id', 'order_value'.","['customer_name', 'order_id', 'order_value']"
"List the top 3 employees who serve the most unique customers. Show first_name, last_name, and unique_customers.","SELECT e.first_name, e.last_name, COUNT(DISTINCT o.customer_id) AS unique_customers
FROM employees e
JOIN orders o ON e.employee_id = o.employee_id
GROUP BY e.employee_id, e.first_name, e.last_name
ORDER BY unique_customers DESC
LIMIT 3;","This SQL query identifies the top 3 employees with the most unique customers by joining the 'employees' and 'orders' tables. It counts distinct customer IDs per employee, groups by employee details, and sorts to highlight those with the broadest customer reach. The output helps evaluate sales team performance in customer acquisition and relationship diversity. Key operations include a table JOIN, COUNT(DISTINCT) for unique customer counting, and LIMIT to focus on top performers. The query can be modified to: 1) add date ranges to analyze customer acquisition trends, 2) include order value metrics to assess customer quality, or 3) filter by customer region to evaluate geographic coverage. It helps answer business questions like 'Which employees manage the most diverse customer portfolios?' and 'Who are our most effective customer relationship builders?'","Top 3 employees with the most distinct customers? Show 'first_name', 'last_name', 'unique_customers'.","Top 3 karyawan yang handle customer unik paling banyak? Tampilkan 'first_name', 'last_name', 'unique_customers'.","['first_name', 'last_name', 'unique_customers']"
Find top 1 popular category of products based on total quantity ordered. Show category_name and total_quantity.,"SELECT c.category_name, SUM(od.quantity) AS total_quantity
FROM order_details od
JOIN products p ON od.product_id = p.product_id
JOIN categories c ON p.category_id = c.category_id
GROUP BY c.category_name
ORDER BY total_quantity DESC
LIMIT 1;
","This SQL query identifies the best-selling product category by total quantity sold. It joins the 'order_details', 'products', and 'categories' tables to calculate the sum of quantities sold per category, then returns only the top-performing category. The output helps businesses understand which product categories drive the most volume, informing inventory and marketing strategies. Key operations include multi-table JOINs, SUM aggregation, and LIMIT to focus on the top result. The query can be modified to: 1) show top N categories instead of just one, 2) add date filters to analyze seasonal trends, or 3) include revenue calculations by incorporating unit prices. It helps answer business questions like 'Which product category sells the most units?' and 'Where should we focus our inventory investments?'",Top 1 popular category by quantity ordered? Show 'category_name' and 'total_quantity'.,Top 1 kategori produk paling populer berdasarkan jumlah order? Tampilkan 'category_name' dan 'total_quantity'.,"['category_name', 'total_quantity']"
Show the name of every customer (not company) and how many different employees have handled their orders. Show customer_name and employee_count.,"SELECT c.contact_name AS customer_name, COUNT(DISTINCT o.employee_id) AS employee_count
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id, c.contact_name
ORDER BY employee_count DESC;","This SQL query analyzes customer-employee relationships by counting how many distinct employees have handled orders for each customer. It joins the 'customers' and 'orders' tables, groups by customer, and counts the unique employee IDs associated with each customer's orders. The output reveals which customers interact with the most employees, potentially indicating complex accounts or varied purchasing patterns. Key operations include a table JOIN, COUNT(DISTINCT) to identify unique relationships, and ORDER BY to highlight customers with the most employee interactions. The query can be modified to: 1) add time filters to analyze relationship changes over time, 2) include order volume to assess if multiple handlers correlate with order frequency, or 3) join with employee data to identify specific sales teams involved. It helps answer questions like 'Which customers require the most employee attention?' and 'How specialized are our customer relationships?'","Show customers (not company) and how many employees they’ve dealt with. Show 'customer_name', 'employee_count'.",Tampilkan nama customer (bukan nama perusahaan) dan berapa banyak karyawan berbeda yang pernah menangani pesanan mereka. Tampilkan 'customer_name' dan 'employee_count'.,"['customer_name', 'employee_count']"
Show the total number of orders per shipping country. Show ship_country and total_orders.,"SELECT ship_country, COUNT(order_id) AS total_orders
FROM orders
GROUP BY ship_country
ORDER BY total_orders DESC;
","This SQL query analyzes order distribution by country by counting the number of orders shipped to each destination country. It aggregates data from the 'orders' table, groups results by ship_country, and sorts countries by order volume in descending order. The output provides valuable geographic sales insights, helping businesses understand their strongest international markets. Key operations include COUNT aggregation, GROUP BY for country-level grouping, and ORDER BY for ranking. The query can be modified to: 1) add date filters to analyze shipping trends over time, 2) include order value calculations to assess revenue by country, or 3) join with customer data to evaluate local vs. international sales. It helps answer business questions like 'Which countries receive the most orders?' and 'Where should we focus international marketing efforts?'",Total orders per country shipped to? Show 'ship_country' and 'total_orders'.,Jumlah order per negara tujuan pengiriman berapa aja? Tampilkan 'ship_country' dan 'total_orders'.,"['ship_country', 'total_orders']"
"Get the number of orders handled per shipper per year. Show shipper_name, order_year, and order_count.","SELECT s.company_name AS shipper_name,
       EXTRACT(YEAR FROM o.order_date) AS order_year,
       COUNT(o.order_id) AS order_count
FROM orders o
JOIN shippers s ON o.ship_via = s.shipper_id
GROUP BY s.company_name, order_year
ORDER BY shipper_name, order_year;","This SQL query analyzes shipping company performance by counting the number of orders handled per shipper per year. It joins the 'orders' and 'shippers' tables, extracts the year from order dates, and groups the results by shipper and year. The output provides valuable insights into shipping partner utilization and yearly trends, helping businesses evaluate carrier performance and make logistics decisions. Key operations include a table JOIN, EXTRACT for year isolation, COUNT aggregation, and multi-column GROUP BY. The query can be modified to: 1) add order value metrics to assess shipping cost efficiency, 2) include month-level granularity for seasonal analysis, or 3) filter by shipping region to evaluate geographic performance. It helps answer business questions like 'Which shippers handle the most volume?' and 'How has shipper usage changed year-over-year?'","How many orders per shipper per year? Show 'shipper_name', 'order_year', 'order_count'.","Jumlah order per shipper per tahun berapa aja? Tampilkan 'shipper_name', 'order_year', 'order_count'.","['shipper_name', 'order_year', 'order_count']"
"For each customer, show how many different products they have ordered more than once across multiple orders. Display the customer as customer_name and the number of repeated products as repeated_products.","SELECT c.contact_name AS customer_name, COUNT(DISTINCT od.product_id) AS repeated_products
FROM Customers c
JOIN Orders o ON c.customer_id = o.customer_id
JOIN Order_Details od ON o.order_id = od.order_id
GROUP BY c.customer_id, customer_name
HAVING COUNT(*) > 1;","This SQL query identifies customers who repeatedly purchase the same products by counting distinct product IDs per customer and filtering for those with multiple orders. It joins the 'Customers', 'Orders', and 'Order_Details' tables through customer_id and order_id relationships, grouping by customer to find product repetition patterns. The query helps identify customer loyalty and potential product stickiness. Key modifications could include: 1) adding product categories to analyze which types of products are most frequently repurchased, 2) incorporating time intervals between repeat purchases to understand repurchase cycles, or 3) comparing repeat purchase behavior across different customer segments. This query helps answer business questions such as: 'Which products have the highest customer retention rates?', 'Which customers are most loyal to specific products?', or 'How does repeat purchasing behavior vary by product category?'",How many different products has each customer bought more than once? Show customer_name and the number of repeated products as repeated_products.,Berapa banyak produk berbeda yang pernah dibeli lebih dari satu kali oleh setiap customer? Tampilkan customer sebagai customer_name dan jumlah produk yang diulang sebagai repeated_products.,"['customer_name', 'repeated_products']"