Question,Answer,Summary,Alternative Prompt 1 (English),Alternative Prompt 2 (Bahasa Indonesia),Expected Result
"Which faculty has the most research projects? If there is a tie, show any of the tying faculty. Show the nama and total_proyek.","SELECT f.nama, COUNT(p.id_proyek) AS total_proyek
  FROM Fakultas f
  JOIN ProyekPenelitian p ON f.id_fakultas = p.id_fakultas
  GROUP BY f.nama
  ORDER BY total_proyek DESC
  LIMIT 1;","This SQL query identifies the faculty with the highest number of research projects by joining the 'Fakultas' (Faculty) and 'ProyekPenelitian' (Research Projects) tables. It counts projects per faculty and returns the faculty with the most projects, highlighting research activity distribution across faculties. The output helps academic institutions understand research productivity and allocate resources effectively. Key operations include a table JOIN, COUNT aggregation, and ORDER BY with LIMIT to identify the top faculty. The query can be modified to: 1) include time periods to analyze research trends, 2) add funding amounts to assess financial impact, or 3) filter by project status to focus on active research. It helps answer questions like 'Which faculty leads in research output?' and 'How should research funding be allocated across faculties?'",Can you tell me which faculty did the most research projects? I just need their name (nama) and the number of projects (total_proyek).,Fakultas mana yang paling banyak bikin proyek penelitian? Tampilkan nama (nama) dan jumlah proyeknya (total_proyek).,"['nama', 'total_proyek']"
"Which lecturer supervises the most students? If there is a tie, show any of the tying lecturer. Show nama and total_mahasiswa_dibimbing.","SELECT d.nama, COUNT(m.id_mahasiswa) AS total_mahasiswa_dibimbing
  FROM Dosen d
  JOIN Mahasiswa m ON d.id_dosen = m.id_pembimbing
  GROUP BY d.nama
  ORDER BY total_mahasiswa_dibimbing DESC
  LIMIT 1;","This SQL query identifies the lecturer supervising the most students by joining the 'Dosen' (Lecturers) and 'Mahasiswa' (Students) tables. It counts the number of students supervised by each lecturer and returns the lecturer with the highest count, providing insights into academic advising workloads. The output helps academic institutions balance advising responsibilities and recognize faculty contributions. Key operations include a table JOIN, COUNT aggregation, and ORDER BY with LIMIT to identify the top lecturer. The query can be modified to: 1) include student academic performance metrics to assess advising effectiveness, 2) filter by student year to analyze advising distribution across classes, or 3) add department information to understand advising patterns across disciplines. It helps answer questions like 'Which lecturer has the heaviest advising load?' and 'How should advising responsibilities be distributed among faculty?'",Iâ€™m curious which lecturer guides the most students. Please show their name (nama) and how many students they supervise (total_mahasiswa_dibimbing).,Dosen mana yang ngebimbing mahasiswa paling banyak? Aku butuh namanya (nama) dan total mahasiswa bimbingannya (total_mahasiswa_dibimbing).,"['nama', 'total_mahasiswa_dibimbing']"
"Which student has attended the most sessions? If there is a tie, show any of the student. Show nama and total_kehadiran.","SELECT m.nama, COUNT(k.id_kehadiran) AS total_kehadiran
  FROM Mahasiswa m
  JOIN CatatanKehadiran k ON m.id_mahasiswa = k.id_mahasiswa
  GROUP BY m.nama
  ORDER BY total_kehadiran DESC
  LIMIT 1;","This SQL query identifies the student with the highest attendance record by joining the 'Mahasiswa' (Students) and 'CatatanKehadiran' (Attendance Records) tables. It counts attendance records per student and returns the student with the most attendances, highlighting exemplary attendance behavior. The output helps academic institutions recognize students with perfect attendance and monitor class participation. Key operations include a table JOIN, COUNT aggregation, and ORDER BY with LIMIT to identify the top student. The query can be modified to: 1) filter by date range to analyze attendance patterns during specific periods, 2) include course information to identify attendance by subject, or 3) calculate attendance percentages rather than absolute counts. It helps answer questions like 'Which student has the best attendance record?' and 'How can we improve overall class attendance rates?'",Which student joined the most sessions? I want to see their name (nama) and how many sessions they attended (total_kehadiran).,Mahasiswa mana yang paling rajin ikut sesi kelas? Kasih liat nama (nama) dan jumlah kehadirannya (total_kehadiran).,"['nama', 'total_kehadiran']"
"What are the top 5 courses with the highest number of enrolled students? If there is a tie, show only top 5 with any of the tying courses. Show judul and total_mahasiswa.","SELECT mk.judul, COUNT(e.id_mahasiswa) AS total_mahasiswa
  FROM MataKuliah mk
  JOIN Sesi s ON mk.id_mk = s.id_mk
  JOIN EnrolmenKelas e ON s.id_sesi = e.id_sesi
  GROUP BY mk.judul
  ORDER BY total_mahasiswa DESC
  LIMIT 5;","This SQL query identifies the top 5 most popular courses by counting student enrollments across class sessions. It joins the 'MataKuliah' (Courses), 'Sesi' (Class Sessions), and 'EnrolmenKelas' (Class Enrollments) tables to track student registration in each course. The output helps academic institutions understand course demand and allocate teaching resources effectively. Key operations include multi-table JOINs, COUNT aggregation, and ORDER BY with LIMIT to highlight the most enrolled courses. The query can be modified to: 1) filter by semester to analyze enrollment trends over time, 2) include instructor information to assess teaching popularity, or 3) calculate enrollment percentages relative to class capacity. It helps answer questions like 'Which courses are in highest demand?' and 'How should we allocate classroom resources?'",What are the top 5 most popular courses? Show me the course title (judul) and how many students joined (total_mahasiswa).,Top 5 matkul yang paling banyak diambil siapa aja ya? Tampilkan judul matkulnya (judul) dan jumlah mahasiswa (total_mahasiswa).,"['judul', 'total_mahasiswa']"
"Which faculty uses the most facilities? If there is a tie, show any of the tying faculty. Show nama and total_fasilitas.","SELECT f.nama, COUNT(ff.id_fasilitas) AS total_fasilitas
  FROM Fakultas f
  JOIN FasilitasFakultas ff ON f.id_fakultas = ff.id_fakultas
  GROUP BY f.nama
  ORDER BY total_fasilitas DESC 
  LIMIT 1;","This SQL query identifies the faculty with the highest number of associated facilities by joining the 'Fakultas' and 'FasilitasFakultas' tables on 'id_fakultas', counting the number of facilities per faculty (via COUNT on 'id_fasilitas'), grouping by faculty name, and returning only the top result using ORDER BY and LIMIT. The output includes the faculty name and its corresponding total facility count, useful for assessing resource concentration or allocation across faculties. Analysts could modify this query to return the top N faculties by adjusting or removing the LIMIT clause, or to include additional faculty metadata (e.g., faculty head or location) by joining with other related tables. The query could support questions like 'Which faculty manages the most physical assets?' or 'Are facilities distributed evenly across faculties?'.",Which faculty uses the most facilities? I need the faculty name (nama) and the number of facilities used (total_fasilitas).,Fakultas mana yang paling banyak pake fasilitas? Aku mau liat nama (nama) dan jumlah fasilitasnya (total_fasilitas).,"['nama', 'total_fasilitas']"
"Which course has the highest average exam score? If there is a tie, show any of the tying courses. Show judul and rata_rata_nilai.","SELECT mk.judul, AVG(h.nilai_diperoleh) AS rata_rata_nilai
  FROM MataKuliah mk
  JOIN Ujian u ON mk.id_mk = u.id_mk
  JOIN HasilUjian h ON u.id_ujian = h.id_ujian
  GROUP BY mk.judul
  ORDER BY rata_rata_nilai DESC
  LIMIT 1;","This SQL query identifies the course with the highest average exam scores by joining the 'MataKuliah' (Courses), 'Ujian' (Exams), and 'HasilUjian' (Exam Results) tables. It calculates the average exam score for each course and returns the course with the highest average, providing insight into academic performance across different subjects. The output helps educators identify teaching strengths and potentially recognize effective instructional methods. Key operations include multi-table JOINs, AVG aggregation, and ORDER BY with LIMIT to highlight the top-performing course. The query can be modified to: 1) filter by semester to analyze performance trends over time, 2) include instructor information to assess teaching effectiveness, or 3) compare with enrollment numbers to examine the relationship between class size and performance. It helps answer questions like 'Which course has the highest student achievement?' and 'What teaching methods contribute to better exam results?'",Which course has the best average exam score? Show me the title (judul) and the average score (rata_rata_nilai).,Matkul mana yang nilai ujiannya paling tinggi rata-ratanya? Kasih tau judul (judul) dan nilai rata-rata (rata_rata_nilai).,"['judul', 'rata_rata_nilai']"
"Which lecturer has authored the most publications? If there is a tie, show any of the tying lecturer. Show nama and total_publikasi.","SELECT d.nama, COUNT(p.id_publikasi) AS total_publikasi
  FROM Dosen d
  JOIN PenulisPublikasi pp ON d.id_dosen = pp.id_dosen
  JOIN Publikasi p ON pp.id_publikasi = p.id_publikasi
  GROUP BY d.nama
  ORDER BY total_publikasi DESC
  LIMIT 1;","This SQL query identifies the most published faculty member by counting publications per lecturer across the 'Dosen' (Lecturers), 'PenulisPublikasi' (Publication Authors), and 'Publikasi' (Publications) tables. It returns the lecturer with the highest publication count, highlighting research productivity. The output helps academic institutions recognize research excellence and inform promotion decisions. Key operations include multi-table JOINs, COUNT aggregation, and ORDER BY with LIMIT to identify the top researcher. The query can be modified to: 1) filter by publication year to analyze recent productivity, 2) include publication impact metrics, or 3) group by department to compare research output across disciplines. It helps answer questions like 'Who is our most published faculty member?' and 'How should we allocate research resources?'",Who is the lecturer with the most publications? Just show their name (nama) and how many theyâ€™ve authored (total_publikasi).,Dosen mana yang paling banyak nulis publikasi? Tunjukin namanya (nama) dan total publikasinya (total_publikasi).,"['nama', 'total_publikasi']"
"Which student has participated in the most research projects? If there is a tie, show any of the tying student. Show nama and total_partisipasi.","SELECT m.nama, COUNT(pp.id_proyek) AS total_partisipasi
  FROM Mahasiswa m
  JOIN PartisipasiPenelitian pp ON m.id_mahasiswa = pp.id_mahasiswa
  GROUP BY m.nama
  ORDER BY total_partisipasi DESC
  LIMIT 1;","This SQL query identifies the student with the highest research participation by counting research projects per student across the 'Mahasiswa' (Students) and 'PartisipasiPenelitian' (Research Participation) tables. It returns the student involved in the most research projects, highlighting undergraduate research engagement. The output helps academic institutions recognize research-active students and assess undergraduate research opportunities. Key operations include a table JOIN, COUNT aggregation, and ORDER BY with LIMIT to identify the top participant. The query can be modified to: 1) filter by project type to analyze participation in specific research areas, 2) include project outcomes to assess student research impact, or 3) group by academic year to track participation trends. It helps answer questions like 'Which student is most engaged in research?' and 'How can we increase undergraduate research opportunities?'",Which student has joined the most research projects? I need their name (nama) and the total number (total_partisipasi).,Mahasiswa mana yang paling sering ikut proyek penelitian? Tunjukin namanya (nama) dan jumlah partisipasinya (total_partisipasi).,"['nama', 'total_partisipasi']"
"Which student has borrowed the most books? If there is a tie, show any of the tying student. Show id_peminjam and total_peminjaman.","SELECT id_peminjam, COUNT(*) AS total_peminjaman
  FROM PeminjamanBuku
  GROUP BY id_peminjam
  ORDER BY total_peminjaman DESC
  LIMIT 1;","This SQL query identifies the most active library user by counting book loans per borrower from the 'PeminjamanBuku' (Book Loans) table. It returns the borrower with the highest number of book loans, highlighting library engagement. The output helps libraries recognize frequent users and assess collection utilization. Key operations include COUNT aggregation and ORDER BY with LIMIT to identify the top borrower. The query can be modified to: 1) include loan dates to analyze borrowing patterns over time, 2) join with book data to identify popular genres, or 3) filter by loan status to focus on current checkouts. It helps answer questions like 'Who is our most engaged library user?' and 'How can we encourage more library usage?'",Whoâ€™s borrowed the most books among students? Please show the ID (id_peminjam) and total borrow count (total_peminjaman).,Mahasiswa mana yang paling sering minjem buku? Aku mau ID-nya (id_peminjam) dan total pinjamannya (total_peminjaman).,"['id_peminjam', 'total_peminjaman']"
"Which club has the most active members? If there is a tie, show any of the tying club. Show nama and total_anggota.","SELECT k.nama, COUNT(kk.id_mahasiswa) AS total_anggota
  FROM OrganisasiKlub k
  JOIN KeanggotaanKlub kk ON k.id_klub = kk.id_klub
  GROUP BY k.nama
  ORDER BY total_anggota DESC
  LIMIT 1;","This SQL query identifies the most popular student club by counting members per club across the 'OrganisasiKlub' (Club Organizations) and 'KeanggotaanKlub' (Club Memberships) tables. It returns the club with the highest membership count, providing insight into student engagement in extracurricular activities. The output helps student affairs offices understand club popularity and allocate resources accordingly. Key operations include a table JOIN, COUNT aggregation, and ORDER BY with LIMIT to identify the top club. The query can be modified to: 1) include member demographics to analyze participation patterns, 2) filter by academic year to track club popularity trends, or 3) join with event data to assess club activity levels. It helps answer questions like 'Which student club has the most members?' and 'How can we support student engagement in extracurriculars?'",Which club has the most members? Show the name (nama) and total members (total_anggota).,Klub mana yang anggotanya paling banyak? Kasih tau nama klubnya (nama) dan jumlah anggota (total_anggota).,"['nama', 'total_anggota']"
"Which student has the highest total score from all exams combined? If there is a tie, show any of the tying student. Show id_mahasiswa, nama, and total_score.","SELECT h.id_mahasiswa, m.nama, SUM(h.nilai_diperoleh) AS total_score
  FROM HasilUjian h
  JOIN Mahasiswa m ON h.id_mahasiswa = m.id_mahasiswa
  GROUP BY h.id_mahasiswa, m.nama
  ORDER BY total_score DESC
  LIMIT 1;","This SQL query identifies the top-performing student by calculating total exam scores across all tests. It joins the 'HasilUjian' (Exam Results) and 'Mahasiswa' (Students) tables, sums all exam scores per student, and returns the student with the highest cumulative score. The output helps academic institutions recognize academic excellence and identify high-achieving students. Key operations include a table JOIN, SUM aggregation, and ORDER BY with LIMIT to highlight the top performer. The query can be modified to: 1) filter by semester to analyze performance trends, 2) include course information to identify subject strengths, or 3) calculate average scores rather than totals for fairer comparison. It helps answer questions like 'Who is our highest-achieving student?' and 'What patterns exist among top performers?'","Which student has the highest exam score total? I want to see id_mahasiswa, nama, and total_score.","Mahasiswa mana yang total nilainya dari semua ujian paling tinggi? Aku mau id_mahasiswa, nama, dan total_score.","['id_mahasiswa', 'nama', 'total_score']"
"List all faculties along with their total number of research projects, total publications, and number of lecturers involved in either. Show nama, total_proyek, total_publikasi, total_dosen_aktif.","SELECT f.nama,
  COUNT(DISTINCT p.id_proyek) AS total_proyek,
  COUNT(DISTINCT pb.id_publikasi) AS total_publikasi,
  COUNT(DISTINCT d.id_dosen) AS total_dosen_aktif
  FROM Fakultas f
  LEFT JOIN ProyekPenelitian p ON f.id_fakultas = p.id_fakultas
  LEFT JOIN Publikasi pb ON f.id_fakultas = pb.id_fakultas
  LEFT JOIN Dosen d ON d.id_fakultas = f.id_fakultas
  WHERE d.id_dosen IN (
  SELECT id_dosen FROM PenulisPublikasi
  UNION
  SELECT id_dosen FROM ProyekPenelitian
  )
  GROUP BY f.nama;","This SQL query provides a comprehensive research activity overview by faculty by analyzing three key metrics: research projects, publications, and active faculty members. It joins the 'Fakultas' (Faculties) table with 'ProyekPenelitian' (Research Projects), 'Publikasi' (Publications), and 'Dosen' (Faculty) tables using LEFT JOINs to ensure all faculties are included. The query specifically counts distinct projects, publications, and faculty members who are actively involved in either publishing or research projects. The output helps academic administrators assess research productivity across different faculties and allocate resources effectively. Key operations include multiple LEFT JOINs, COUNT(DISTINCT) aggregations, and a subquery with UNION to identify active faculty. The query can be modified to: 1) add time filters to analyze research trends, 2) include funding amounts to assess financial impact, or 3) calculate ratios like publications per faculty. It helps answer strategic questions like 'Which faculties are most research-productive?' and 'How should research funding be distributed?'","Can you list all faculties and show how many research projects, publications, and active lecturers each has? Show nama, total_proyek, total_publikasi, total_dosen_aktif.","Tolong tampilin semua fakultas beserta total proyek, publikasi, dan dosen aktifnya. Kolom: nama, total_proyek, total_publikasi, total_dosen_aktif.","['nama', 'total_proyek', 'total_publikasi', 'total_dosen_aktif']"
"Which lecturer has taught the most distinct subjects (MataKuliah) across all sessions? If there is a tie, show any of the tying lecturer. Show id_dosen, nama, and total_mk_diajar.","SELECT d.id_dosen, d.nama, COUNT(DISTINCT mk.id_mk) AS total_mk_diajar
  FROM Dosen d
  JOIN Sesi s ON d.id_dosen = s.id_pengajar
  JOIN MataKuliah mk ON mk.id_mk = s.id_mk
  GROUP BY d.id_dosen, d.nama
  ORDER BY total_mk_diajar DESC
  LIMIT 1;","This SQL query identifies the faculty member teaching the most distinct courses by analyzing teaching assignments across the 'Dosen' (Faculty), 'Sesi' (Sessions), and 'MataKuliah' (Courses) tables. It counts the unique courses each faculty member teaches and returns the one with the highest count, highlighting teaching breadth. The output helps academic administrators assess faculty teaching loads and course coverage. Key operations include multi-table JOINs, COUNT(DISTINCT) to avoid duplicate course counting, and ORDER BY with LIMIT to identify the top faculty. The query can be modified to: 1) filter by semester to analyze teaching patterns over time, 2) include enrollment numbers to assess teaching impact, or 3) add course level information to examine teaching distribution across undergraduate/graduate courses. It helps answer questions like 'Which faculty member has the broadest teaching responsibilities?' and 'How should teaching assignments be distributed?'","Which lecturer has taught the most different subjects? Show me their id_dosen, nama, and how many subjects (total_mk_diajar).","Dosen mana yang pernah ngajar mata kuliah paling banyak? Kasih id_dosen, nama, dan jumlah matkul (total_mk_diajar).","['id_dosen', 'nama', 'total_mk_diajar']"
"Find the top 3 students who have the highest total participation score (nilai_partisipasi) across all enrolled sessions. If there is a tie, show any of the valid top 3 student. Show id_mahasiswa, nama, and total_partisipasi.","SELECT m.id_mahasiswa, m.nama, SUM(e.nilai_partisipasi) AS total_partisipasi
  FROM EnrolmenKelas e
  JOIN Mahasiswa m ON m.id_mahasiswa = e.id_mahasiswa
  GROUP BY m.id_mahasiswa, m.nama
  ORDER BY total_partisipasi DESC
  LIMIT 3;","This SQL query identifies the top 3 most engaged students by calculating their total participation scores across all enrolled classes. It joins the 'Mahasiswa' (Students) and 'EnrolmenKelas' (Class Enrollments) tables, sums the participation scores for each student, and returns the students with the highest cumulative participation. The output helps educators recognize students who actively contribute in class and can be used to assess classroom engagement patterns. Key operations include a table JOIN, SUM aggregation of participation scores, and ORDER BY with LIMIT to highlight the top participants. The query can be modified to: 1) filter by semester to analyze engagement trends over time, 2) include course information to identify which classes generate the most participation, or 3) calculate average participation rather than totals for fairer comparison across different course loads. It helps answer questions like 'Which students are most engaged in class?' and 'How can we encourage greater classroom participation?'","Who are the top 3 students with the best total participation scores? I want id_mahasiswa, nama, and total_partisipasi.","Tolong tunjukin 3 mahasiswa dengan nilai partisipasi tertinggi. Kolom: id_mahasiswa, nama, total_partisipasi.","['id_mahasiswa', 'nama', 'total_partisipasi']"
"Which students have participated in more than 2 research projects and are also club members? Show id_mahasiswa, nama, total_proyek, total_klub.","SELECT m.id_mahasiswa, m.nama,
  COUNT(DISTINCT pp.id_proyek) AS total_proyek,
  COUNT(DISTINCT kk.id_klub) AS total_klub
  FROM Mahasiswa m
  JOIN PartisipasiPenelitian pp ON m.id_mahasiswa = pp.id_mahasiswa
  JOIN KeanggotaanKlub kk ON m.id_mahasiswa = kk.id_mahasiswa
  GROUP BY m.id_mahasiswa, m.nama
  HAVING COUNT(DISTINCT pp.id_proyek) > 2;","This SQL query identifies highly engaged students who participate in multiple research projects while also being involved in student clubs. It joins the 'Mahasiswa' (Students) table with both 'PartisipasiPenelitian' (Research Participation) and 'KeanggotaanKlub' (Club Membership) tables to count each student's research projects and club memberships. The HAVING clause filters for students involved in more than 2 research projects, highlighting those with exceptional extracurricular engagement. The output helps student affairs offices recognize well-rounded students and assess campus engagement opportunities. Key operations include multiple JOINs, COUNT(DISTINCT) to avoid duplicate counting, and HAVING for post-aggregation filtering. The query can be modified to: 1) include academic performance metrics to analyze engagement-impact correlations, 2) filter by year to track engagement trends, or 3) add club/research categories to identify popular activity types. It helps answer questions like 'Which students balance research and extracurriculars effectively?' and 'How can we support student involvement in multiple areas?'","Which students joined more than 2 projects and are in a club? Show id_mahasiswa, nama, total_proyek, and total_klub.","Siapa aja mahasiswa yang ikut lebih dari 2 proyek dan juga aktif di klub? Tampilkan id_mahasiswa, nama, total_proyek, total_klub.","['id_mahasiswa', 'nama', 'total_proyek', 'total_klub']"
"What are the top 5 facilities by average access level (tingkat_akses) across all faculties?  If there is a tie, show any of the valid top 5 facilities. Show id_fasilitas, nama, and avg_akses.","SELECT f.id_fasilitas, f.nama, AVG(ff.tingkat_akses) AS avg_akses
  FROM Fasilitas f
  JOIN FasilitasFakultas ff ON f.id_fasilitas = ff.id_fasilitas
  GROUP BY f.id_fasilitas, f.nama
  ORDER BY avg_akses DESC
  LIMIT 5;","This SQL query analyzes facility access levels across faculties to identify the most utilized campus facilities. It joins the 'Fasilitas' (Facilities) and 'FasilitasFakultas' (Faculty Facilities) tables, calculates the average access level for each facility, and returns the top 5 most accessed facilities. The output helps campus administrators understand facility utilization patterns and make informed decisions about resource allocation and maintenance priorities. Key operations include a table JOIN, AVG aggregation of access levels, and ORDER BY with LIMIT to highlight the most accessed facilities. The query can be modified to: 1) include time periods to analyze seasonal usage patterns, 2) join with faculty data to identify discipline-specific facility needs, or 3) add capacity metrics to assess utilization rates. It helps answer questions like 'Which campus facilities are in highest demand?' and 'How should we prioritize facility upgrades and maintenance?'","What are the top 5 facilities with the highest average access? Show id_fasilitas, nama, and avg_akses.","Fasilitas apa aja yang rata-rata tingkat aksesnya paling tinggi? Aku mau id_fasilitas, nama, avg_akses.","['id_fasilitas', 'nama', 'avg_akses']"
"Find the lecturers who have both supervised students and authored publications, and show how many of each. Show id_dosen, nama, total_mahasiswa_bimbingan, total_publikasi.","SELECT d.id_dosen, d.nama,
  COUNT(DISTINCT m.id_mahasiswa) AS total_mahasiswa_bimbingan,
  COUNT(DISTINCT pp.id_publikasi) AS total_publikasi
  FROM Dosen d
  LEFT JOIN Mahasiswa m ON d.id_dosen = m.id_pembimbing
  LEFT JOIN PenulisPublikasi pp ON d.id_dosen = pp.id_dosen
  WHERE m.id_mahasiswa IS NOT NULL AND pp.id_publikasi IS NOT NULL
  GROUP BY d.id_dosen, d.nama;","This SQL query evaluates faculty performance by analyzing two key metrics: student advising and research publications. It joins the 'Dosen' (Faculty) table with 'Mahasiswa' (Students) and 'PenulisPublikasi' (Publication Authors) tables to count both the number of students advised and publications authored by each faculty member. The WHERE clause ensures only faculty with both advising and publication activities are included. The output provides a comprehensive view of faculty contributions to both student development and research productivity. Key operations include LEFT JOINs to preserve all faculty records, COUNT(DISTINCT) to avoid duplicate counting, and filtering for faculty active in both areas. The query can be modified to: 1) add time periods to track performance trends, 2) include department information for cross-department comparisons, or 3) calculate ratios like publications per advisee. It helps answer questions like 'Which faculty excel in both advising and research?' and 'How should we balance teaching and research expectations?'","Find me lecturers who both supervise students and publish papers. Show id_dosen, nama, total_mahasiswa_bimbingan, total_publikasi.","Dosen mana yang bimbing mahasiswa sekaligus bikin publikasi? Tampilkan id_dosen, nama, total_mahasiswa_bimbingan, total_publikasi.","['id_dosen', 'nama', 'total_mahasiswa_bimbingan', 'total_publikasi']"
"Which students have both borrowed books and attended at least 10 different sessions? Show id_mahasiswa, nama, total_buku_dipinjam, total_sesi.","SELECT m.id_mahasiswa, m.nama,
  COUNT(DISTINCT pb.id_peminjaman) AS total_buku_dipinjam,
  COUNT(DISTINCT ck.id_sesi) AS total_sesi
  FROM Mahasiswa m
  LEFT JOIN PeminjamanBuku pb ON m.id_mahasiswa = pb.id_peminjam
  LEFT JOIN CatatanKehadiran ck ON m.id_mahasiswa = ck.id_mahasiswa
  GROUP BY m.id_mahasiswa, m.nama
  HAVING COUNT(DISTINCT ck.id_sesi) >= 10 AND COUNT(DISTINCT pb.id_peminjaman) > 0;","This SQL query identifies academically engaged students by analyzing both library usage and class attendance patterns. It joins the 'Mahasiswa' (Students) table with 'PeminjamanBuku' (Book Loans) and 'CatatanKehadiran' (Attendance Records) tables to count each student's book loans and class sessions attended. The HAVING clause filters for students who have attended at least 10 sessions and borrowed at least one book, highlighting those with strong academic engagement. The output helps academic advisors identify well-rounded students and assess campus resource utilization. Key operations include LEFT JOINs to preserve all student records, COUNT(DISTINCT) to avoid duplicate counting, and HAVING for post-aggregation filtering. The query can be modified to: 1) include time periods to analyze engagement trends, 2) add academic performance metrics to correlate engagement with outcomes, or 3) filter by book subject areas to identify reading patterns. It helps answer questions like 'Which students demonstrate balanced academic engagement?' and 'How do library usage patterns relate to class participation?'","Which students both borrow books and attend 10+ sessions? Show id_mahasiswa, nama, total_buku_dipinjam, total_sesi.","Mahasiswa mana aja yang suka minjem buku dan hadir di lebih dari 10 sesi? Tampilkan id_mahasiswa, nama, total_buku_dipinjam, total_sesi.","['id_mahasiswa', 'nama', 'total_buku_dipinjam', 'total_sesi']"
"List all courses that have at least one session and at least one exam, and calculate the average final grade (nilai_akhir) and exam score (nilai_diperoleh). Show id_mk, judul, avg_nilai_akhir, avg_nilai_ujian.","SELECT mk.id_mk, mk.judul,
  AVG(n.nilai_akhir) AS avg_nilai_akhir,
  AVG(h.nilai_diperoleh) AS avg_nilai_ujian
  FROM MataKuliah mk
  JOIN Nilai n ON mk.id_mk = n.id_mk
  JOIN Ujian u ON mk.id_mk = u.id_mk
  JOIN HasilUjian h ON u.id_ujian = h.id_ujian AND n.id_mahasiswa = h.id_mahasiswa
  GROUP BY mk.id_mk, mk.judul
  HAVING COUNT(DISTINCT u.id_ujian) > 0;","This SQL query calculates the average final grades ('avg_nilai_akhir') and average exam scores ('avg_nilai_ujian') for each course by joining the 'MataKuliah' (Courses), 'Nilai' (Grades), 'Ujian' (Exams), and 'HasilUjian' (ExamResults) tables on relevant keys. It groups results by course ID and title, filtering for courses with at least one exam. The output provides insights into course performance metrics, useful for academic assessment and curriculum planning. Key modifications could include: 1) Adding a filter for specific semesters by joining with a 'Semester' table, 2) Comparing performance across departments by incorporating faculty/department data, or 3) Calculating pass/fail rates by adding conditional logic to the averages. This query could help answer questions like: 'Which courses have the highest average scores?', 'How do final grades correlate with exam performance?', or 'Which courses might need curriculum review based on performance metrics?'","List all courses with both a session and an exam, and show the average grade and exam score. Show id_mk, judul, avg_nilai_akhir, avg_nilai_ujian.","Matkul apa yang punya sesi & ujian? Tampilkan nilai akhir rata-rata dan nilai ujian rata-rata. Kolom: id_mk, judul, avg_nilai_akhir, avg_nilai_ujian.","['id_mk', 'judul', 'avg_nilai_akhir', 'avg_nilai_ujian']"
"Show all faculties in the descending order of the amount of distinct majors of students under that faculty. Show id_fakultas, nama, and total_jurusan_klub.","SELECT f.id_fakultas, f.nama, COUNT(DISTINCT j.id_jurusan) AS total_jurusan_klub
  FROM Fakultas f
  JOIN Mahasiswa m ON f.id_fakultas = m.id_fakultas
  JOIN Jurusan j ON j.id_jurusan = m.id_jurusan
  JOIN KeanggotaanKlub kk ON m.id_mahasiswa = kk.id_mahasiswa
  GROUP BY f.id_fakultas, f.nama
  ORDER BY total_jurusan_klub DESC;","This SQL query identifies faculties ('Fakultas') with the most diverse department ('Jurusan') representation in student clubs by counting distinct departments per faculty whose students are club members. It joins the 'Fakultas', 'Mahasiswa' (Students), 'Jurusan' (Departments), and 'KeanggotaanKlub' (ClubMemberships) tables, grouping results by faculty ID and name, then ordering by the count of unique departments in descending order. The output helps assess faculty engagement across academic departments in extracurricular activities. Key modifications could include: 1) Filtering for specific club types by joining with a 'Klub' table, 2) Adding student participation rates by including COUNT(DISTINCT m.id_mahasiswa), or 3) Comparing academic performance of participating students by joining with grade data. This query could answer questions like: 'Which faculties have the broadest departmental participation in clubs?', 'Are certain departments underrepresented in extracurriculars?', or 'How does club participation vary across faculties?'","Which faculties have clubs joined by students from different majors? I want id_fakultas, nama, and total_jurusan_klub.","Fakultas mana yang klubnya diisi mahasiswa dari banyak jurusan? Tampilkan id_fakultas, nama, total_jurusan_klub.","['id_fakultas', 'nama', 'total_jurusan_klub']"
"Which faculty head (id_kepala) also teaches at least one course? Show id_kepala, nama_dosen, and jumlah_mk_diajar.","SELECT f.id_kepala, d.nama AS nama_dosen, COUNT(mk.id_mk) AS jumlah_mk_diajar
  FROM Fakultas f
  JOIN Dosen d ON f.id_kepala = d.id_dosen
  JOIN MataKuliah mk ON mk.id_pengajar = d.id_dosen
  GROUP BY f.id_kepala, d.nama
  HAVING COUNT(mk.id_mk) > 0;","This SQL query identifies faculty heads ('id_kepala') who are also teaching courses by counting the number of courses each faculty head teaches. It joins the 'Fakultas' (Faculties), 'Dosen' (Lecturers), and 'MataKuliah' (Courses) tables, grouping results by faculty head ID and lecturer name, and filtering for those teaching at least one course. The output helps assess faculty heads' teaching workloads and their direct involvement in academic instruction. Key modifications could include: 1) Adding semester filters by joining with a 'Semester' table to analyze teaching patterns over time, 2) Comparing teaching loads between faculty heads and regular lecturers by including all lecturers in the initial join, or 3) Incorporating course level or type to analyze if faculty heads focus on specific course categories. This query could answer questions like: 'How many faculty heads maintain active teaching roles?', 'What is the average teaching load for faculty heads compared to other lecturers?', or 'Are faculty heads concentrated in teaching certain types of courses?'","Which faculty head also teaches? Show id_kepala, nama_dosen, and jumlah_mk_diajar.","Kepala fakultas mana yang juga ngajar? Tampilkan id_kepala, nama_dosen, dan jumlah matkul yang diajarkan.","['id_kepala', 'nama_dosen', 'jumlah_mk_diajar']"
"List students who have received grades (nilai_akhir) for all courses they have attended. Show id_mahasiswa, nama, and jumlah_mk.","SELECT m.id_mahasiswa, m.nama, COUNT(DISTINCT n.id_mk) AS jumlah_mk
  FROM Mahasiswa m
  JOIN Nilai n ON m.id_mahasiswa = n.id_mahasiswa
  JOIN EnrolmenKelas e ON m.id_mahasiswa = e.id_mahasiswa
  JOIN Sesi s ON e.id_sesi = s.id_sesi
  GROUP BY m.id_mahasiswa, m.nama
  HAVING COUNT(DISTINCT n.id_mk) = (
  SELECT COUNT(DISTINCT s2.id_mk)
  FROM EnrolmenKelas e2
  JOIN Sesi s2 ON s2.id_sesi = e2.id_sesi
  WHERE e2.id_mahasiswa = m.id_mahasiswa
  );","This SQL query identifies students who have completed all enrolled courses by comparing their course enrollment records with their grade records. It joins the 'Mahasiswa' (Students), 'Nilai' (Grades), 'EnrolmenKelas' (Class Enrollment), and 'Sesi' (Sessions) tables to match enrolled courses with completed courses (those with grades). The HAVING clause uses a correlated subquery to verify that the count of courses with grades equals the count of enrolled courses. The output helps academic advisors track student progress and completion rates. Key operations include multiple JOINs, COUNT(DISTINCT) to avoid duplicate counting, and a correlated subquery for precise matching. The query can be modified to: 1) filter by semester to analyze completion trends, 2) include grade thresholds to identify students passing all courses, or 3) add program requirements to track degree progress. It helps answer questions like 'Which students have completed all their enrolled courses?' and 'What percentage of students complete all enrolled courses each semester?'","List students who got a grade for every course they attended. Show id_mahasiswa, nama, and jumlah_mk.","Siapa aja mahasiswa yang dapet nilai akhir untuk semua matkul yang dia ambil? Kolom: id_mahasiswa, nama, jumlah_mk.","['id_mahasiswa', 'nama', 'jumlah_mk']"
"Which students have participated in both research and received a grade above 85 in any course? Show id_mahasiswa, nama, total_proyek, nilai_tertinggi.","SELECT m.id_mahasiswa, m.nama, COUNT(DISTINCT pp.id_proyek) AS total_proyek, MAX(n.nilai_akhir) AS nilai_tertinggi
  FROM Mahasiswa m
  JOIN PartisipasiPenelitian pp ON m.id_mahasiswa = pp.id_mahasiswa
  JOIN Nilai n ON m.id_mahasiswa = n.id_mahasiswa
  GROUP BY m.id_mahasiswa, m.nama
  HAVING MAX(n.nilai_akhir) > 85;","This SQL query identifies high-achieving students who are also actively involved in research projects by analyzing both academic performance and research participation. It joins the 'Mahasiswa' (Students), 'PartisipasiPenelitian' (Research Participation), and 'Nilai' (Grades) tables to count each student's research projects while also tracking their highest course grade. The HAVING clause filters for students with at least one course grade above 85, highlighting academically strong researchers. The output helps identify well-rounded students excelling in both coursework and research. Key operations include multiple JOINs, COUNT(DISTINCT) for research projects, MAX() for highest grade, and HAVING for grade filtering. The query can be modified to: 1) include specific course categories to analyze performance by subject area, 2) add time periods to track performance trends, or 3) calculate average grades rather than maximum for broader performance assessment. It helps answer questions like 'Which research-active students also excel academically?' and 'How does research participation correlate with academic performance?'","Which students both did research and got a grade above 85? Show id_mahasiswa, nama, total_proyek, nilai_tertinggi.","Siapa mahasiswa yang ikut riset dan juga dapet nilai di atas 85? Tampilkan id_mahasiswa, nama, total_proyek, nilai_tertinggi.","['id_mahasiswa', 'nama', 'total_proyek', 'nilai_tertinggi']"
"Find all lecturers who have both guided students and taught sessions in more than one semester. Show id_dosen, nama, total_mahasiswa, jumlah_semester.","SELECT d.id_dosen, d.nama,
  COUNT(DISTINCT m.id_mahasiswa) AS total_mahasiswa,
  COUNT(DISTINCT s.semester) AS jumlah_semester
  FROM Dosen d
  JOIN Mahasiswa m ON m.id_pembimbing = d.id_dosen
  JOIN Sesi s ON s.id_pengajar = d.id_dosen
  GROUP BY d.id_dosen, d.nama
  HAVING COUNT(DISTINCT s.semester) > 1;","This SQL query identifies faculty members who have both advised students and taught courses across multiple semesters. It joins the 'Dosen' (Faculty), 'Mahasiswa' (Students), and 'Sesi' (Sessions) tables to count the number of students advised and semesters taught by each faculty member. The HAVING clause filters for faculty who have taught in more than one semester, highlighting those with sustained teaching and advising commitments. The output helps academic administrators assess faculty workload distribution and continuity in student mentoring. Key operations include multiple JOINs, COUNT(DISTINCT) for accurate counting, and HAVING for semester filtering. The query can be modified to: 1) include specific time periods to analyze recent activity, 2) add course level information to assess teaching distribution, or 3) calculate student-to-semester ratios to evaluate advising intensity. It helps answer questions like 'Which faculty maintain consistent teaching and advising roles?' and 'How should teaching and advising responsibilities be balanced?'","Find lecturers who supervise students and teach in multiple semesters. Show id_dosen, nama, total_mahasiswa, jumlah_semester.","Dosen mana aja yang ngebimbing mahasiswa dan juga ngajar di lebih dari 1 semester? Tampilkan id_dosen, nama, total_mahasiswa, jumlah_semester.","['id_dosen', 'nama', 'total_mahasiswa', 'jumlah_semester']"
"Show all facilities in the descending order of the number of faculties sharing it. Show id_fasilitas, nama_fasilitas, total_fakultas.","SELECT f.id_fasilitas, f.nama AS nama_fasilitas, COUNT(DISTINCT ff.id_fakultas) AS total_fakultas
  FROM Fasilitas f
  JOIN FasilitasFakultas ff ON f.id_fasilitas = ff.id_fasilitas
  GROUP BY f.id_fasilitas, f.nama
  ORDER BY total_fakultas DESC;","This SQL query analyzes facility utilization across faculties by counting how many faculties share each facility. It joins the 'Fasilitas' (Facilities) and 'FasilitasFakultas' (Faculty Facilities) tables to determine the cross-faculty usage of each facility. The output ranks facilities by their shared usage, helping administrators understand resource allocation and identify opportunities for improved facility management. Key operations include a table JOIN, COUNT(DISTINCT) to accurately count unique faculty associations, and ORDER BY to rank facilities by their shared usage. The query can be modified to: 1) include facility types to analyze sharing patterns by category, 2) add capacity metrics to assess utilization rates, or 3) filter by active semesters to understand seasonal usage. It helps answer questions like 'Which facilities are most widely shared?' and 'How can we optimize shared facility scheduling?'","Which facility is shared by the most faculties? Show id_fasilitas, nama_fasilitas, and total_fakultas.","Fasilitas mana yang dipake paling banyak fakultas? Tampilkan id_fasilitas, nama_fasilitas, total_fakultas.","['id_fasilitas', 'nama_fasilitas', 'total_fakultas']"
"Identify students who have never missed a single class session in their enrollment history. Show id_mahasiswa, nama, total_sesi_dihadiri.","SELECT m.id_mahasiswa, m.nama, COUNT(*) AS total_sesi_dihadiri
  FROM Mahasiswa m
  JOIN CatatanKehadiran k ON k.id_mahasiswa = m.id_mahasiswa
  WHERE k.status = 'Hadir'
  GROUP BY m.id_mahasiswa, m.nama
  HAVING COUNT(*) = (
  SELECT COUNT(*) FROM CatatanKehadiran k2 WHERE k2.id_mahasiswa = m.id_mahasiswa
  );","This SQL query identifies students with perfect attendance records by comparing their total attended sessions with their total registered sessions. It joins the 'Mahasiswa' (Students) and 'CatatanKehadiran' (Attendance Records) tables, filtering for 'Hadir' (Present) status. The HAVING clause uses a correlated subquery to verify that the count of attended sessions equals the count of all registered sessions for each student. The output helps recognize students with exemplary attendance and can be used to assess overall class participation rates. Key operations include a table JOIN, COUNT aggregation, and a correlated subquery for precise attendance verification. The query can be modified to: 1) include specific time periods to analyze attendance trends, 2) add course information to identify classes with high perfect attendance rates, or 3) calculate attendance percentages for students who missed only a few sessions. It helps answer questions like 'Which students have perfect attendance records?' and 'How can we improve overall class attendance?'","Which students never missed any class? I want id_mahasiswa, nama, total_sesi_dihadiri.","Siapa mahasiswa yang ga pernah bolos sekalipun? Kolom: id_mahasiswa, nama, total_sesi_dihadiri.","['id_mahasiswa', 'nama', 'total_sesi_dihadiri']"
"List all clubs whose members have an average GPA (IPK) above 3.5. Show id_klub, nama_klub, avg_ipk.","SELECT k.id_klub, k.nama AS nama_klub, AVG(n.IPK) AS avg_ipk
  FROM KeanggotaanKlub kk
  JOIN OrganisasiKlub k ON kk.id_klub = k.id_klub
  JOIN Mahasiswa m ON kk.id_mahasiswa = m.id_mahasiswa
  JOIN Nilai n ON n.id_mahasiswa = m.id_mahasiswa
  GROUP BY k.id_klub, k.nama
  HAVING AVG(n.IPK) > 3.5;","This SQL query analyzes the academic performance of student club members by calculating the average GPA (IPK) for each club. It joins the 'KeanggotaanKlub' (Club Memberships), 'OrganisasiKlub' (Student Clubs), 'Mahasiswa' (Students), and 'Nilai' (Grades) tables to compute the average GPA of members in each club. The HAVING clause filters for clubs whose members maintain an average GPA above 3.5, identifying high-achieving student organizations. The output helps student affairs offices understand the relationship between extracurricular involvement and academic performance. Key operations include multiple table JOINs, AVG aggregation of GPAs, and HAVING for GPA threshold filtering. The query can be modified to: 1) include semester filters to track performance trends, 2) analyze specific academic departments or majors within clubs, or 3) compare club GPAs to institutional averages. It helps answer questions like 'Which student clubs have the highest academic achievers?' and 'How does club participation correlate with academic success?'","List clubs where the average GPA of members is above 3.5. Show id_klub, nama_klub, avg_ipk.","Klub mana aja yang anggota-anggotanya punya IPK rata-rata di atas 3.5? Tampilkan id_klub, nama_klub, avg_ipk.","['id_klub', 'nama_klub', 'avg_ipk']"
"Which courses have no enrolled students but still have a session scheduled? Show id_mk, judul, jumlah_sesi.","SELECT mk.id_mk, mk.judul, COUNT(s.id_sesi) AS jumlah_sesi
  FROM MataKuliah mk
  JOIN Sesi s ON mk.id_mk = s.id_mk
  WHERE NOT EXISTS (
  SELECT 1 FROM EnrolmenKelas e
  JOIN Sesi s2 ON e.id_sesi = s2.id_sesi
  WHERE s2.id_mk = mk.id_mk
  )
  GROUP BY mk.id_mk, mk.judul;","This SQL query identifies courses that have scheduled sessions but no enrolled students by analyzing the 'MataKuliah' (Courses), 'Sesi' (Sessions), and 'EnrolmenKelas' (Class Enrollments) tables. It counts the number of sessions for each course and uses a NOT EXISTS subquery to filter out courses that have any enrollments. The output helps academic administrators identify under-subscribed courses that may need marketing attention or reconsideration. Key operations include a table JOIN, COUNT aggregation, and a NOT EXISTS subquery to detect courses with zero enrollments. The query can be modified to: 1) include semester filters to analyze enrollment trends over time, 2) add instructor information to assess teaching assignments, or 3) compare with previous offerings to identify declining interest. It helps answer questions like 'Which courses are scheduled but have no students?' and 'How should we adjust our course offerings based on demand?'","Which courses have no students but still have sessions? Show id_mk, judul, jumlah_sesi.","Matkul mana yang punya sesi tapi ga ada mahasiswa yang daftar? Kolom: id_mk, judul, jumlah_sesi.","['id_mk', 'judul', 'jumlah_sesi']"
"Which books have been borrowed more than 5 times and are still available in the library? Show id_buku, judul, total_peminjaman, salinan_tersedia.","SELECT b.id_buku, b.judul, COUNT(p.id_peminjaman) AS total_peminjaman, b.salinan_tersedia
  FROM BukuPerpustakaan b
  JOIN PeminjamanBuku p ON b.id_buku = p.id_buku
  GROUP BY b.id_buku, b.judul, b.salinan_tersedia
  HAVING COUNT(p.id_peminjaman) > 5 AND b.salinan_tersedia > 0;","This SQL query identifies popular library books that are both frequently borrowed and currently available by analyzing the 'BukuPerpustakaan' (Library Books) and 'PeminjamanBuku' (Book Loans) tables. It counts the number of loans for each book and filters for books with more than 5 loans that still have available copies. The output helps librarians identify high-demand books that may need additional copies while ensuring they're currently accessible to patrons. Key operations include a table JOIN, COUNT aggregation, and HAVING with multiple conditions to filter for both popularity and availability. The query can be modified to: 1) include date ranges to analyze seasonal popularity trends, 2) add book categories to identify popular genres, or 3) calculate loan-to-copy ratios to assess collection adequacy. It helps answer questions like 'Which popular books should we acquire more copies of?' and 'How well does our collection meet patron demand?'","Which books were borrowed more than 5 times and still have copies? Show id_buku, judul, total_peminjaman, salinan_tersedia.","Buku apa aja yang udah dipinjam lebih dari 5x tapi masih tersedia? Kolom: id_buku, judul, total_peminjaman, salinan_tersedia.","['id_buku', 'judul', 'total_peminjaman', 'salinan_tersedia']"
"Find the top 5 lecturers based on total number of roles (pengajar sesi, pembimbing mahasiswa, penulis publikasi). If there is a tie, show any of the valid top 5 lecturers. Show id_dosen, nama, total_peran.","SELECT d.id_dosen, d.nama,
  (SELECT COUNT(*) FROM Sesi WHERE id_pengajar = d.id_dosen) +
  (SELECT COUNT(*) FROM Mahasiswa WHERE id_pembimbing = d.id_dosen) +
  (SELECT COUNT(*) FROM PenulisPublikasi WHERE id_dosen = d.id_dosen) AS total_peran
  FROM Dosen d
  ORDER BY total_peran DESC
  LIMIT 5;","This SQL query identifies the top 5 most actively engaged faculty members by calculating their total contributions across teaching, advising, and research. It combines three separate counts from the 'Sesi' (Teaching Sessions), 'Mahasiswa' (Student Advising), and 'PenulisPublikasi' (Research Publications) tables to create a comprehensive engagement score for each faculty member. The output helps academic administrators recognize faculty with the broadest institutional contributions and can inform workload distribution decisions. Key operations include three correlated subqueries for counting different roles, arithmetic summation of these counts, and ORDER BY with LIMIT to highlight the most engaged faculty. The query can be modified to: 1) weight different roles differently in the total score, 2) filter by time periods to analyze recent engagement, or 3) normalize by years of service for fair comparison. It helps answer questions like 'Which faculty members are most actively contributing across all areas?' and 'How should we balance teaching, advising, and research expectations?'","Who are the top 5 lecturers with the most roles (teaching, supervising, publishing)? Show id_dosen, nama, total_peran.","5 dosen teraktif dalam hal ngajar, bimbing, dan publikasi siapa aja? Kolom: id_dosen, nama, total_peran.","['id_dosen', 'nama', 'total_peran']"
"Which student has the widest academic engagement (total sessions attended, research projects joined, and clubs participated)? If there is a tie, show any of the tying student. Show id_mahasiswa, nama, total_sesi, total_proyek, total_klub.","SELECT m.id_mahasiswa, m.nama,
  COUNT(DISTINCT k.id_sesi) AS total_sesi,
  COUNT(DISTINCT pp.id_proyek) AS total_proyek,
  COUNT(DISTINCT kk.id_klub) AS total_klub
FROM Mahasiswa m
LEFT JOIN CatatanKehadiran k ON k.id_mahasiswa = m.id_mahasiswa
LEFT JOIN PartisipasiPenelitian pp ON pp.id_mahasiswa = m.id_mahasiswa
LEFT JOIN KeanggotaanKlub kk ON kk.id_mahasiswa = m.id_mahasiswa
GROUP BY m.id_mahasiswa, m.nama
ORDER BY (COUNT(DISTINCT k.id_sesi) + COUNT(DISTINCT pp.id_proyek) + COUNT(DISTINCT kk.id_klub)) DESC
LIMIT 1;
","This SQL query identifies the most actively involved student by calculating and summing their distinct participation across three dimensions: session attendance, research project participation, and club memberships. It uses the 'Mahasiswa' table as the base and performs LEFT JOINs with 'CatatanKehadiran', 'PartisipasiPenelitian', and 'KeanggotaanKlub' to ensure students with no activity are still included. The query groups results by student ID and name, counts distinct entries in each joined table, and ranks students by the total of those counts in descending order, returning only the top result. This output helps surface the most engaged student, potentially useful for awards, scholarship considerations, or engagement analysis. Analysts could modify this query to return a top-N list by increasing the LIMIT, filter by academic year or department using WHERE clauses, or break down engagement types further by time or category. It can support questions like 'Who are the most engaged students in extracurricular and academic activities?' or 'How does student engagement correlate with academic performance or retention?","Which student is most active overall (sessions, research, clubs)? Show id_mahasiswa, nama, total_sesi, total_proyek, total_klub.","Mahasiswa mana yang paling aktif secara akademik? Kolom: id_mahasiswa, nama, total_sesi, total_proyek, total_klub.","['id_mahasiswa', 'nama', 'total_sesi', 'total_proyek', 'total_klub']"
"Show me the top 5 courses (MataKuliah) with the highest average student participation score? If there is a tie, show any of the valid top 5 courses. Show id_mk, judul, avg_partisipasi.","SELECT mk.id_mk, mk.judul, AVG(e.nilai_partisipasi) AS avg_partisipasi
  FROM MataKuliah mk
  JOIN Sesi s ON s.id_mk = mk.id_mk
  JOIN EnrolmenKelas e ON e.id_sesi = s.id_sesi
  GROUP BY mk.id_mk, mk.judul
  ORDER BY avg_partisipasi DESC
  LIMIT 5;","This SQL query identifies the top 5 courses with the highest average participation scores by joining the 'MataKuliah' (courses), 'Sesi' (sessions), and 'EnrolmenKelas' (enrollments) tables. It calculates the average participation score ('nilai_partisipasi') for each course, groups the results by course ID and title, and orders them in descending order of average participation. The query is useful for assessing student engagement across different courses. Key modifications could include: (1) adding a filter for specific academic periods by joining with a 'Semester' table, (2) comparing participation scores across different departments by including a department join, or (3) calculating additional metrics like minimum/maximum participation scores alongside the average. This query could help answer questions like: Which courses have the most engaged students? How does participation vary across different subject areas? What are the participation trends for specific student groups?","Which courses had the best average participation score? Show id_mk, judul, avg_partisipasi.","Matkul mana yang punya nilai partisipasi tertinggi secara rata-rata? Tampilkan id_mk, judul, avg_partisipasi.","['id_mk', 'judul', 'avg_partisipasi']"
"Find lecturers who teach in different faculties than the one they are assigned to. Show id_dosen, nama, assigned_fakultas, taught_fakultas.","SELECT d.id_dosen, d.nama, f1.nama AS assigned_fakultas, f2.nama AS taught_fakultas
  FROM Dosen d
  JOIN MataKuliah mk ON mk.id_pengajar = d.id_dosen
  JOIN Fakultas f1 ON d.id_fakultas = f1.id_fakultas
  JOIN Fakultas f2 ON mk.id_fakultas = f2.id_fakultas
  WHERE f1.id_fakultas <> f2.id_fakultas;","This query identifies faculty members who teach courses outside their assigned department by joining the Dosen (faculty), MataKuliah (courses), and Fakultas (departments) tables. The key operation involves comparing each faculty member's home department (f1) with the department offering their taught courses (f2) through a self-join on the Fakultas table. The WHERE clause filters for mismatches between these department assignments. The output lists faculty IDs, names, their assigned department, and teaching department, which helps administrators monitor cross-departmental teaching assignments. The query could be extended to: 1) count the number of cross-department courses per faculty, 2) filter by semester to analyze trends over time, or 3) include course levels to identify patterns in interdisciplinary teaching. This analysis could answer questions about resource allocation, faculty workload distribution, and interdisciplinary collaboration opportunities.","Which lecturers teach in different faculties than the one they belong to? Show id_dosen, nama, assigned_fakultas, taught_fakultas.","Dosen mana aja yang ngajar di fakultas berbeda dari tempat asalnya? Kolom: id_dosen, nama, assigned_fakultas, taught_fakultas.","['id_dosen', 'nama', 'assigned_fakultas', 'taught_fakultas']"
"Which lecturers have taught the same course in at least 3 different semesters? Show id_dosen, nama, id_mk, judul, total_semester.","SELECT d.id_dosen, d.nama, mk.id_mk, mk.judul, COUNT(DISTINCT s.semester) AS total_semester
  FROM Dosen d
  JOIN Sesi s ON s.id_pengajar = d.id_dosen
  JOIN MataKuliah mk ON mk.id_mk = s.id_mk
  GROUP BY d.id_dosen, d.nama, mk.id_mk, mk.judul
  HAVING COUNT(DISTINCT s.semester) >= 3;","This query identifies professors who have taught the same course for at least 3 different semesters by joining the Dosen (professors), Sesi (sessions), and MataKuliah (courses) tables. It counts distinct semesters per professor-course combination using GROUP BY and filters for those with â‰¥3 semesters via HAVING. The output shows professor IDs, names, course IDs, titles, and semester counts, helping identify experienced instructors for specific courses. The query could be modified to: 1) include semester years to analyze teaching continuity over time, 2) add average class size by joining enrollment data, or 3) filter for specific departments. It answers questions about teaching consistency, instructor expertise distribution, and long-term course staffing patterns.","Which lecturers taught the same course in 3+ semesters? Show id_dosen, nama, id_mk, judul, total_semester.","Dosen mana yang ngajar matkul yang sama di 3 semester berbeda? Tampilkan id_dosen, nama, id_mk, judul, total_semester.","['id_dosen', 'nama', 'id_mk', 'judul', 'total_semester']"
"List students who were absent more than 5 times across all sessions. Show id_mahasiswa, nama, total_absen.","SELECT m.id_mahasiswa, m.nama, COUNT(*) AS total_absen
  FROM Mahasiswa m
  JOIN CatatanKehadiran k ON m.id_mahasiswa = k.id_mahasiswa
  WHERE k.status = 'Tidak Hadir'
  GROUP BY m.id_mahasiswa, m.nama
  HAVING COUNT(*) > 5;","This query identifies students with excessive absences by joining the Mahasiswa (students) and CatatanKehadiran (attendance records) tables. It counts absences per student (WHERE status = 'Tidak Hadir'), groups by student ID and name, and filters for those with more than 5 absences (HAVING COUNT(*) > 5). The output shows student IDs, names, and total absences, helping academic advisors identify at-risk students. The query could be modified to: 1) analyze absences by course by joining with enrollment data, 2) include date ranges to focus on recent attendance patterns, or 3) calculate absence rates relative to total class sessions. It answers questions about student engagement, early warning indicators, and attendance patterns across different student groups.","Which students were absent more than 5 times? Show id_mahasiswa, nama, total_absen.","Mahasiswa mana yang absen lebih dari 5 kali? Kolom: id_mahasiswa, nama, total_absen.","['id_mahasiswa', 'nama', 'total_absen']"
"Identify research projects involving students from at least 3 different departments (jurusan). Show id_proyek, judul, total_jurusan.","SELECT p.id_proyek, p.judul, COUNT(DISTINCT m.id_jurusan) AS total_jurusan
  FROM ProyekPenelitian p
  JOIN PartisipasiPenelitian pp ON pp.id_proyek = p.id_proyek
  JOIN Mahasiswa m ON m.id_mahasiswa = pp.id_mahasiswa
  GROUP BY p.id_proyek, p.judul
  HAVING COUNT(DISTINCT m.id_jurusan) >= 3;","This query identifies research projects with participation from students across at least 3 different departments by joining the ProyekPenelitian (research projects), PartisipasiPenelitian (research participation), and Mahasiswa (students) tables. It counts distinct departments per project (COUNT(DISTINCT m.id_jurusan)) and filters for projects with â‰¥3 participating departments (HAVING clause). The output shows project IDs, titles, and department counts, highlighting interdisciplinary research collaborations. The query could be modified to: 1) include department names to identify which disciplines collaborate most, 2) filter by project duration or status to analyze active collaborations, or 3) add student counts to measure participation levels. It helps answer questions about interdisciplinary research patterns, department collaboration trends, and the diversity of student involvement in research projects.","Which research projects involved students from 3+ departments? Show id_proyek, judul, total_jurusan.","Proyek penelitian mana yang diikuti mahasiswa dari minimal 3 jurusan? Kolom: id_proyek, judul, total_jurusan.","['id_proyek', 'judul', 'total_jurusan']"
"Show the top 5 clubs with the most diverse membership in terms of departments. If there is a tie, show any of the valid top 5 clubs. Show id_klub, nama, total_jurusan.","SELECT k.id_klub, k.nama, COUNT(DISTINCT m.id_jurusan) AS total_jurusan
  FROM OrganisasiKlub k
  JOIN KeanggotaanKlub kk ON kk.id_klub = k.id_klub
  JOIN Mahasiswa m ON m.id_mahasiswa = kk.id_mahasiswa
  GROUP BY k.id_klub, k.nama
  ORDER BY total_jurusan DESC
  LIMIT 5;","This query identifies the top 5 most diverse student clubs based on department representation by joining the OrganisasiKlub (clubs), KeanggotaanKlub (memberships), and Mahasiswa (students) tables. It counts distinct departments per club (COUNT(DISTINCT m.id_jurusan)), groups by club ID and name, and orders results by department diversity in descending order. The output shows club IDs, names, and department counts, highlighting clubs with the broadest academic representation. The query could be modified to: 1) include department names to identify which disciplines participate most, 2) filter by club type or size to analyze diversity patterns, or 3) add member counts to assess participation levels. It helps answer questions about student engagement across departments, club diversity trends, and opportunities for interdisciplinary student interactions.","Which clubs have students from many departments? Show id_klub, nama, total_jurusan.","Klub mana yang anggotanya datang dari berbagai jurusan? Tampilkan id_klub, nama, total_jurusan.","['id_klub', 'nama', 'total_jurusan']"
"List the top 3 most borrowed books along with how many copies are still available. If there is a tie, show any of the valid top 3 books.  Show id_buku, judul, total_peminjaman, salinan_tersedia.","SELECT b.id_buku, b.judul, COUNT(p.id_peminjaman) AS total_peminjaman, b.salinan_tersedia
  FROM BukuPerpustakaan b
  JOIN PeminjamanBuku p ON p.id_buku = b.id_buku
  GROUP BY b.id_buku, b.judul, b.salinan_tersedia
  ORDER BY total_peminjaman DESC
  LIMIT 3;","This query identifies the top 3 most borrowed books from the library by joining the BukuPerpustakaan (books) and PeminjamanBuku (book loans) tables. It counts the number of loans per book (COUNT(p.id_peminjaman)), groups by book ID, title, and available copies, and orders results by loan count in descending order. The output shows book IDs, titles, total loans, and available copies, helping library staff identify popular materials. The query could be modified to: 1) filter by date range to analyze recent borrowing trends, 2) include book categories to identify popular genres, or 3) compare loan counts to available copies to assess demand versus supply. It helps answer questions about collection usage patterns, popular reading materials, and potential acquisition needs.","What are the 3 most borrowed books and how many copies are left? Show id_buku, judul, total_peminjaman, salinan_tersedia.","Apa aja 3 buku yang paling sering dipinjam dan berapa salinan tersisa? Kolom: id_buku, judul, total_peminjaman, salinan_tersedia.","['id_buku', 'judul', 'total_peminjaman', 'salinan_tersedia']"
"Which students have both top 10% GPA and have participated in at least one publication via their supervising lecturer? Show id_mahasiswa, nama, IPK, total_publikasi_pembimbing.","SELECT m.id_mahasiswa, m.nama, MAX(n.IPK) AS IPK,
  COUNT(DISTINCT pp.id_publikasi) AS total_publikasi_pembimbing
  FROM Mahasiswa m
  JOIN Nilai n ON n.id_mahasiswa = m.id_mahasiswa
  JOIN Dosen d ON d.id_dosen = m.id_pembimbing
  JOIN PenulisPublikasi pp ON pp.id_dosen = d.id_dosen
  WHERE n.IPK > (SELECT percentile_cont(0.9) WITHIN GROUP (ORDER BY IPK) FROM Nilai)
  GROUP BY m.id_mahasiswa, m.nama;","This query identifies top-performing students (top 10% by GPA) and their advisors' publication records by joining Mahasiswa (students), Nilai (grades), Dosen (advisors), and PenulisPublikasi (publication authors) tables. It calculates each student's maximum GPA (MAX(n.IPK)) and counts their advisor's distinct publications (COUNT(DISTINCT pp.id_publikasi)), filtering for students in the 90th percentile GPA using a subquery with percentile_cont. The output includes student IDs, names, GPAs, and their advisors' publication counts, useful for analyzing relationships between student performance and advisor research activity. The query could be modified to: 1) include department filters to analyze discipline-specific patterns, 2) add student publication counts to assess direct research involvement, or 3) analyze publication quality metrics. It helps answer questions about advisor-student performance correlations, research mentorship effectiveness, and high-achieving student characteristics.","Which students have top GPA and their advisor published something? Show id_mahasiswa, nama, IPK, total_publikasi_pembimbing.","Siapa mahasiswa IPK-nya masuk top 10% dan pembimbingnya pernah publikasi? Kolom: id_mahasiswa, nama, IPK, total_publikasi_pembimbing.","['id_mahasiswa', 'nama', 'ipk', 'total_publikasi_pembimbing']"
"List faculties that have more than one department, at least five active lecturers, and more than three research projects. Show id_fakultas, nama, total_jurusan, total_dosen, total_proyek.","SELECT f.id_fakultas, f.nama,
  COUNT(DISTINCT j.id_jurusan) AS total_jurusan,
  COUNT(DISTINCT d.id_dosen) AS total_dosen,
  COUNT(DISTINCT p.id_proyek) AS total_proyek
  FROM Fakultas f
  LEFT JOIN Jurusan j ON j.id_fakultas = f.id_fakultas
  LEFT JOIN Dosen d ON d.id_fakultas = f.id_fakultas
  LEFT JOIN ProyekPenelitian p ON p.id_fakultas = f.id_fakultas
  GROUP BY f.id_fakultas, f.nama
  HAVING COUNT(DISTINCT j.id_jurusan) > 1 AND COUNT(DISTINCT d.id_dosen) >= 5 AND COUNT(DISTINCT p.id_proyek) > 3;","This query identifies faculties that meet specific thresholds for departments, faculty members, and research projects by joining the Fakultas (faculties), Jurusan (departments), Dosen (faculty members), and ProyekPenelitian (research projects) tables using LEFT JOINs. It counts distinct departments, faculty members, and research projects per faculty, then applies HAVING filters for faculties with more than 1 department, at least 5 faculty members, and more than 3 research projects. The output includes faculty IDs, names, and counts of departments, faculty, and projects, helping identify well-established faculties with substantial research activity. The query could be modified to: 1) include average project funding amounts, 2) filter by faculty establishment date to analyze newer vs older faculties, or 3) add student enrollment metrics. It helps answer questions about faculty resource allocation, research productivity benchmarks, and institutional development patterns.","List faculties with >1 department, 5+ lecturers, and >3 projects. Show id_fakultas, nama, total_jurusan, total_dosen, total_proyek.","Fakultas mana yang punya >1 jurusan, 5+ dosen aktif, dan >3 proyek? Kolom: id_fakultas, nama, total_jurusan, total_dosen, total_proyek.","['id_fakultas', 'nama', 'total_jurusan', 'total_dosen', 'total_proyek']"
"Which students have taken exams, participated in research projects, and are active members in clubs? Show id_mahasiswa, nama, total_ujian, total_proyek, total_klub.","SELECT m.id_mahasiswa, m.nama,
  COUNT(DISTINCT h.id_ujian) AS total_ujian,
  COUNT(DISTINCT pp.id_proyek) AS total_proyek,
  COUNT(DISTINCT kk.id_klub) AS total_klub
  FROM Mahasiswa m
  LEFT JOIN HasilUjian h ON m.id_mahasiswa = h.id_mahasiswa
  LEFT JOIN PartisipasiPenelitian pp ON m.id_mahasiswa = pp.id_mahasiswa
  LEFT JOIN KeanggotaanKlub kk ON m.id_mahasiswa = kk.id_mahasiswa
  GROUP BY m.id_mahasiswa, m.nama
  HAVING COUNT(DISTINCT h.id_ujian) > 0 AND COUNT(DISTINCT pp.id_proyek) > 0 AND COUNT(DISTINCT kk.id_klub) > 0;","This query identifies well-rounded students who are active in academics, research, and extracurriculars by joining the Mahasiswa (students) table with HasilUjian (exam results), PartisipasiPenelitian (research participation), and KeanggotaanKlub (club membership) tables using LEFT JOINs. It counts each student's distinct exam attempts, research projects, and club memberships, then filters for students with at least one record in each category (HAVING conditions). The output shows student IDs, names, and their counts of exams, projects, and clubs, highlighting students balancing multiple aspects of university life. The query could be modified to: 1) include academic performance metrics from exam results, 2) filter by specific club types or research areas, or 3) add demographic filters. It helps answer questions about student engagement patterns, the relationship between extracurriculars and academics, and identifying potential student leaders.","Which students took exams, did research, and joined clubs? Show id_mahasiswa, nama, total_ujian, total_proyek, total_klub.","Mahasiswa mana yang ujian, ikut riset, dan aktif di klub? Kolom: id_mahasiswa, nama, total_ujian, total_proyek, total_klub.","['id_mahasiswa', 'nama', 'total_ujian', 'total_proyek', 'total_klub']"
"Identify faculties where the head (id_kepala) has never taught a course. Show id_fakultas, nama, id_kepala, nama_kepala.","SELECT f.id_fakultas, f.nama, f.id_kepala, d.nama AS nama_kepala
  FROM Fakultas f
  JOIN Dosen d ON f.id_kepala = d.id_dosen
  WHERE NOT EXISTS (
  SELECT 1 FROM MataKuliah mk WHERE mk.id_pengajar = f.id_kepala
  );","This query identifies faculty heads who are not currently teaching any courses by joining the Fakultas (faculties) and Dosen (professors) tables, and using a NOT EXISTS subquery to check the MataKuliah (courses) table. It returns faculty IDs, names, head IDs, and head names for cases where the faculty head doesn't appear as a course instructor. The output helps monitor faculty leadership workload and teaching commitments. The query could be modified to: 1) include the duration of their head appointment to analyze patterns over time, 2) check for research activity instead of teaching, or 3) compare with previous teaching loads. It helps answer questions about faculty leadership priorities, workload distribution, and the balance between administrative and teaching duties.","Which faculties have a head who doesnâ€™t teach? Show id_fakultas, nama, id_kepala, nama_kepala.","Fakultas mana yang kepala fakultasnya ga pernah ngajar? Kolom: id_fakultas, nama, id_kepala, nama_kepala.","['id_fakultas', 'nama', 'id_kepala', 'nama_kepala']"
"Which courses have been taught by more than one lecturer in different semesters? Show id_mk, judul, total_pengajar.","SELECT mk.id_mk, mk.judul, COUNT(DISTINCT s.id_pengajar) AS total_pengajar
  FROM MataKuliah mk
  JOIN Sesi s ON mk.id_mk = s.id_mk
  GROUP BY mk.id_mk, mk.judul
  HAVING COUNT(DISTINCT s.id_pengajar) > 1;","This query identifies courses that have been taught by multiple instructors by joining the MataKuliah (courses) and Sesi (sessions) tables. It counts distinct instructors per course (COUNT(DISTINCT s.id_pengajar)) and filters for courses with more than one instructor (HAVING clause). The output shows course IDs, titles, and instructor counts, highlighting courses with shared teaching responsibilities. The query could be modified to: 1) include semester information to analyze teaching patterns over time, 2) add department filters to examine discipline-specific practices, or 3) calculate the average number of instructors per course type. It helps answer questions about teaching collaboration, course staffing strategies, and instructor workload distribution across different subjects.","Which courses are taught by different lecturers in different semesters? Show id_mk, judul, total_pengajar.","Matkul mana yang diajar sama banyak dosen di semester berbeda? Kolom: id_mk, judul, total_pengajar.","['id_mk', 'judul', 'total_pengajar']"
"List students who received the highest exam score in their respective exams. Show id_ujian, id_mahasiswa, nama, nilai_diperoleh.","SELECT h.id_ujian, h.id_mahasiswa, m.nama, h.nilai_diperoleh
  FROM HasilUjian h
  JOIN Mahasiswa m ON m.id_mahasiswa = h.id_mahasiswa
  WHERE h.nilai_diperoleh = (
  SELECT MAX(h2.nilai_diperoleh)
  FROM HasilUjian h2
  WHERE h2.id_ujian = h.id_ujian
  );","This query identifies the top-performing student(s) for each exam by joining the HasilUjian (exam results) and Mahasiswa (students) tables. It uses a correlated subquery to find the maximum score for each exam (MAX(h2.nilai_diperoleh)) and matches students who achieved that score. The output shows exam IDs, student IDs, names, and their scores, highlighting academic excellence. The query could be modified to: 1) include course information to analyze top performers by subject, 2) add date filters to examine performance trends over time, or 3) identify consistent top performers across multiple exams. It helps answer questions about academic achievement patterns, student excellence recognition, and potential benchmarking for exam difficulty.","Who got the highest score in each exam? Show id_ujian, id_mahasiswa, nama, nilai_diperoleh.","Siapa aja mahasiswa dengan nilai tertinggi di setiap ujian? Kolom: id_ujian, id_mahasiswa, nama, nilai_diperoleh.","['id_ujian', 'id_mahasiswa', 'nama', 'nilai_diperoleh']"
"Which books have never been borrowed but belong to a category that has other book that has been borrowed at least three times? Show id_buku, judul, kategori.","SELECT b.id_buku, b.judul, b.kategori
  FROM BukuPerpustakaan b
  WHERE NOT EXISTS (
  SELECT 1 FROM PeminjamanBuku p WHERE p.id_buku = b.id_buku
  )
  AND EXISTS (
  SELECT 1 FROM BukuPerpustakaan b2
  JOIN PeminjamanBuku p2 ON p2.id_buku = b2.id_buku
  WHERE b2.kategori = b.kategori
  GROUP BY b2.kategori
  HAVING COUNT(*) > 3
  );","This query identifies books that have never been borrowed (NOT EXISTS) but belong to categories where other books have been borrowed multiple times (>3 loans). It examines the BukuPerpustakaan (books) and PeminjamanBuku (loans) tables, using two subqueries: one to find unborrowed books and another to verify active categories. The output shows book IDs, titles, and categories, helping librarians identify potentially unpopular books in otherwise popular categories. The query could be modified to: 1) include acquisition dates to analyze new vs old unborrowed books, 2) add popularity thresholds for comparison, or 3) filter by specific time periods. It helps answer questions about collection utilization, category popularity discrepancies, and potential weeding candidates.","Which books were never borrowed but are in a category that others borrow often? Show id_buku, judul, kategori.","Buku mana yang belum pernah dipinjam tapi termasuk kategori populer? Kolom: id_buku, judul, kategori.","['id_buku', 'judul', 'kategori']"
"Find students whose supervisor is also the author of at least one publication. Show id_mahasiswa, nama, id_pembimbing, nama_dosen, total_publikasi.","SELECT m.id_mahasiswa, m.nama, d.id_dosen AS id_pembimbing, d.nama AS nama_dosen, COUNT(DISTINCT pp.id_publikasi) AS total_publikasi
  FROM Mahasiswa m
  JOIN Dosen d ON m.id_pembimbing = d.id_dosen
  JOIN PenulisPublikasi pp ON pp.id_dosen = d.id_dosen
  GROUP BY m.id_mahasiswa, m.nama, d.id_dosen, d.nama;","This query analyzes the research productivity of student advisors by joining the Mahasiswa (students), Dosen (advisors), and PenulisPublikasi (publication authors) tables. It counts the number of distinct publications per advisor (COUNT(DISTINCT pp.id_publikasi)) while grouping by student and advisor information. The output includes student IDs and names, their advisor's ID and name, and the advisor's publication count, providing insights into advisor research activity and potential mentorship quality. The query could be modified to: 1) filter by publication year to focus on recent research output, 2) include student publication counts to compare with advisor productivity, or 3) add department information to analyze discipline-specific patterns. It helps answer questions about research mentorship effectiveness, the relationship between advisor productivity and student outcomes, and departmental research culture.","Which students have advisors that also write publications? Show id_mahasiswa, nama, id_pembimbing, nama_dosen, total_publikasi.","Mahasiswa mana yang dosennya juga nulis publikasi? Kolom: id_mahasiswa, nama, id_pembimbing, nama_dosen, total_publikasi.","['id_mahasiswa', 'nama', 'id_pembimbing', 'nama_dosen', 'total_publikasi']"
"Which lecturers are involved in both teaching and supervising research projects, but not supervising students? Show id_dosen, nama.","SELECT DISTINCT d.id_dosen, d.nama
  FROM Dosen d
  WHERE EXISTS (
  SELECT 1 FROM ProyekPenelitian p WHERE p.id_dosen = d.id_dosen
  )
  AND EXISTS (
  SELECT 1 FROM Sesi s WHERE s.id_pengajar = d.id_dosen
  )
  AND NOT EXISTS (
  SELECT 1 FROM Mahasiswa m WHERE m.id_pembimbing = d.id_dosen
  );","This query identifies faculty members who are actively involved in both research projects and teaching activities but are not currently serving as student advisors. It examines the Dosen (faculty) table with three EXISTS/NOT EXISTS subqueries checking ProyekPenelitian (research projects), Sesi (teaching sessions), and Mahasiswa (student advising) tables. The output lists faculty IDs and names who meet all criteria, highlighting potentially underutilized faculty who could take on advising roles. The query could be modified to: 1) include department information to analyze patterns across disciplines, 2) add time filters to focus on recent activity, or 3) count research projects/teaching loads to assess workload balance. It helps answer questions about faculty role distribution, advising capacity, and identifying faculty who could take on additional mentorship responsibilities.","Which lecturers teach and lead research but donâ€™t supervise students? Show id_dosen, nama.","Dosen mana yang ngajar dan riset tapi ga bimbing mahasiswa? Kolom: id_dosen, nama.","['id_dosen', 'nama']"
"List facilities that are accessed by all faculties. Show id_fasilitas, nama.","SELECT f.id_fasilitas, f.nama
  FROM Fasilitas f
  WHERE (
  SELECT COUNT(DISTINCT ff.id_fakultas)
  FROM FasilitasFakultas ff
  WHERE ff.id_fasilitas = f.id_fasilitas
  ) = (SELECT COUNT(*) FROM Fakultas);","This query identifies facilities that are shared across all faculties by comparing the count of distinct faculty associations for each facility (from FasilitasFakultas table) with the total number of faculties (from Fakultas table). The query returns facility IDs and names that are linked to every faculty, highlighting commonly shared resources. This helps in understanding resource allocation and shared infrastructure usage across the institution. The query could be modified to: 1) include facility usage statistics to analyze utilization patterns, 2) filter by facility type to identify specific shared resources, or 3) add date parameters to track changes in shared facility usage over time. It helps answer questions about resource distribution, inter-faculty collaboration opportunities, and infrastructure planning decisions.","Which facilities are accessed by all faculties? Show id_fasilitas, nama.","Fasilitas mana yang dipake semua fakultas? Kolom: id_fasilitas, nama.","['id_fasilitas', 'nama']"
"Find the number of students in each department who have a GPA (IPK) above the departmentâ€™s average. Show id_jurusan, nama_jurusan, jumlah_mahasiswa_unggul.","SELECT 
  j.id_jurusan, 
  j.nama AS nama_jurusan, 
  COUNT(CASE WHEN n.IPK > sub.rata2 THEN 1 END) AS jumlah_mahasiswa_unggul
FROM Jurusan j
LEFT JOIN Mahasiswa m ON m.id_jurusan = j.id_jurusan
LEFT JOIN (
  SELECT 
    m.id_jurusan, 
    AVG(n.IPK) AS rata2
  FROM Mahasiswa m
  JOIN Nilai n ON n.id_mahasiswa = m.id_mahasiswa
  GROUP BY m.id_jurusan
) sub ON j.id_jurusan = sub.id_jurusan
LEFT JOIN Nilai n ON n.id_mahasiswa = m.id_mahasiswa
GROUP BY j.id_jurusan, j.nama;
","This SQL query calculates the number of high-achieving studentsâ€”those with a GPA (IPK) above their department's averageâ€”in each department. It uses the 'Jurusan' table as the base, joins with 'Mahasiswa' to associate students with departments, and with 'Nilai' to access GPA data. A subquery computes the average GPA per department, which is then joined back to the main query. A conditional COUNT with CASE is used to tally students exceeding the average. The output lists each department's ID, name, and the number of students outperforming their departmental GPA average, offering insights into student performance distribution across departments. Potential modifications include filtering for specific academic years or programs, comparing against a fixed GPA threshold instead of the department average, or including total student count per department for ratio-based analysis. This query helps answer questions like 'Which departments have the highest number of top-performing students?' or 'How does student excellence vary across academic units?","Which departments have students with above-average GPA? Show id_jurusan, nama_jurusan, jumlah_mahasiswa_unggul.","Jurusan mana yang punya banyak mahasiswa IPK-nya di atas rata-rata? Kolom: id_jurusan, nama_jurusan, jumlah_mahasiswa_unggul.","['id_jurusan', 'nama_jurusan', 'jumlah_mahasiswa_unggul']"
"Which clubs have only students from one department? Show id_klub, nama_klub, id_jurusan.","SELECT k.id_klub, k.nama AS nama_klub, m.id_jurusan
  FROM OrganisasiKlub k
  JOIN KeanggotaanKlub kk ON kk.id_klub = k.id_klub
  JOIN Mahasiswa m ON kk.id_mahasiswa = m.id_mahasiswa
  GROUP BY k.id_klub, k.nama, m.id_jurusan
  HAVING COUNT(DISTINCT m.id_jurusan) = 1;","This SQL query identifies clubs (klub) whose members all come from a single academic department (jurusan), highlighting potentially department-exclusive clubs. It joins the OrganisasiKlub, KeanggotaanKlub, and Mahasiswa tables, using GROUP BY to aggregate by club and department, and HAVING COUNT(DISTINCT m.id_jurusan) = 1 to enforce the single-department condition. Key operations include JOINs for table relationships and HAVING for post-aggregation filtering. The output lists club IDs, names, and their uniform department IDs, useful for identifying department-affiliated clubs or assessing diversity in club membership. Modifications could include: 1) Adding department names for readability, 2) Counting members per club to assess size, or 3) Filtering for specific departments of interest. This query could answer questions like 'Which clubs are exclusively associated with a particular department?' or 'Are there clubs that could benefit from more diverse departmental representation?'","Which clubs have only students from the same department? Show id_klub, nama_klub, id_jurusan.","Klub mana yang semua anggotanya dari satu jurusan aja? Kolom: id_klub, nama_klub, id_jurusan.","['id_klub', 'nama_klub', 'id_jurusan']"