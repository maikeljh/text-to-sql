Question,Answer,Summary,Alternative Prompt 1,Alternative Prompt 2
Which actors have the first name ‘Scarlett’,SELECT * FROM actor WHERE first_name = 'Scarlett';,"This SQL query retrieves all records from the 'actor' table where the 'first_name' column matches 'Scarlett'. The primary objective is to filter and display actor information for individuals with the first name 'Scarlett'. The query uses a simple SELECT statement with a WHERE clause to apply the filter condition. The expected output is a list of actors with the specified first name, which could be relevant for tasks such as identifying specific actors for casting or analysis. The query can be modified to search for actors with different first names by changing the value in the WHERE clause, or extended to include additional filters (e.g., last name or actor_id) or joins with related tables like 'film_actor' to analyze film appearances. Potential questions this query might answer include: 'Which actors share the first name Scarlett?' or 'How many actors have the first name Scarlett?'.",Can you give me actors that have first name Scarlett,I want to know actors that have the first name Scarlett
How many distinct actors last names are there?,SELECT COUNT(DISTINCT last_name) FROM actor;,"This SQL query calculates the count of distinct 'last_name' values in the 'actor' table, providing the total number of unique actor last names. The main objective is to determine the diversity or uniqueness of last names among actors. The query uses the COUNT(DISTINCT column) function to perform the calculation, ensuring that only unique last names are counted. No filters or conditions are applied, as the query operates on the entire dataset. The expected output is a single integer representing the count of unique last names, which could be relevant for demographic analysis or identifying naming trends in the actor database. This query can be modified to count distinct values in other columns (e.g., first_name) or extended to include filters (e.g., counting last names for actors in specific films by joining the 'film_actor' table). Potential questions this query might answer include: 'How many unique last names are present in the actor database?' or 'What is the distribution of last names among actors?'.","Hey, I'm curious—how many different last names do the actors in our database have?",Can you tell me how many unique actor last names exist in our system?
Which actor has appeared in the most films?,"SELECT 
    a.actor_id, 
    a.first_name, 
    a.last_name, 
    COUNT(fa.film_id) AS film_count
FROM 
    actor a
    JOIN film_actor fa ON a.actor_id = fa.actor_id
GROUP BY 
    a.actor_id
ORDER BY 
    film_count DESC
LIMIT 1;","This SQL query identifies the actor who has appeared in the most films by joining the 'actor' and 'film_actor' tables on 'actor_id'. The main objective is to determine the actor with the highest number of film appearances. The query uses a JOIN operation to link the tables, a GROUP BY clause to aggregate results by actor, and COUNT(actor_id) to calculate the number of films per actor. The results are ordered in descending order by film count, and the LIMIT 1 clause ensures only the top actor is returned. The expected output includes the actor's ID, first name, last name, and their total film count, which is useful for performance analysis or identifying key contributors in the film database. This query can be modified to return the top N actors by adjusting the LIMIT clause or extended to include additional details like film titles by joining the 'film' table. Potential questions this query might answer include: 'Which actor has the most film appearances?' or 'What is the distribution of film appearances among actors?'.",Who is the most frequently appearing actor in our movie collection?,Can you find out which actor has been in the most movies?
List the top five genres in gross revenue in descending order.,"SELECT 
    c.name AS genre, 
    SUM(p.amount) AS gross_revenue
FROM 
    category c
    JOIN film_category fc ON c.category_id = fc.category_id
    JOIN inventory i ON fc.film_id = i.film_id
    JOIN rental r ON i.inventory_id = r.inventory_id
    JOIN payment p ON r.rental_id = p.rental_id
GROUP BY 
    c.name
ORDER BY 
    gross_revenue DESC
LIMIT 5;","This SQL query calculates the top 5 highest-grossing film categories by joining the 'category', 'film_category', 'inventory', 'rental', and 'payment' tables. The main objective is to determine which film categories generate the most revenue. The query uses multiple JOIN operations to link the tables, a GROUP BY clause to aggregate results by category, and SUM(p.amount) to calculate total revenue per category. The results are ordered in descending order by revenue, and the LIMIT 5 clause ensures only the top 5 categories are returned. The expected output includes the category name and its corresponding gross revenue, which is useful for identifying high-performing genres and informing business decisions. This query can be modified to analyze revenue for specific time periods by adding a WHERE clause on the rental or payment dates, or extended to include additional metrics like average revenue per film by joining the 'film' table. Potential questions this query might answer include: 'Which film categories generate the most revenue?' or 'What is the revenue distribution across film categories?'.",Which five movie genres have made the most money overall?,"Can you show me the top five highest-earning genres, ranked from highest to lowest?"
"Write a query to display how much business, in dollars, each store brought in.","SELECT s.store_id, SUM(p.amount) AS total_revenue
FROM store s
JOIN staff st ON s.store_id = st.store_id
JOIN payment p ON st.staff_id = p.staff_id
GROUP BY s.store_id
ORDER BY total_revenue DESC;","This SQL query calculates the total revenue generated by each store by joining the 'store', 'staff', and 'payment' tables. The main objective is to determine the revenue contribution of each store. The query uses JOIN operations to link the tables, a GROUP BY clause to aggregate results by store, and SUM(p.amount) to calculate total revenue per store. The results are ordered in descending order by revenue, providing a ranking of stores by their financial performance. The expected output includes the store ID and its corresponding total revenue, which is useful for evaluating store performance and allocating resources. This query can be modified to analyze revenue for specific time periods by adding a WHERE clause on the payment date, or extended to include additional details like city or country by joining the 'address' and 'city' tables. Potential questions this query might answer include: 'Which store generates the most revenue?' or 'How does revenue vary across stores?'.",How much money has each store made from rentals?,Can you break down the total revenue for each store?
Which language is used in most films? ,"SELECT 
    l.name
FROM 
    language l
    JOIN film f ON l.language_id = f.language_id
GROUP BY 
    l.name
ORDER BY
    COUNT(f.film_id) DESC
LIMIT 1;","This SQL query identifies the most frequently used language in films by joining the 'language' and 'film' tables on 'language_id'. The main objective is to determine the language associated with the highest number of films. The query uses a JOIN operation to link the tables, a GROUP BY clause to aggregate results by language, and COUNT(f.film_id) to calculate the number of films per language. The results are ordered in descending order by film count, and the LIMIT 1 clause ensures only the top language is returned. The expected output is the name of the most used language, which is useful for understanding language preferences in film production. This query can be modified to return the top N languages by adjusting the LIMIT clause or extended to include additional metrics like revenue by language by joining the 'payment' table. Potential questions this query might answer include: 'Which language is most commonly used in films?' or 'How does language usage vary across films?'.",Which language is the most common in the movies we have?,Can you find out which language is used the most in our films?
"List the top five customers in number of rented movies. Show the customer id, first name, last name, and number of rented movies for each customer.","SELECT
    c.customer_id,
    c.first_name,
    c.last_name,
    COUNT(r.rental_id) as total_rentals
FROM
    customer c
    JOIN rental r ON c.customer_id= r.customer_id
GROUP BY
    c.customer_id,
    c.first_name,
    c.last_name
ORDER BY
    total_rentals DESC
LIMIT 5;","This SQL query identifies the top 5 customers with the highest number of movie rentals by joining the 'customer' and 'rental' tables on 'customer_id'. The main objective is to determine the most active customers based on rental activity. The query uses a JOIN operation to link the tables, a GROUP BY clause to aggregate results by customer, and COUNT(r.rental_id) to calculate the total number of rentals per customer. The results are ordered in descending order by rental count, and the LIMIT 5 clause ensures only the top 5 customers are returned. The expected output includes the customer ID, first name, last name, and total rentals, which is useful for identifying loyal customers or targeting marketing campaigns. This query can be modified to analyze rentals for specific time periods by adding a WHERE clause on the rental date, or extended to include additional metrics like total revenue by joining the 'payment' table. Potential questions this query might answer include: 'Who are the most active customers?' or 'How does rental activity vary across customers?'.",Who are our five most active customers based on the number of rentals?,Can you tell me which five customers have rented the most movies?
"Which customers have rented films from more than 3 different categories? Show their customer ID, first name, last name, and the number of categories they've rented from.","SELECT 
    c.customer_id, 
    c.first_name, 
    c.last_name, 
    COUNT(DISTINCT fc.category_id) AS category_count
FROM 
    customer c
    JOIN rental r ON c.customer_id = r.customer_id
    JOIN inventory i ON r.inventory_id = i.inventory_id
    JOIN film_category fc ON i.film_id = fc.film_id
GROUP BY 
    c.customer_id
HAVING 
    COUNT(DISTINCT fc.category_id) > 3;","This SQL query identifies customers who have rented movies from more than three distinct categories. It pulls data from the 'customer', 'rental', 'inventory', and 'film_category' tables, joining them using 'customer_id', 'inventory_id', and 'film_id'. The query counts the distinct 'category_id' values per customer and filters results to only include those with more than three unique categories. The output consists of customer IDs, first names, last names, and their respective category counts. This can be adapted to analyze customers renting from specific categories by adding a WHERE clause on 'fc.category_id', or to track rental frequency per customer by counting rentals instead of categories. Analysts can use this query to segment customers based on rental diversity or identify those with broad movie preferences for targeted marketing campaigns.",Which customers have explored a variety of genres and rented from at least 3 different categories?,Can you list customers who have rented movies from more than three different categories?
"Which films have never been rented out? Show the film ID, title, and release year.","SELECT 
    f.film_id, 
    f.title, 
    f.release_year
FROM 
    film f
    LEFT JOIN inventory i ON f.film_id = i.film_id
    LEFT JOIN rental r ON i.inventory_id = r.inventory_id
WHERE 
    r.rental_id IS NULL;","This SQL query identifies films that have never been rented. It retrieves the 'film_id', 'title', and 'release_year' from the 'film' table and uses LEFT JOINs with the 'inventory' and 'rental' tables to check whether each film has associated rental records. The WHERE condition filters out films where no matching 'rental_id' exists, ensuring only unrented films appear in the result. This output can be useful for inventory management, identifying underutilized assets, or optimizing catalog offerings. The query can be modified to include additional film details such as genre or rental rate by joining with the 'film_category' or 'film' table. Alternatively, analysts could adjust the filter to find films rented only within a specific date range by adding a condition on the 'rental_date' column.",Are there any movies in our collection that nobody has ever rented?,Can you find out which films have never been rented even once?
"What is the total revenue generated by each actor, based on the films they've appeared in? Show the actor ID, first name, last name, and total revenue.","SELECT 
    a.actor_id, 
    a.first_name, 
    a.last_name, 
    SUM(p.amount) AS total_revenue
FROM 
    actor a
    JOIN film_actor fa ON a.actor_id = fa.actor_id
    JOIN inventory i ON fa.film_id = i.film_id
    JOIN rental r ON i.inventory_id = r.inventory_id
    JOIN payment p ON r.rental_id = p.rental_id
GROUP BY 
    a.actor_id
ORDER BY 
    total_revenue DESC;","This SQL query calculates the total revenue generated from rentals associated with each actor, ranking them in descending order of revenue. It joins the 'actor', 'film_actor', 'inventory', 'rental', and 'payment' tables to link actors to films, then to inventory, rentals, and finally to payments. The primary metric computed is the sum of 'amount' from the 'payment' table, grouped by 'actor_id'. This query is useful for identifying the most profitable actors in terms of rental revenue, supporting decisions related to casting, marketing, and content promotion. It can be extended to filter results for a specific date range by adding conditions on 'rental_date' from the 'rental' table or to analyze revenue per film by incorporating 'film_id' into the grouping. Analysts might use this to compare actor-based revenues across different time periods or to determine whether certain actors contribute disproportionately to revenue.",How much money has each actor helped generate based on the movies they were in?,Can you show me the total revenue for each actor based on their films?
"Which store has the highest total revenue, and what is the name of the staff member managing that store?","SELECT 
    s.store_id, 
    CONCAT(st.first_name, ' ', st.last_name) AS manager_name, 
    SUM(p.amount) AS total_revenue
FROM 
    store s
    JOIN staff st ON s.manager_staff_id = st.staff_id
    JOIN inventory i ON s.store_id = i.store_id
    JOIN rental r ON i.inventory_id = r.inventory_id
    JOIN payment p ON r.rental_id = p.rental_id
GROUP BY 
    s.store_id
ORDER BY 
    total_revenue DESC
LIMIT 1;","This SQL query identifies the store with the highest total revenue by aggregating payment amounts across all transactions. It joins the 'store' table with 'staff' to retrieve the store manager's name and further joins 'inventory', 'rental', and 'payment' tables to track revenue. The result provides the store ID, manager's full name, and total revenue, sorted in descending order, returning only the top-performing store. Potential modifications include removing the LIMIT clause to rank all stores by revenue, filtering by date range to analyze revenue trends over time, or incorporating additional metrics such as average transaction value. This query is useful for answering questions about store performance, revenue distribution, and managerial impact on sales.","Which store has made the most money, and who is the manager there?",Can you find out which store has the highest revenue and who runs it?
"Which customers have rented the same film more than once? Show the customer ID, first name, last name, film title, and the number of times they rented it.","WITH customer_film_rentals AS (
    SELECT 
        r.customer_id, 
        f.film_id, 
        f.title, 
        COUNT(r.rental_id) AS rental_count
    FROM 
        rental r
        JOIN inventory i ON r.inventory_id = i.inventory_id
        JOIN film f ON i.film_id = f.film_id
    GROUP BY 
        r.customer_id, f.film_id
    HAVING 
        COUNT(r.rental_id) > 1
)
SELECT 
    c.customer_id, 
    c.first_name, 
    c.last_name, 
    cfr.title, 
    cfr.rental_count
FROM 
    customer c
    JOIN customer_film_rentals cfr ON c.customer_id = cfr.customer_id;","This SQL query retrieves customers who have rented the same film more than once, listing their names, rented film titles, and the number of times they have rented each film. It first creates a common table expression (CTE) 'customer_film_rentals' that aggregates rental counts per customer and film, filtering for those with more than one rental. The final selection joins this result with the 'customer' table to include customer details. Potential modifications include adjusting the HAVING clause to analyze customers with any number of repeat rentals, filtering by rental date range to identify recent trends, or adding film categories to understand customer preferences in different genres. This query helps answer questions about customer loyalty, film popularity, and rental frequency patterns.",Are there any customers who have rented the same movie more than once?,Can you find customers who keep renting the same film multiple times?
"Which films have the highest replacement cost and are in the top 5 most rented categories? Show the film ID, title, replacement cost, and category name.","WITH top_categories AS (
    SELECT 
        fc.category_id, 
        COUNT(r.rental_id) AS rental_count
    FROM 
        film_category fc
        JOIN inventory i ON fc.film_id = i.film_id
        JOIN rental r ON i.inventory_id = r.inventory_id
    GROUP BY 
        fc.category_id
    ORDER BY 
        rental_count DESC
    LIMIT 5
),
top_films AS (
    SELECT 
        f.film_id, 
        f.title, 
        f.replacement_cost, 
        c.name AS category_name
    FROM 
        film f
        JOIN film_category fc ON f.film_id = fc.film_id
        JOIN category c ON fc.category_id = c.category_id
        JOIN top_categories tc ON fc.category_id = tc.category_id
    ORDER BY 
        f.replacement_cost DESC
)
SELECT * FROM top_films;","This SQL query identifies the top 5 most rented film categories and retrieves the most expensive films within those categories. It first creates a common table expression (CTE) 'top_categories' to rank film categories based on rental frequency. Another CTE, 'top_films', filters films belonging to these top categories and selects the most expensive ones by replacement cost. The final result includes film titles, their replacement costs, and corresponding category names. Possible modifications include adjusting the LIMIT value to analyze a broader range of categories, incorporating rental revenue data to prioritize high-earning films, or filtering by rental date ranges to capture recent trends. This query helps answer questions related to film category popularity, pricing strategy, and rental demand for premium films.",Which expensive-to-replace movies are also in the top five most popular categories?,Can you find out which high-replacement-cost films are in the five most rented genres?
Which actors have worked together in the most films? Show the pairs of actors and the number of films they've appeared in together.,"WITH actor_pairs AS (
    SELECT 
        fa1.actor_id AS actor1_id, 
        fa2.actor_id AS actor2_id, 
        COUNT(*) AS films_together
    FROM 
        film_actor fa1
        JOIN film_actor fa2 ON fa1.film_id = fa2.film_id
    WHERE 
        fa1.actor_id < fa2.actor_id
    GROUP BY 
        fa1.actor_id, fa2.actor_id
    ORDER BY 
        films_together DESC
)
SELECT 
    a1.first_name AS actor1_first_name, 
    a1.last_name AS actor1_last_name, 
    a2.first_name AS actor2_first_name, 
    a2.last_name AS actor2_last_name, 
    ap.films_together
FROM 
    actor_pairs ap
    JOIN actor a1 ON ap.actor1_id = a1.actor_id
    JOIN actor a2 ON ap.actor2_id = a2.actor_id;","This SQL query identifies actor pairs who have co-starred in the most films together. It first creates a common table expression (CTE) 'actor_pairs' that joins the 'film_actor' table to find actor pairs who have appeared in the same films, ensuring unique pairings by enforcing 'actor_id < actor_id'. The results are grouped by actor pairs and sorted in descending order by the number of films they have co-starred in. The final query retrieves the actors' full names and their shared film count. Possible modifications include filtering by a specific film genre to see frequent co-stars in particular categories, limiting results to recent films by joining with a release date field, or incorporating additional actor metadata to analyze star pairings based on popularity. This query helps answer questions about frequent co-stars, industry collaborations, and potential casting synergies.",Which two actors have appeared in the most movies together?,Can you tell me which actor pair has worked together the most?
"Which films are in the top 10% of revenue-generating films? Show the film ID, title, and total revenue.","WITH film_revenue AS (
    SELECT 
        f.film_id, 
        f.title, 
        SUM(p.amount) AS total_revenue
    FROM 
        film f
        JOIN inventory i ON f.film_id = i.film_id
        JOIN rental r ON i.inventory_id = r.inventory_id
        JOIN payment p ON r.rental_id = p.rental_id
    GROUP BY 
        f.film_id
),
top_10_percent AS (
    SELECT 
        film_id, 
        title, 
        total_revenue, 
        PERCENT_RANK() OVER (ORDER BY total_revenue DESC) AS pct_rank
    FROM 
        film_revenue
)
SELECT 
    film_id, 
    title, 
    total_revenue
FROM 
    top_10_percent
WHERE 
    pct_rank <= 0.1;","This SQL query identifies the top 10% highest-grossing films based on total revenue from customer payments. It first computes the total revenue per film using a CTE 'film_revenue', aggregating payments from the 'payment' table via joins with 'rental', 'inventory', and 'film' tables. A second CTE, 'top_10_percent', assigns a percentile rank to each film based on descending revenue using the PERCENT_RANK() window function. The final selection filters for films in the top 10% by revenue. Possible modifications include adjusting the percentile threshold for different ranking levels, incorporating genre information by joining the 'film_category' table, or analyzing revenue trends over time by grouping payments by year or quarter. This query helps answer questions about top-performing films, revenue distribution, and trends in customer preferences.",Which movies are among the top 10% highest earners?,"Can you list the films that make the most money, ranked in the top 10%?"
"Which customers have rented every film in a specific category (e.g., 'Action')? Show the customer ID, first name, and last name.","WITH action_films AS (
    SELECT 
        fc.film_id
    FROM 
        film_category fc
        JOIN category c ON fc.category_id = c.category_id
    WHERE 
        c.name = 'Action'
),
customer_rentals AS (
    SELECT 
        r.customer_id, 
        COUNT(DISTINCT i.film_id) AS films_rented
    FROM 
        rental r
        JOIN inventory i ON r.inventory_id = i.inventory_id
        JOIN action_films af ON i.film_id = af.film_id
    GROUP BY 
        r.customer_id
)
SELECT 
    c.customer_id, 
    c.first_name, 
    c.last_name
FROM 
    customer c
    JOIN customer_rentals cr ON c.customer_id = cr.customer_id
WHERE 
    cr.films_rented = (SELECT COUNT(*) FROM action_films);","This SQL query identifies customers who have rented every available 'Action' film. It first creates a CTE 'action_films' to retrieve all film IDs classified under the 'Action' category from the 'film_category' and 'category' tables. Another CTE, 'customer_rentals', counts the distinct 'Action' films rented by each customer using joins with the 'rental' and 'inventory' tables. The final selection filters for customers whose rental count matches the total number of 'Action' films, ensuring only those who have rented every 'Action' film are included in the output. Possible modifications include filtering for different genres, analyzing rental trends over time by incorporating rental dates, or ranking customers based on the percentage of action films they have rented instead of an exact match. This query helps answer questions about highly engaged customers, genre-based rental behaviors, and potential marketing opportunities for loyal renters.",Are there any customers who have rented every single movie in a specific genre?,Can you check if any customers have watched all the films in the Action category?
"Which films have the highest average rental duration per customer? Show the film ID, title, and average rental duration.","WITH film_rental_duration AS (
    SELECT 
        f.film_id, 
        f.title, 
        AVG(DATEDIFF(r.return_date, r.rental_date)) AS avg_rental_duration
    FROM 
        film f
        JOIN inventory i ON f.film_id = i.film_id
        JOIN rental r ON i.inventory_id = r.inventory_id
    GROUP BY 
        f.film_id
)
SELECT 
    film_id, 
    title, 
    avg_rental_duration
FROM 
    film_rental_duration
ORDER BY 
    avg_rental_duration DESC
LIMIT 10;","This SQL query identifies the top 10 films with the longest average rental duration. It first calculates the average rental duration for each film by computing the difference between 'return_date' and 'rental_date' using the 'rental', 'inventory', and 'film' tables. The results are grouped by film ID and title, then ordered in descending order of average rental duration. The final selection retrieves the top 10 films with the highest values. Potential modifications include filtering by specific genres by joining with the 'film_category' table, analyzing rental duration trends over time by incorporating rental dates, or segmenting results by customer demographics to understand rental behaviors. This query helps answer questions related to film popularity in terms of rental retention, customer engagement with longer rentals, and inventory management strategies.",Which movies are rented for the longest time on average?,Can you find the films that customers keep the longest before returning?
"Which staff members have processed the most payments, and what is the total amount they've processed? Show the staff ID, first name, last name, and total amount.","SELECT 
    s.staff_id, 
    s.first_name, 
    s.last_name, 
    COUNT(p.payment_id) AS total_payments, 
    SUM(p.amount) AS total_amount
FROM 
    staff s
    JOIN payment p ON s.staff_id = p.staff_id
GROUP BY 
    s.staff_id
ORDER BY 
    total_amount DESC;","This SQL query retrieves payment performance metrics for each staff member by calculating the total number of payments processed and the total revenue collected. It joins the 'staff' and 'payment' tables using 'staff_id', then groups results by staff ID while aggregating the total number of transactions and the total payment amount per staff member. The output is ordered in descending order of total revenue collected. Possible modifications include filtering by date range to analyze performance trends over time, segmenting by store location if multiple stores exist, or incorporating customer demographics to assess payment trends by staff interactions. This query can help answer questions about staff efficiency in handling transactions, revenue contribution per staff member, and potential training needs based on performance.","Which employees have handled the most payments, and how much have they processed?",Can you show me which staff members process the most transactions and their total revenue?
"Which films have never been rented but are in the top 5 most popular categories? Show the film ID, title, and category name.","WITH top_categories AS (
    SELECT 
        fc.category_id, 
        COUNT(r.rental_id) AS rental_count
    FROM 
        film_category fc
        JOIN inventory i ON fc.film_id = i.film_id
        JOIN rental r ON i.inventory_id = r.inventory_id
    GROUP BY 
        fc.category_id
    ORDER BY 
        rental_count DESC
    LIMIT 5
),
never_rented_films AS (
    SELECT 
        f.film_id, 
        f.title, 
        c.name AS category_name
    FROM 
        film f
        JOIN film_category fc ON f.film_id = fc.film_id
        JOIN category c ON fc.category_id = c.category_id
        LEFT JOIN inventory i ON f.film_id = i.film_id
        LEFT JOIN rental r ON i.inventory_id = r.inventory_id
    WHERE 
        r.rental_id IS NULL
)
SELECT 
    nrf.film_id, 
    nrf.title, 
    nrf.category_name
FROM 
    never_rented_films nrf
    JOIN top_categories tc ON nrf.category_name = tc.category_id;","This SQL query identifies films that have never been rented within the top 5 most rented categories. It first determines the top 5 categories by rental count using the 'film_category', 'inventory', and 'rental' tables, ranking them in descending order of rentals. Then, it retrieves films that have never been rented by checking for missing rental records in the 'rental' table while joining with 'film', 'film_category', and 'category'. Finally, it filters these never-rented films to include only those belonging to the top 5 most rented categories. Potential modifications include adjusting the category ranking limit to analyze a broader range of categories, incorporating rental trends over time to track seasonal demand, or joining with customer demographics to explore audience preferences. This query helps answer questions related to inventory optimization, potential marketing efforts for underperforming films, and category-specific rental patterns.",Are there any movies in the most popular genres that have never been rented?,Can you find films that belong to the top 5 categories but have never been rented?
"Which customers have rented films from all categories? Show the customer ID, first name, and last name.","WITH customer_categories AS (
    SELECT 
        r.customer_id, 
        COUNT(DISTINCT fc.category_id) AS category_count
    FROM 
        rental r
        JOIN inventory i ON r.inventory_id = i.inventory_id
        JOIN film_category fc ON i.film_id = fc.film_id
    GROUP BY 
        r.customer_id
)
SELECT 
    c.customer_id, 
    c.first_name, 
    c.last_name
FROM 
    customer c
    JOIN customer_categories cc ON c.customer_id = cc.customer_id
WHERE 
    cc.category_count = (SELECT COUNT(*) FROM category);","This SQL query identifies customers who have rented films from every available category. It first calculates the number of distinct film categories each customer has rented from using the 'rental', 'inventory', and 'film_category' tables. Then, it filters customers whose category count matches the total number of available categories, ensuring only those who have rented across all categories are included. The final output consists of customer IDs, first names, and last names, which can be useful for analyzing highly engaged customers or tailoring loyalty programs. Potential modifications include adjusting the query to find customers who have rented from a minimum threshold of categories rather than all, tracking rental patterns over time to analyze changes in customer preferences, or incorporating rental frequency to differentiate occasional renters from frequent customers. This query helps answer questions related to customer engagement, cross-category rental behavior, and targeted marketing strategies.",Are there any customers who have rented movies from every genre?,Can you find customers who have watched at least one movie from all available categories?
"Which films have the highest revenue per day of rental? Show the film ID, title, and revenue per day.","WITH film_revenue_per_day AS (
    SELECT 
        f.film_id, 
        f.title, 
        SUM(p.amount) / SUM(DATEDIFF(r.return_date, r.rental_date)) AS revenue_per_day
    FROM 
        film f
        JOIN inventory i ON f.film_id = i.film_id
        JOIN rental r ON i.inventory_id = r.inventory_id
        JOIN payment p ON r.rental_id = p.rental_id
    GROUP BY 
        f.film_id
)
SELECT 
    film_id, 
    title, 
    revenue_per_day
FROM 
    film_revenue_per_day
ORDER BY 
    revenue_per_day DESC
LIMIT 10;","This SQL query calculates the revenue generated per rental day for each film and retrieves the top 10 highest-earning films based on this metric. It derives revenue per day by summing payment amounts and dividing by the total rental duration, using the 'film', 'inventory', 'rental', and 'payment' tables. The results are grouped by film ID, ordered by revenue per day in descending order, and limited to the top 10. This query is useful for identifying the most profitable films on a per-day basis, which can inform pricing strategies and inventory management. Potential modifications include filtering by a specific time period to analyze recent trends, incorporating rental counts to compare revenue per day with rental volume, or adding film categories to see which genres contribute the most to revenue efficiency. Analysts may use this query to answer questions about film profitability, rental efficiency, and the impact of pricing strategies.",Which movies make the most money per day when rented?,Can you list the films that generate the highest revenue per rental day?
"Which films have the longest and shortest rental durations in each category? Show the category name, film title, and rental duration.","WITH film_durations AS (
    SELECT 
        c.name AS category_name, 
        f.title, 
        f.rental_duration,
        RANK() OVER (PARTITION BY c.name ORDER BY f.rental_duration DESC) AS longest_rank,
        RANK() OVER (PARTITION BY c.name ORDER BY f.rental_duration ASC) AS shortest_rank
    FROM 
        film f
        JOIN film_category fc ON f.film_id = fc.film_id
        JOIN category c ON fc.category_id = c.category_id
)
SELECT 
    category_name, 
    title, 
    rental_duration
FROM 
    film_durations
WHERE 
    longest_rank = 1 OR shortest_rank = 1
ORDER BY 
    category_name, rental_duration DESC;","This SQL query identifies the films with the longest and shortest rental durations within each category. It utilizes the 'film', 'film_category', and 'category' tables and employs window functions (RANK()) to rank films by rental duration in descending and ascending order for each category. The results filter only the top-ranked (longest and shortest) films per category and are sorted by category name and rental duration. This query is useful for understanding rental duration trends across different film categories, which can inform inventory planning and pricing strategies. Potential modifications include adding rental frequency metrics to analyze whether longer or shorter rental durations correlate with higher rentals, filtering by specific time periods to track changes in rental duration preferences over time, or incorporating customer demographics to assess preferences by audience segments. Analysts may use this query to explore category-based rental patterns, identify extreme rental durations, and evaluate the impact of rental policies.",Can you find the longest and shortest rental period movies for each genre?,Which films in each category are rented for the longest and shortest time?
"Which customers have rented films from exactly 2 categories? Show the customer ID, first name, last name, and the categories they've rented from.","WITH customer_categories AS (
    SELECT 
        r.customer_id, 
        c.name AS category_name
    FROM 
        rental r
        JOIN inventory i ON r.inventory_id = i.inventory_id
        JOIN film_category fc ON i.film_id = fc.film_id
        JOIN category c ON fc.category_id = c.category_id
    GROUP BY 
        r.customer_id, c.name
)
SELECT 
    cc.customer_id, 
    cu.first_name, 
    cu.last_name, 
    GROUP_CONCAT(cc.category_name ORDER BY cc.category_name) AS categories
FROM 
    customer_categories cc
    JOIN customer cu ON cc.customer_id = cu.customer_id
GROUP BY 
    cc.customer_id
HAVING 
    COUNT(cc.category_name) = 2;","This SQL query identifies customers who have rented films from exactly two distinct categories. It utilizes the 'rental', 'inventory', 'film_category', and 'category' tables to associate customers with film categories based on rental history. The query employs GROUP_CONCAT() to concatenate category names per customer and filters the results using HAVING COUNT(category_name) = 2 to retain only those with rentals spanning two categories. The output includes customer details and their rented categories, providing insights into customer preferences. Potential modifications include adjusting the category count filter to analyze customers with broader or narrower genre preferences, incorporating rental frequency metrics to highlight customers with consistent rental patterns, or joining payment data to assess revenue contributions from multi-category renters. Analysts can leverage this query to understand cross-category rental behavior, segment customers by rental diversity, and refine marketing strategies for targeted promotions.",Are there any customers who have only rented movies from two different categories?,Can you find customers who have explored exactly two genres?
"Which films have been rented more than the average number of rentals for their category? Show the film ID, title, category name, and rental count.","WITH category_rentals AS (
    SELECT 
        fc.category_id, 
        f.film_id, 
        f.title, 
        COUNT(r.rental_id) AS rental_count,
        AVG(COUNT(r.rental_id)) OVER (PARTITION BY fc.category_id) AS avg_rentals_per_category
    FROM 
        film f
        JOIN film_category fc ON f.film_id = fc.film_id
        JOIN inventory i ON f.film_id = i.film_id
        JOIN rental r ON i.inventory_id = r.inventory_id
    GROUP BY 
        fc.category_id, f.film_id
)
SELECT 
    film_id, 
    title, 
    c.name AS category_name, 
    rental_count
FROM 
    category_rentals cr
    JOIN category c ON cr.category_id = c.category_id
WHERE 
    rental_count > avg_rentals_per_category;","This SQL query identifies films that have been rented more frequently than the average rental count within their respective categories. It utilizes the 'film', 'film_category', 'inventory', 'rental', and 'category' tables to count rentals per film, compute the average rentals per category using a window function, and filter films with above-average rentals. The final output includes the film ID, title, category name, and rental count, offering insights into high-performing films within each category. Potential modifications include adjusting the threshold for selection (e.g., identifying top 10% most-rented films per category), incorporating revenue data to analyze financial performance alongside rental popularity, or expanding the query to evaluate rental trends over time. Analysts can use this query to determine which films drive engagement, optimize inventory stocking, and refine marketing efforts based on rental demand patterns.",Which movies are rented more often than the average for their genre?,Can you find the films that are more popular than the typical movie in their category?
"Which actors have never appeared in a film with a rating of 'R'? Show the actor ID, first name, and last name.","SELECT 
    a.actor_id, 
    a.first_name, 
    a.last_name
FROM 
    actor a
WHERE 
    NOT EXISTS (
        SELECT 1
        FROM film_actor fa
        JOIN film f ON fa.film_id = f.film_id
        WHERE fa.actor_id = a.actor_id AND f.rating = 'R'
    );","This SQL query retrieves a list of actors who have never appeared in an 'R'-rated film. It utilizes the 'actor', 'film_actor', and 'film' tables, employing a NOT EXISTS subquery to exclude actors associated with films that have an 'R' rating. The result includes the actor ID, first name, and last name, offering insights into actors who have exclusively worked in less restrictive film categories. Potential modifications include adjusting the rating filter to analyze actors by other MPAA ratings, identifying actors who have only appeared in a specific genre by joining with the 'film_category' table, or incorporating rental data to assess the popularity of these actors’ films. This query can help analysts study trends in casting choices, assess actors' suitability for family-friendly productions, or explore correlations between rating preferences and box office performance.",Are there any actors who have never acted in an R-rated movie?,Can you list the actors who have only worked in non-R-rated films?
"Which films have the highest replacement cost but have never been rented? Show the film ID, title, and replacement cost.","SELECT 
    f.film_id, 
    f.title, 
    f.replacement_cost
FROM 
    film f
    LEFT JOIN inventory i ON f.film_id = i.film_id
    LEFT JOIN rental r ON i.inventory_id = r.inventory_id
WHERE 
    r.rental_id IS NULL
ORDER BY 
    f.replacement_cost DESC
LIMIT 10;","This SQL query identifies the ten most expensive films (by replacement cost) that have never been rented. It retrieves film details from the 'film' table and performs LEFT JOINs with 'inventory' and 'rental' tables to check for rental activity. The NULL filter on 'rental_id' ensures that only films without any recorded rentals are included. Results are ordered by 'replacement_cost' in descending order and limited to the top 10. Potential modifications include adjusting the LIMIT value to analyze a broader set of films, filtering by specific categories by joining with the 'film_category' table, or incorporating last rental dates to identify films that have not been rented in a long time rather than never rented at all. This query can help inventory managers assess underperforming assets, optimize film selections, or determine pricing strategies for seldom-rented titles.",Are there expensive movies that have never been rented?,Can you find films with a high replacement cost that no one has ever rented?
"Which customers have rented films from all stores? Show the customer ID, first name, and last name.","WITH customer_stores AS (
    SELECT 
        r.customer_id, 
        COUNT(DISTINCT i.store_id) AS store_count
    FROM 
        rental r
        JOIN inventory i ON r.inventory_id = i.inventory_id
    GROUP BY 
        r.customer_id
)
SELECT 
    c.customer_id, 
    c.first_name, 
    c.last_name
FROM 
    customer c
    JOIN customer_stores cs ON c.customer_id = cs.customer_id
WHERE 
    cs.store_count = (SELECT COUNT(*) FROM store);","This SQL query identifies customers who have rented movies from all available stores. It first creates a temporary table ('customer_stores') that counts the number of distinct stores each customer has rented from by joining the 'rental' and 'inventory' tables. The final selection retrieves customer details from the 'customer' table for those whose 'store_count' matches the total number of stores from the 'store' table. Potential modifications include adjusting the filter to find customers who have rented from a specific minimum number of stores, incorporating rental frequency to analyze high-value customers, or adding time constraints to track multi-store renters within a given period. This query can help businesses understand customer engagement across multiple locations, identify loyal customers, or inform marketing strategies targeting multi-location renters.",Are there any customers who have rented from every store location?,Can you find customers who have rented movies from all available stores?
"Which films have been rented in all stores? Show the film ID, title, and the number of stores it was rented in.","WITH film_stores AS (
    SELECT 
        f.film_id, 
        f.title, 
        COUNT(DISTINCT i.store_id) AS store_count
    FROM 
        film f
        JOIN inventory i ON f.film_id = i.film_id
        JOIN rental r ON i.inventory_id = r.inventory_id
    GROUP BY 
        f.film_id
)
SELECT 
    film_id, 
    title, 
    store_count
FROM 
    film_stores
WHERE 
    store_count = (SELECT COUNT(*) FROM store);","This SQL query identifies films that have been rented from all available store locations. It first constructs a temporary table ('film_stores') that calculates the number of distinct stores each film has been rented from by joining the 'film', 'inventory', and 'rental' tables. The final selection retrieves films where the 'store_count' matches the total number of stores from the 'store' table. Potential modifications include adjusting the filter to find films available in a specific minimum number of stores, incorporating rental frequency to highlight the most rented films across all locations, or adding a time filter to track recent distribution patterns. This query helps businesses assess film availability, optimize inventory distribution, and identify popular films across multiple locations.",Are there any movies that have been rented in every single store?,Can you list the films that have been rented at all store locations?
"Which films have the highest revenue per minute of runtime? Show the film ID, title, runtime, and revenue per minute.","WITH film_revenue AS (
    SELECT 
        f.film_id, 
        f.title, 
        f.length, 
        SUM(p.amount) AS total_revenue
    FROM 
        film f
        JOIN inventory i ON f.film_id = i.film_id
        JOIN rental r ON i.inventory_id = r.inventory_id
        JOIN payment p ON r.rental_id = p.rental_id
    GROUP BY 
        f.film_id
)
SELECT 
    film_id, 
    title, 
    length, 
    total_revenue / length AS revenue_per_minute
FROM 
    film_revenue
ORDER BY 
    revenue_per_minute DESC
LIMIT 10;","This SQL query identifies the top 10 films generating the highest revenue per minute of runtime. It first calculates total revenue per film by summing payments from the 'payment' table, linking through the 'rental' and 'inventory' tables to the 'film' table. The final selection computes revenue per minute by dividing total revenue by film length and sorts the results in descending order. Potential modifications include filtering by genre or release year to analyze trends, adjusting the ranking threshold to highlight underperforming films, or incorporating rental counts to compare profitability based on demand. This query is useful for evaluating film profitability, optimizing pricing strategies, and identifying high-value films based on rental revenue efficiency.",Which movies make the most money per minute of screen time?,Can you find films that generate the highest revenue per minute?
"Which customers have rented films from every actor in a specific film (e.g., film_id = 1)? Show the customer ID, first name, and last name.","WITH film_actors AS (
    SELECT 
        fa.actor_id
    FROM 
        film_actor fa
    WHERE 
        fa.film_id = 1
),
customer_actors AS (
    SELECT 
        r.customer_id, 
        COUNT(DISTINCT fa.actor_id) AS actor_count
    FROM 
        rental r
        JOIN inventory i ON r.inventory_id = i.inventory_id
        JOIN film_actor fa ON i.film_id = fa.film_id
    WHERE 
        fa.actor_id IN (SELECT actor_id FROM film_actors)
    GROUP BY 
        r.customer_id
)
SELECT 
    c.customer_id, 
    c.first_name, 
    c.last_name
FROM 
    customer c
    JOIN customer_actors ca ON c.customer_id = ca.customer_id
WHERE 
    ca.actor_count = (SELECT COUNT(*) FROM film_actors);","This SQL query identifies customers who have rented films featuring all actors from a specific film (film_id = 1). It first extracts the actors associated with the given film from the 'film_actor' table. Then, it calculates how many of those actors appear in the films rented by each customer using a join between 'rental', 'inventory', and 'film_actor'. The final selection filters customers who have rented films with every actor from the target film. Possible modifications include changing the reference film to analyze different actor combinations, adding rental timestamps to track customer behavior over time, or incorporating genre data to identify customer preferences. This query is useful for customer segmentation, targeted marketing based on actor preferences, and analyzing viewing patterns related to specific casts.",Are there any customers who have rented at least one movie from every actor in a certain film?,Can you check if someone has watched films starring every actor from a specific movie?
"Which films have the highest number of actors but have never been rented? Show the film ID, title, and number of actors.","WITH film_actor_counts AS (
    SELECT 
        f.film_id, 
        f.title, 
        COUNT(fa.actor_id) AS actor_count
    FROM 
        film f
        JOIN film_actor fa ON f.film_id = fa.film_id
        LEFT JOIN inventory i ON f.film_id = i.film_id
        LEFT JOIN rental r ON i.inventory_id = r.inventory_id
    WHERE 
        r.rental_id IS NULL
    GROUP BY 
        f.film_id
)
SELECT 
    film_id, 
    title, 
    actor_count
FROM 
    film_actor_counts
ORDER BY 
    actor_count DESC
LIMIT 10;","This SQL query identifies the top 10 unrented films with the highest number of actors. It first counts the number of actors associated with each film using the 'film' and 'film_actor' tables. The query then performs left joins with 'inventory' and 'rental' to filter out any films that have been rented (i.e., where 'rental_id' is NULL). The results are ordered by actor count in descending order, showing films that feature the most actors but have never been rented. Possible modifications include adjusting the filter to show films with low but nonzero rentals, incorporating genre data to analyze trends in specific categories, or adding release dates to examine whether newer films are underperforming. This query can help with inventory decisions, marketing strategies for underperforming films, and actor-based analysis of rental patterns.",Are there movies with large casts that have never been rented?,Can you find films with the most actors that no one has ever rented?
Which movies have the longest runtime but have never been rented? Show the movie title and runtime.,"SELECT 
    f.title, 
    f.length AS runtime
FROM 
    film f
    LEFT JOIN inventory i ON f.film_id = i.film_id
    LEFT JOIN rental r ON i.inventory_id = r.inventory_id
WHERE 
    r.rental_id IS NULL
ORDER BY 
    f.length DESC
LIMIT 10;","This SQL query retrieves the 10 longest films that have never been rented. It uses the 'film' table and performs left joins with 'inventory' and 'rental' to identify films where 'rental_id' is NULL, indicating no rentals. The results are ordered by film length in descending order to highlight the longest unrented films. Possible modifications include adjusting the filter to find films with low rental counts rather than zero, incorporating genre data to determine if certain types of films are underperforming, or analyzing rental trends over time by adding rental timestamps. This query can help identify films that may need better marketing, removal from inventory, or reassessment for availability in stores.",Are there any long movies that no one has ever rented?,Can you list the longest films that have never been watched?
Which customers have rented the most movies in a single day? Show the customer name and the number of movies rented on that day.,"WITH customer_daily_rentals AS (
    SELECT 
        c.customer_id, 
        CONCAT(c.first_name, ' ', c.last_name) AS customer_name, 
        DATE(r.rental_date) AS rental_day, 
        COUNT(r.rental_id) AS rentals_count
    FROM 
        customer c
        JOIN rental r ON c.customer_id = r.customer_id
    GROUP BY 
        c.customer_id, rental_day
)
SELECT 
    customer_name, 
    rentals_count
FROM 
    customer_daily_rentals
ORDER BY 
    rentals_count DESC
LIMIT 10;","This SQL query identifies the top 10 customers with the highest number of rentals on a single day. It retrieves rental data from the 'rental' table, joining it with the 'customer' table, and groups results by customer and rental date. The query then calculates the total rentals per customer per day and orders the results in descending order based on daily rental count. The expected output provides insight into high-frequency renters, which can be useful for customer loyalty analysis or targeted promotions. Possible modifications include filtering by a specific date range to analyze seasonal trends, grouping results by month instead of day to observe broader rental behaviors, or incorporating payment data to analyze spending patterns among frequent renters.",Who rented the most movies on a single day?,Can you find the customer who rented the most movies in one day?
Which movies have been rented more than 10 times but have never been returned late? Show the movie title and number of rentals.,"SELECT 
    f.title, 
    COUNT(r.rental_id) AS rentals_count
FROM 
    film f
    JOIN inventory i ON f.film_id = i.film_id
    JOIN rental r ON i.inventory_id = r.inventory_id
WHERE 
    r.return_date <= r.rental_date + INTERVAL f.rental_duration DAY
GROUP BY 
    f.film_id
HAVING 
    COUNT(r.rental_id) > 10;","This SQL query identifies films that have been rented more than 10 times while being returned within the allocated rental duration. It retrieves data from the 'film', 'inventory', and 'rental' tables, filtering rentals where the return date does not exceed the rental duration. The query groups results by film ID and counts the number of rentals per film, applying a HAVING clause to include only films with more than 10 rentals. The output provides insights into popular films that are returned on time, which can be useful for inventory management and rental policy analysis. Possible modifications include adjusting the rental threshold to identify highly or rarely rented films, incorporating late returns to analyze overdue rentals, or filtering by a specific time period to examine seasonal trends in film popularity.",Are there any movies that have been rented over 10 times but always returned on time?,Can you list movies that have been rented a lot but never returned late?
Which staff members have processed the most payments on weekends? Show the staff name and the number of payments processed.,"SELECT 
    CONCAT(s.first_name, ' ', s.last_name) AS staff_name, 
    COUNT(p.payment_id) AS payments_count
FROM 
    staff s
    JOIN payment p ON s.staff_id = p.staff_id
WHERE 
    DAYOFWEEK(p.payment_date) IN (1, 7) -- 1 = Sunday, 7 = Saturday
GROUP BY 
    s.staff_id
ORDER BY 
    payments_count DESC
LIMIT 10;","This SQL query retrieves the top 10 staff members who processed the highest number of payments on weekends (Saturday and Sunday). It queries the 'staff' and 'payment' tables, joining them on 'staff_id', and filters transactions occurring on weekends using the DAYOFWEEK function. The query then groups results by staff member, counting the number of payments processed per staff, and orders them in descending order of payment count. The output provides insights into weekend workload distribution among staff, which could inform staffing decisions and scheduling. Possible modifications include adjusting the filter to analyze payments on weekdays, adding a date range filter to focus on a specific time period, or incorporating total payment amounts to evaluate staff performance based on revenue generated rather than transaction count.""",Which employees handle the most payments on Saturdays and Sundays?,Can you find out which staff members process the most weekend transactions?
"Which movies have the highest revenue but the lowest rental rate? Show the movie title, rental rate, and total revenue.
sql
","WITH film_revenue AS (
    SELECT 
        f.film_id, 
        f.title, 
        f.rental_rate, 
        SUM(p.amount) AS total_revenue
    FROM 
        film f
        JOIN inventory i ON f.film_id = i.film_id
        JOIN rental r ON i.inventory_id = r.inventory_id
        JOIN payment p ON r.rental_id = p.rental_id
    GROUP BY 
        f.film_id
)
SELECT 
    title, 
    rental_rate, 
    total_revenue
FROM 
    film_revenue
ORDER BY 
    total_revenue DESC, rental_rate ASC
LIMIT 10;","This SQL query retrieves the top 10 films that generated the highest total revenue, ordered by revenue in descending order and rental rate in ascending order for tie-breaking. It uses the 'film', 'inventory', 'rental', and 'payment' tables, joining them on relevant keys to calculate total revenue per film by summing the 'amount' field from 'payment'. The query also includes each film's rental rate for additional context. This output helps in identifying the most profitable films, aiding in business decisions such as pricing strategies and inventory management. Potential modifications include filtering results by a specific time period to analyze revenue trends, adding a genre-based breakdown to assess profitability by category, or incorporating rental frequency to determine if high revenue films also have high rental counts.",Are there any movies that make a lot of money but have a low rental price?,Can you find films with high revenue despite having a cheap rental rate?
Which customers have rented movies from every store but have never rented a movie with a rating of 'R'? Show the customer name.,"WITH customer_stores AS (
    SELECT 
        c.customer_id, 
        CONCAT(c.first_name, ' ', c.last_name) AS customer_name, 
        COUNT(DISTINCT i.store_id) AS store_count
    FROM 
        customer c
        JOIN rental r ON c.customer_id = r.customer_id
        JOIN inventory i ON r.inventory_id = i.inventory_id
    GROUP BY 
        c.customer_id
),
customer_no_r_ratings AS (
    SELECT 
        c.customer_id
    FROM 
        customer c
    WHERE 
        NOT EXISTS (
            SELECT 1
            FROM rental r
            JOIN inventory i ON r.inventory_id = i.inventory_id
            JOIN film f ON i.film_id = f.film_id
            WHERE r.customer_id = c.customer_id AND f.rating = 'R'
        )
)
SELECT 
    cs.customer_name
FROM 
    customer_stores cs
    JOIN customer_no_r_ratings cnr ON cs.customer_id = cnr.customer_id
WHERE 
    cs.store_count = (SELECT COUNT(*) FROM store);","This SQL query identifies customers who have rented from all available stores and have never rented a film with an 'R' rating. It utilizes the 'customer', 'rental', 'inventory', 'film', and 'store' tables, employing common table expressions (CTEs) to calculate the number of distinct stores each customer has rented from and to filter out customers who have rented 'R'-rated films. The final result lists customers who meet both conditions. This query is useful for understanding customer rental behavior and identifying family-friendly renters. Possible modifications include adjusting the rating filter to analyze customer preferences for specific film ratings, segmenting results by rental frequency to identify high-value customers, or adding a time filter to focus on recent rental activity.",Are there any customers who have rented from all stores but never watched an R-rated movie?,Can you find people who have rented movies from every store but avoided R-rated films?
Which movies have been rented by customers from more than 5 different cities? Show the movie title and the number of cities.,"WITH movie_city_rentals AS (
    SELECT 
        f.title, 
        COUNT(DISTINCT ci.city_id) AS city_count
    FROM 
        film f
        JOIN inventory i ON f.film_id = i.film_id
        JOIN rental r ON i.inventory_id = r.inventory_id
        JOIN customer c ON r.customer_id = c.customer_id
        JOIN address a ON c.address_id = a.address_id
        JOIN city ci ON a.city_id = ci.city_id
    GROUP BY 
        f.film_id
)
SELECT 
    title, 
    city_count
FROM 
    movie_city_rentals
WHERE 
    city_count > 5;","This SQL query identifies films that have been rented in more than five distinct cities, helping analyze the geographical reach and popularity of films. It utilizes the 'film', 'inventory', 'rental', 'customer', 'address', and 'city' tables, using joins to track rental activity across cities. The query aggregates the count of unique cities per film and filters results to include only those rented in more than five cities. This query is useful for understanding film demand distribution across locations. Potential modifications include adjusting the city threshold to analyze varying levels of popularity, incorporating revenue metrics to assess profitability by region, or adding a time filter to focus on recent rental trends.",Which films have been rented by people from more than five different cities?,Can you find movies that are popular across multiple cities?
Which movies have the highest number of actors but have never been rented? Show the movie title and number of actors.,"WITH film_actor_counts AS (
    SELECT 
        f.film_id, 
        f.title, 
        COUNT(fa.actor_id) AS actor_count
    FROM 
        film f
        JOIN film_actor fa ON f.film_id = fa.film_id
        LEFT JOIN inventory i ON f.film_id = i.film_id
        LEFT JOIN rental r ON i.inventory_id = r.inventory_id
    WHERE 
        r.rental_id IS NULL
    GROUP BY 
        f.film_id
)
SELECT 
    title, 
    actor_count
FROM 
    film_actor_counts
ORDER BY 
    actor_count DESC
LIMIT 10;","This SQL query identifies the top 10 films that have never been rented, ranked by the number of actors associated with each film. It utilizes the 'film', 'film_actor', 'inventory', and 'rental' tables, employing joins to count actors for each film while filtering out those that have rental records. The main metric calculated is the count of actors per film, which is then sorted in descending order. This query is useful for understanding films with high-profile casts that have not yet been rented, aiding inventory and marketing decisions. Possible modifications include removing the rental exclusion condition to analyze all films, incorporating rental revenue metrics to compare actor count with financial performance, or adding genre-based filtering to explore trends within specific film categories.",Are there movies with a big cast that have never been rented?,Can you list films with the most actors that no one has ever rented?
"Which customers have rented the same movie more than once in a single month? Show the customer name, movie title, and the number of times rented.","WITH customer_movie_rentals AS (
    SELECT 
        c.customer_id, 
        CONCAT(c.first_name, ' ', c.last_name) AS customer_name, 
        f.title, 
        DATE_FORMAT(r.rental_date, '%Y-%m') AS rental_month, 
        COUNT(r.rental_id) AS rentals_count
    FROM 
        customer c
        JOIN rental r ON c.customer_id = r.customer_id
        JOIN inventory i ON r.inventory_id = i.inventory_id
        JOIN film f ON i.film_id = f.film_id
    GROUP BY 
        c.customer_id, f.film_id, rental_month
)
SELECT 
    customer_name, 
    title, 
    rentals_count
FROM 
    customer_movie_rentals
WHERE 
    rentals_count > 1;","This SQL query identifies customers who have rented the same movie more than once within a given month. It pulls data from the 'customer', 'rental', 'inventory', and 'film' tables, utilizing joins to associate rentals with customers and films. The key metric computed is the count of rentals per customer per film per month, using DATE_FORMAT to group by month. The final filter ensures only cases where a movie was rented more than once by the same customer within a month are included. This query helps analyze customer re-engagement with specific films, which could be useful for targeted promotions or understanding movie popularity trends. Potential modifications include adjusting the rental count threshold to study broader viewing patterns, filtering by specific movie genres to analyze genre-based rewatch behavior, or incorporating rental revenue data to examine financial impact.",Are there any customers who rented the same film multiple times in one month?,Can you find people who rented the same movie more than once in a month?
Which movies have been rented by customers from every country? Show the movie title and the number of countries.,"WITH movie_country_rentals AS (
    SELECT 
        f.title, 
        COUNT(DISTINCT co.country_id) AS country_count
    FROM 
        film f
        JOIN inventory i ON f.film_id = i.film_id
        JOIN rental r ON i.inventory_id = r.inventory_id
        JOIN customer c ON r.customer_id = c.customer_id
        JOIN address a ON c.address_id = a.address_id
        JOIN city ci ON a.city_id = ci.city_id
        JOIN country co ON ci.country_id = co.country_id
    GROUP BY 
        f.film_id
)
SELECT 
    title, 
    country_count
FROM 
    movie_country_rentals
WHERE 
    country_count = (SELECT COUNT(*) FROM country);","This SQL query identifies movies that have been rented in every available country by analyzing rental data across geographic locations. It pulls data from the 'film', 'inventory', 'rental', 'customer', 'address', 'city', and 'country' tables, using joins to link rentals to the countries where they occurred. The key metric computed is the number of distinct countries where each movie has been rented, and the final filter ensures that only movies rented in all countries are included. This query is useful for assessing global movie popularity and identifying films with universal appeal. Possible modifications include adjusting the threshold to find movies rented in a minimum number of countries, filtering by genre to analyze international genre performance, or incorporating rental revenue to examine global financial impact.",Are there any movies that have been rented by people from all countries?,Can you find out which films have been watched by customers from every country?
"Which movies have been rented the most during holidays (e.g., December)? Show the movie title and the number of rentals.","SELECT 
    f.title, 
    COUNT(r.rental_id) AS rentals_count
FROM 
    film f
    JOIN inventory i ON f.film_id = i.film_id
    JOIN rental r ON i.inventory_id = r.inventory_id
WHERE 
    MONTH(r.rental_date) = 12 -- December
GROUP BY 
    f.film_id
ORDER BY 
    rentals_count DESC
LIMIT 10;","This SQL query identifies the top 10 most rented movies in December by counting the number of rentals for each film. It retrieves data from the 'film', 'inventory', and 'rental' tables, filtering rentals to include only those made in December using the MONTH() function. The query aggregates rental counts per film, orders the results in descending order, and limits the output to the top 10. This analysis is useful for understanding seasonal rental trends and identifying popular holiday movies. Potential modifications include adjusting the month filter to analyze different periods, incorporating revenue data to determine the highest-grossing films, or segmenting results by customer demographics to explore audience preferences.",Which movies are the most popular during the holiday season?,Can you find the films that get rented the most in December?
Which customers have rented movies from every category but have never rented a movie with a replacement cost over $20? Show the customer name.,"WITH customer_categories AS (
    SELECT 
        c.customer_id, 
        CONCAT(c.first_name, ' ', c.last_name) AS customer_name, 
        COUNT(DISTINCT fc.category_id) AS category_count
    FROM 
        customer c
        JOIN rental r ON c.customer_id = r.customer_id
        JOIN inventory i ON r.inventory_id = i.inventory_id
        JOIN film_category fc ON i.film_id = fc.film_id
    GROUP BY 
        c.customer_id
),
customer_no_expensive_rentals AS (
    SELECT 
        c.customer_id
    FROM 
        customer c
    WHERE 
        NOT EXISTS (
            SELECT 1
            FROM rental r
            JOIN inventory i ON r.inventory_id = i.inventory_id
            JOIN film f ON i.film_id = f.film_id
            WHERE r.customer_id = c.customer_id AND f.replacement_cost > 20
        )
)
SELECT 
    cc.customer_name
FROM 
    customer_categories cc
    JOIN customer_no_expensive_rentals cne ON cc.customer_id = cne.customer_id
WHERE 
    cc.category_count = (SELECT COUNT(*) FROM category);","This SQL query identifies customers who have rented movies from every available category while never renting a movie with a replacement cost greater than $20. It uses the 'customer', 'rental', 'inventory', 'film_category', and 'film' tables, employing two CTEs: one to count the number of distinct categories each customer has rented from and another to filter out customers who have rented expensive films. The final result lists customers meeting both conditions. This query is useful for identifying budget-conscious but highly diverse renters. Possible modifications include adjusting the replacement cost threshold to analyze different spending behaviors, incorporating rental frequency to identify high-volume renters, or adding demographic data to explore patterns among customer segments.",Are there customers who have rented from all genres but avoided expensive movies?,Can you find people who have watched films from every category but never rented a movie that costs more than $20 to replace?
"Which movies have the highest number of rentals but the lowest replacement cost? Show the movie title, replacement cost, and number of rentals.","WITH film_rentals AS (
    SELECT 
        f.film_id, 
        f.title, 
        f.replacement_cost, 
        COUNT(r.rental_id) AS rentals_count
    FROM 
        film f
        JOIN inventory i ON f.film_id = i.film_id
        JOIN rental r ON i.inventory_id = r.inventory_id
    GROUP BY 
        f.film_id
)
SELECT 
    title, 
    replacement_cost, 
    rentals_count
FROM 
    film_rentals
ORDER BY 
    rentals_count DESC, replacement_cost ASC
LIMIT 10;","This SQL query retrieves the top 10 most rented films, prioritizing those with the highest rental counts and resolving ties by selecting the ones with the lowest replacement costs. It utilizes the 'film', 'inventory', and 'rental' tables, aggregating rental counts for each film and incorporating replacement cost as a secondary sorting criterion. The expected output provides insights into the most popular yet cost-effective films, which could inform inventory management and promotional strategies. Potential modifications include filtering by rental date range to analyze trends over time, adding genre information to identify category-specific popularity, or incorporating customer demographics to determine audience preferences.",Which films are rented the most but are also the cheapest to replace?,Can you find movies that are super popular but have a low replacement cost?
Which customers have rented movies from every store but have never rented a movie with a runtime over 2 hours? Show the customer name.,"WITH customer_stores AS (
    SELECT 
        c.customer_id, 
        CONCAT(c.first_name, ' ', c.last_name) AS customer_name, 
        COUNT(DISTINCT i.store_id) AS store_count
    FROM 
        customer c
        JOIN rental r ON c.customer_id = r.customer_id
        JOIN inventory i ON r.inventory_id = i.inventory_id
    GROUP BY 
        c.customer_id
),
customer_no_long_movies AS (
    SELECT 
        c.customer_id
    FROM 
        customer c
    WHERE 
        NOT EXISTS (
            SELECT 1
            FROM rental r
            JOIN inventory i ON r.inventory_id = i.inventory_id
            JOIN film f ON i.film_id = f.film_id
            WHERE r.customer_id = c.customer_id AND f.length > 120 -- 2 hours
        )
)
SELECT 
    cs.customer_name
FROM 
    customer_stores cs
    JOIN customer_no_long_movies cnl ON cs.customer_id = cnl.customer_id
WHERE 
    cs.store_count = (SELECT COUNT(*) FROM store);","This SQL query identifies customers who have rented movies from all available stores but have never rented a film longer than 2 hours. It leverages the 'customer', 'rental', 'inventory', 'film', and 'store' tables, using a common table expression (CTE) to calculate the number of unique stores each customer has rented from and another CTE to filter out customers who have rented long movies. The final result provides a list of such customers, which can be useful for targeted marketing campaigns or analyzing customer rental preferences. Potential modifications include adjusting the movie length threshold to study preferences for different movie durations, segmenting customers based on their rental frequency, or incorporating genre data to determine specific content preferences.",Are there any customers who have rented from all stores but never watched long movies?,Can you find people who have rented from every store but never rented a movie over 2 hours?
Which movies have been rented by customers from more than 10 different cities? Show the movie title and the number of cities.,"WITH movie_city_rentals AS (
    SELECT 
        f.title, 
        COUNT(DISTINCT ci.city_id) AS city_count
    FROM 
        film f
        JOIN inventory i ON f.film_id = i.film_id
        JOIN rental r ON i.inventory_id = r.inventory_id
        JOIN customer c ON r.customer_id = c.customer_id
        JOIN address a ON c.address_id = a.address_id
        JOIN city ci ON a.city_id = ci.city_id
    GROUP BY 
        f.film_id
)
SELECT 
    title, 
    city_count
FROM 
    movie_city_rentals
WHERE 
    city_count > 10;","This SQL query identifies movies that have been rented in more than 10 different cities. It utilizes the 'film', 'inventory', 'rental', 'customer', 'address', and 'city' tables, aggregating rental data at the city level using COUNT(DISTINCT ci.city_id). The result is a list of movie titles along with the number of unique cities where they have been rented, which can help in analyzing the geographic popularity of films. Possible modifications include adjusting the city count threshold to explore movies with varying levels of geographic reach, incorporating rental frequency per city to assess demand concentration, or filtering by genre to analyze regional preferences for specific types of movies.",Which movies are rented by people from more than ten cities?,Can you find out which films are popular across many cities?
Which movies have been rented the most by customers under the age of 25? Show the movie title and the number of rentals.,"WITH young_customer_rentals AS (
    SELECT 
        f.title, 
        COUNT(r.rental_id) AS rentals_count
    FROM 
        film f
        JOIN inventory i ON f.film_id = i.film_id
        JOIN rental r ON i.inventory_id = r.inventory_id
        JOIN customer c ON r.customer_id = c.customer_id
    WHERE 
        TIMESTAMPDIFF(YEAR, c.create_date, CURDATE()) < 25
    GROUP BY 
        f.film_id
)
SELECT 
    title, 
    rentals_count
FROM 
    young_customer_rentals
ORDER BY 
    rentals_count DESC
LIMIT 10;","This SQL query identifies the top 10 most rented movies among customers who have had an account for less than 25 years. It pulls data from the 'film', 'inventory', 'rental', and 'customer' tables, filtering customers based on their account creation date using TIMESTAMPDIFF(YEAR, c.create_date, CURDATE()) < 25. The query counts the number of rentals per film and orders the results in descending order of rental count. The output provides insight into the movie preferences of relatively new or younger customers. Potential modifications include adjusting the age threshold to analyze different customer cohorts, incorporating genre information to examine category-specific popularity, or extending the analysis to include rental frequency trends over time.",Which movies are the most popular among young customers under 25?,Can you show me the top films rented by people younger than 25?
Which movies have the highest revenue but have never been rented on weekends? Show the movie title and total revenue.,"WITH film_revenue AS (
    SELECT 
        f.film_id, 
        f.title, 
        SUM(p.amount) AS total_revenue
    FROM 
        film f
        JOIN inventory i ON f.film_id = i.film_id
        JOIN rental r ON i.inventory_id = r.inventory_id
        JOIN payment p ON r.rental_id = p.rental_id
    WHERE 
        DAYOFWEEK(r.rental_date) NOT IN (1, 7) -- Exclude weekends
    GROUP BY 
        f.film_id
)
SELECT 
    title, 
    total_revenue
FROM 
    film_revenue
ORDER BY 
    total_revenue DESC
LIMIT 10;","This SQL query identifies the top 10 highest-grossing films based on total revenue generated from payments, excluding rentals that occurred on weekends. It utilizes the 'film', 'inventory', 'rental', and 'payment' tables, summing payment amounts per film while filtering out transactions made on Saturdays and Sundays using DAYOFWEEK(r.rental_date) NOT IN (1, 7). The output highlights the most profitable movies during weekdays, which can be useful for understanding demand trends outside peak weekend periods. Potential modifications include analyzing revenue specifically for weekends to compare performance, incorporating customer demographics to identify key spending groups, or adjusting the date filter to study seasonal revenue trends.",Are there any high-earning movies that no one rents on weekends?,Can you find films that make a lot of money but are never rented on Saturdays or Sundays?
Which customers have rented movies from every category but have never rented a movie with a rating of 'PG-13'? Show the customer name.,"WITH customer_categories AS (
    SELECT 
        c.customer_id, 
        CONCAT(c.first_name, ' ', c.last_name) AS customer_name, 
        COUNT(DISTINCT fc.category_id) AS category_count
    FROM 
        customer c
        JOIN rental r ON c.customer_id = r.customer_id
        JOIN inventory i ON r.inventory_id = i.inventory_id
        JOIN film_category fc ON i.film_id = fc.film_id
    GROUP BY 
        c.customer_id
),
customer_no_pg13 AS (
    SELECT 
        c.customer_id
    FROM 
        customer c
    WHERE 
        NOT EXISTS (
            SELECT 1
            FROM rental r
            JOIN inventory i ON r.inventory_id = i.inventory_id
            JOIN film f ON i.film_id = f.film_id
            WHERE r.customer_id = c.customer_id AND f.rating = 'PG-13'
        )
)
SELECT 
    cc.customer_name
FROM 
    customer_categories cc
    JOIN customer_no_pg13 cnp ON cc.customer_id = cnp.customer_id
WHERE 
    cc.category_count = (SELECT COUNT(*) FROM category);","This SQL query identifies customers who have rented films from all available categories while never renting a movie with a 'PG-13' rating. It utilizes the 'customer', 'rental', 'inventory', 'film_category', and 'film' tables, counting the number of distinct film categories each customer has rented and filtering out customers who have rented at least one 'PG-13' film. The final result lists customers who have rented from every category without ever selecting a 'PG-13' film, which can be useful for understanding customer preferences and restrictions. Potential modifications include adjusting the rating filter to analyze customer behavior for other classifications, grouping results by customer demographics to identify patterns, or expanding the query to examine rental frequency in each category for deeper insights.",Are there customers who have rented from all categories but never watched a PG-13 movie?,Can you find people who have rented from every genre but avoided PG-13 films?
Which movies have been rented by customers from more than 5 different countries? Show the movie title and the number of countries.,"WITH movie_country_rentals AS (
    SELECT 
        f.title, 
        COUNT(DISTINCT co.country_id) AS country_count
    FROM 
        film f
        JOIN inventory i ON f.film_id = i.film_id
        JOIN rental r ON i.inventory_id = r.inventory_id
        JOIN customer c ON r.customer_id = c.customer_id
        JOIN address a ON c.address_id = a.address_id
        JOIN city ci ON a.city_id = ci.city_id
        JOIN country co ON ci.country_id = co.country_id
    GROUP BY 
        f.film_id
)
SELECT 
    title, 
    country_count
FROM 
    movie_country_rentals
WHERE 
    country_count > 5;","This SQL query identifies movies that have been rented in more than five distinct countries. It aggregates rental data from the 'film', 'inventory', 'rental', 'customer', 'address', 'city', and 'country' tables, counting the number of unique countries where each movie has been rented. The final output lists movie titles along with their rental country count, providing insight into globally popular films. Possible modifications include adjusting the country threshold to analyze more or fewer globally distributed films, filtering results by rental date ranges to track trends over time, or incorporating revenue data to evaluate the financial impact of international rentals.",Which films have been rented by people from at least five different countries?,Can you find movies that have been watched by customers from multiple countries?
Which movies have the highest number of rentals but have never been returned late? Show the movie title and number of rentals.,"SELECT 
    f.title, 
    COUNT(r.rental_id) AS rentals_count
FROM 
    film f
    JOIN inventory i ON f.film_id = i.film_id
    JOIN rental r ON i.inventory_id = r.inventory_id
WHERE 
    r.return_date <= r.rental_date + INTERVAL f.rental_duration DAY
GROUP BY 
    f.film_id
ORDER BY 
    rentals_count DESC
LIMIT 10;","This SQL query identifies the top 10 most frequently rented movies that were returned on time, based on their rental duration. It retrieves data from the 'film', 'inventory', and 'rental' tables, counting the number of rentals per movie while filtering for those returned within the allowed rental duration. The results are grouped by film and sorted in descending order of rental count. Possible modifications include adjusting the rental duration condition to analyze overdue rentals, incorporating customer data to identify frequent renters, or adding a time filter to observe trends in on-time returns over specific periods.",Are there movies that have been rented a lot but always returned on time?,Can you list the most rented films that have never been returned late?