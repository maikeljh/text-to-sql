Question,Answer,Summary,Alternative Prompt 1 (English),Alternative Prompt 2 (Bahasa Indonesia),Expected Result
"Which faculty has the most research projects? If there is a tie, show any of the tying faculty. Show the nama and total_proyek.","SELECT f.nama, COUNT(p.id_proyek) AS total_proyek
  FROM Fakultas f
  JOIN ProyekPenelitian p ON f.id_fakultas = p.id_fakultas
  GROUP BY f.nama
  ORDER BY total_proyek DESC
  LIMIT 1;","This SQL query identifies the faculty with the highest number of research projects by joining the 'Fakultas' (Faculty) and 'ProyekPenelitian' (Research Projects) tables. It counts projects per faculty and returns the faculty with the most projects, highlighting research activity distribution across faculties. The output helps academic institutions understand research productivity and allocate resources effectively. Key operations include a table JOIN, COUNT aggregation, and ORDER BY with LIMIT to identify the top faculty. The query can be modified to: 1) include time periods to analyze research trends, 2) add funding amounts to assess financial impact, or 3) filter by project status to focus on active research. It helps answer questions like 'Which faculty leads in research output?' and 'How should research funding be allocated across faculties?'",Can you tell me which faculty did the most research projects? I just need their name (nama) and the number of projects (total_proyek).,Fakultas mana yang paling banyak bikin proyek penelitian? Tampilkan nama (nama) dan jumlah proyeknya (total_proyek).,"['nama', 'total_proyek']"
"Which books have never been borrowed but belong to a category that has other book that has been borrowed at least three times? Show id_buku, judul, kategori.","SELECT b.id_buku, b.judul, b.kategori
  FROM BukuPerpustakaan b
  WHERE NOT EXISTS (
  SELECT 1 FROM PeminjamanBuku p WHERE p.id_buku = b.id_buku
  )
  AND EXISTS (
  SELECT 1 FROM BukuPerpustakaan b2
  JOIN PeminjamanBuku p2 ON p2.id_buku = b2.id_buku
  WHERE b2.kategori = b.kategori
  GROUP BY b2.kategori
  HAVING COUNT(*) > 3
  );","This query identifies books that have never been borrowed (NOT EXISTS) but belong to categories where other books have been borrowed multiple times (>3 loans). It examines the BukuPerpustakaan (books) and PeminjamanBuku (loans) tables, using two subqueries: one to find unborrowed books and another to verify active categories. The output shows book IDs, titles, and categories, helping librarians identify potentially unpopular books in otherwise popular categories. The query could be modified to: 1) include acquisition dates to analyze new vs old unborrowed books, 2) add popularity thresholds for comparison, or 3) filter by specific time periods. It helps answer questions about collection utilization, category popularity discrepancies, and potential weeding candidates.","Which books were never borrowed but are in a category that others borrow often? Show id_buku, judul, kategori.","Buku mana yang belum pernah dipinjam tapi termasuk kategori populer? Kolom: id_buku, judul, kategori.","['id_buku', 'judul', 'kategori']"
"Which courses have no enrolled students but still have a session scheduled? Show id_mk, judul, jumlah_sesi.","SELECT mk.id_mk, mk.judul, COUNT(s.id_sesi) AS jumlah_sesi
  FROM MataKuliah mk
  JOIN Sesi s ON mk.id_mk = s.id_mk
  WHERE NOT EXISTS (
  SELECT 1 FROM EnrolmenKelas e
  JOIN Sesi s2 ON e.id_sesi = s2.id_sesi
  WHERE s2.id_mk = mk.id_mk
  )
  GROUP BY mk.id_mk, mk.judul;","This SQL query identifies courses that have scheduled sessions but no enrolled students by analyzing the 'MataKuliah' (Courses), 'Sesi' (Sessions), and 'EnrolmenKelas' (Class Enrollments) tables. It counts the number of sessions for each course and uses a NOT EXISTS subquery to filter out courses that have any enrollments. The output helps academic administrators identify under-subscribed courses that may need marketing attention or reconsideration. Key operations include a table JOIN, COUNT aggregation, and a NOT EXISTS subquery to detect courses with zero enrollments. The query can be modified to: 1) include semester filters to analyze enrollment trends over time, 2) add instructor information to assess teaching assignments, or 3) compare with previous offerings to identify declining interest. It helps answer questions like 'Which courses are scheduled but have no students?' and 'How should we adjust our course offerings based on demand?'","Which courses have no students but still have sessions? Show id_mk, judul, jumlah_sesi.","Matkul mana yang punya sesi tapi ga ada mahasiswa yang daftar? Kolom: id_mk, judul, jumlah_sesi.","['id_mk', 'judul', 'jumlah_sesi']"
"Which lecturers have taught the same course in at least 3 different semesters? Show id_dosen, nama, id_mk, judul, total_semester.","SELECT d.id_dosen, d.nama, mk.id_mk, mk.judul, COUNT(DISTINCT s.semester) AS total_semester
  FROM Dosen d
  JOIN Sesi s ON s.id_pengajar = d.id_dosen
  JOIN MataKuliah mk ON mk.id_mk = s.id_mk
  GROUP BY d.id_dosen, d.nama, mk.id_mk, mk.judul
  HAVING COUNT(DISTINCT s.semester) >= 3;","This query identifies professors who have taught the same course for at least 3 different semesters by joining the Dosen (professors), Sesi (sessions), and MataKuliah (courses) tables. It counts distinct semesters per professor-course combination using GROUP BY and filters for those with â‰¥3 semesters via HAVING. The output shows professor IDs, names, course IDs, titles, and semester counts, helping identify experienced instructors for specific courses. The query could be modified to: 1) include semester years to analyze teaching continuity over time, 2) add average class size by joining enrollment data, or 3) filter for specific departments. It answers questions about teaching consistency, instructor expertise distribution, and long-term course staffing patterns.","Which lecturers taught the same course in 3+ semesters? Show id_dosen, nama, id_mk, judul, total_semester.","Dosen mana yang ngajar matkul yang sama di 3 semester berbeda? Tampilkan id_dosen, nama, id_mk, judul, total_semester.","['id_dosen', 'nama', 'id_mk', 'judul', 'total_semester']"
"Which course has the highest average exam score? If there is a tie, show any of the tying courses. Show judul and rata_rata_nilai.","SELECT mk.judul, AVG(h.nilai_diperoleh) AS rata_rata_nilai
  FROM MataKuliah mk
  JOIN Ujian u ON mk.id_mk = u.id_mk
  JOIN HasilUjian h ON u.id_ujian = h.id_ujian
  GROUP BY mk.judul
  ORDER BY rata_rata_nilai DESC
  LIMIT 1;","This SQL query identifies the course with the highest average exam scores by joining the 'MataKuliah' (Courses), 'Ujian' (Exams), and 'HasilUjian' (Exam Results) tables. It calculates the average exam score for each course and returns the course with the highest average, providing insight into academic performance across different subjects. The output helps educators identify teaching strengths and potentially recognize effective instructional methods. Key operations include multi-table JOINs, AVG aggregation, and ORDER BY with LIMIT to highlight the top-performing course. The query can be modified to: 1) filter by semester to analyze performance trends over time, 2) include instructor information to assess teaching effectiveness, or 3) compare with enrollment numbers to examine the relationship between class size and performance. It helps answer questions like 'Which course has the highest student achievement?' and 'What teaching methods contribute to better exam results?'",Which course has the best average exam score? Show me the title (judul) and the average score (rata_rata_nilai).,Matkul mana yang nilai ujiannya paling tinggi rata-ratanya? Kasih tau judul (judul) dan nilai rata-rata (rata_rata_nilai).,"['judul', 'rata_rata_nilai']"
"Find the top 5 lecturers based on total number of roles (pengajar sesi, pembimbing mahasiswa, penulis publikasi). If there is a tie, show any of the valid top 5 lecturers. Show id_dosen, nama, total_peran.","SELECT d.id_dosen, d.nama,
  (SELECT COUNT(*) FROM Sesi WHERE id_pengajar = d.id_dosen) +
  (SELECT COUNT(*) FROM Mahasiswa WHERE id_pembimbing = d.id_dosen) +
  (SELECT COUNT(*) FROM PenulisPublikasi WHERE id_dosen = d.id_dosen) AS total_peran
  FROM Dosen d
  ORDER BY total_peran DESC
  LIMIT 5;","This SQL query identifies the top 5 most actively engaged faculty members by calculating their total contributions across teaching, advising, and research. It combines three separate counts from the 'Sesi' (Teaching Sessions), 'Mahasiswa' (Student Advising), and 'PenulisPublikasi' (Research Publications) tables to create a comprehensive engagement score for each faculty member. The output helps academic administrators recognize faculty with the broadest institutional contributions and can inform workload distribution decisions. Key operations include three correlated subqueries for counting different roles, arithmetic summation of these counts, and ORDER BY with LIMIT to highlight the most engaged faculty. The query can be modified to: 1) weight different roles differently in the total score, 2) filter by time periods to analyze recent engagement, or 3) normalize by years of service for fair comparison. It helps answer questions like 'Which faculty members are most actively contributing across all areas?' and 'How should we balance teaching, advising, and research expectations?'","Who are the top 5 lecturers with the most roles (teaching, supervising, publishing)? Show id_dosen, nama, total_peran.","5 dosen teraktif dalam hal ngajar, bimbing, dan publikasi siapa aja? Kolom: id_dosen, nama, total_peran.","['id_dosen', 'nama', 'total_peran']"
"List all faculties along with their total number of research projects, total publications, and number of lecturers involved in either. Show nama, total_proyek, total_publikasi, total_dosen_aktif.","SELECT f.nama,
  COUNT(DISTINCT p.id_proyek) AS total_proyek,
  COUNT(DISTINCT pb.id_publikasi) AS total_publikasi,
  COUNT(DISTINCT d.id_dosen) AS total_dosen_aktif
  FROM Fakultas f
  LEFT JOIN ProyekPenelitian p ON f.id_fakultas = p.id_fakultas
  LEFT JOIN Publikasi pb ON f.id_fakultas = pb.id_fakultas
  LEFT JOIN Dosen d ON d.id_fakultas = f.id_fakultas
  WHERE d.id_dosen IN (
  SELECT id_dosen FROM PenulisPublikasi
  UNION
  SELECT id_dosen FROM ProyekPenelitian
  )
  GROUP BY f.nama;","This SQL query provides a comprehensive research activity overview by faculty by analyzing three key metrics: research projects, publications, and active faculty members. It joins the 'Fakultas' (Faculties) table with 'ProyekPenelitian' (Research Projects), 'Publikasi' (Publications), and 'Dosen' (Faculty) tables using LEFT JOINs to ensure all faculties are included. The query specifically counts distinct projects, publications, and faculty members who are actively involved in either publishing or research projects. The output helps academic administrators assess research productivity across different faculties and allocate resources effectively. Key operations include multiple LEFT JOINs, COUNT(DISTINCT) aggregations, and a subquery with UNION to identify active faculty. The query can be modified to: 1) add time filters to analyze research trends, 2) include funding amounts to assess financial impact, or 3) calculate ratios like publications per faculty. It helps answer strategic questions like 'Which faculties are most research-productive?' and 'How should research funding be distributed?'","Can you list all faculties and show how many research projects, publications, and active lecturers each has? Show nama, total_proyek, total_publikasi, total_dosen_aktif.","Tolong tampilin semua fakultas beserta total proyek, publikasi, dan dosen aktifnya. Kolom: nama, total_proyek, total_publikasi, total_dosen_aktif.","['nama', 'total_proyek', 'total_publikasi', 'total_dosen_aktif']"
"Show the top 5 clubs with the most diverse membership in terms of departments. If there is a tie, show any of the valid top 5 clubs. Show id_klub, nama, total_jurusan.","SELECT k.id_klub, k.nama, COUNT(DISTINCT m.id_jurusan) AS total_jurusan
  FROM OrganisasiKlub k
  JOIN KeanggotaanKlub kk ON kk.id_klub = k.id_klub
  JOIN Mahasiswa m ON m.id_mahasiswa = kk.id_mahasiswa
  GROUP BY k.id_klub, k.nama
  ORDER BY total_jurusan DESC
  LIMIT 5;","This query identifies the top 5 most diverse student clubs based on department representation by joining the OrganisasiKlub (clubs), KeanggotaanKlub (memberships), and Mahasiswa (students) tables. It counts distinct departments per club (COUNT(DISTINCT m.id_jurusan)), groups by club ID and name, and orders results by department diversity in descending order. The output shows club IDs, names, and department counts, highlighting clubs with the broadest academic representation. The query could be modified to: 1) include department names to identify which disciplines participate most, 2) filter by club type or size to analyze diversity patterns, or 3) add member counts to assess participation levels. It helps answer questions about student engagement across departments, club diversity trends, and opportunities for interdisciplinary student interactions.","Which clubs have students from many departments? Show id_klub, nama, total_jurusan.","Klub mana yang anggotanya datang dari berbagai jurusan? Tampilkan id_klub, nama, total_jurusan.","['id_klub', 'nama', 'total_jurusan']"
"Which lecturer supervises the most students? If there is a tie, show any of the tying lecturer. Show nama and total_mahasiswa_dibimbing.","SELECT d.nama, COUNT(m.id_mahasiswa) AS total_mahasiswa_dibimbing
  FROM Dosen d
  JOIN Mahasiswa m ON d.id_dosen = m.id_pembimbing
  GROUP BY d.nama
  ORDER BY total_mahasiswa_dibimbing DESC
  LIMIT 1;","This SQL query identifies the lecturer supervising the most students by joining the 'Dosen' (Lecturers) and 'Mahasiswa' (Students) tables. It counts the number of students supervised by each lecturer and returns the lecturer with the highest count, providing insights into academic advising workloads. The output helps academic institutions balance advising responsibilities and recognize faculty contributions. Key operations include a table JOIN, COUNT aggregation, and ORDER BY with LIMIT to identify the top lecturer. The query can be modified to: 1) include student academic performance metrics to assess advising effectiveness, 2) filter by student year to analyze advising distribution across classes, or 3) add department information to understand advising patterns across disciplines. It helps answer questions like 'Which lecturer has the heaviest advising load?' and 'How should advising responsibilities be distributed among faculty?'",Iâ€™m curious which lecturer guides the most students. Please show their name (nama) and how many students they supervise (total_mahasiswa_dibimbing).,Dosen mana yang ngebimbing mahasiswa paling banyak? Aku butuh namanya (nama) dan total mahasiswa bimbingannya (total_mahasiswa_dibimbing).,"['nama', 'total_mahasiswa_dibimbing']"
"List students who have received grades (nilai_akhir) for all courses they have attended. Show id_mahasiswa, nama, and jumlah_mk.","SELECT m.id_mahasiswa, m.nama, COUNT(DISTINCT n.id_mk) AS jumlah_mk
  FROM Mahasiswa m
  JOIN Nilai n ON m.id_mahasiswa = n.id_mahasiswa
  JOIN EnrolmenKelas e ON m.id_mahasiswa = e.id_mahasiswa
  JOIN Sesi s ON e.id_sesi = s.id_sesi
  GROUP BY m.id_mahasiswa, m.nama
  HAVING COUNT(DISTINCT n.id_mk) = (
  SELECT COUNT(DISTINCT s2.id_mk)
  FROM EnrolmenKelas e2
  JOIN Sesi s2 ON s2.id_sesi = e2.id_sesi
  WHERE e2.id_mahasiswa = m.id_mahasiswa
  );","This SQL query identifies students who have completed all enrolled courses by comparing their course enrollment records with their grade records. It joins the 'Mahasiswa' (Students), 'Nilai' (Grades), 'EnrolmenKelas' (Class Enrollment), and 'Sesi' (Sessions) tables to match enrolled courses with completed courses (those with grades). The HAVING clause uses a correlated subquery to verify that the count of courses with grades equals the count of enrolled courses. The output helps academic advisors track student progress and completion rates. Key operations include multiple JOINs, COUNT(DISTINCT) to avoid duplicate counting, and a correlated subquery for precise matching. The query can be modified to: 1) filter by semester to analyze completion trends, 2) include grade thresholds to identify students passing all courses, or 3) add program requirements to track degree progress. It helps answer questions like 'Which students have completed all their enrolled courses?' and 'What percentage of students complete all enrolled courses each semester?'","List students who got a grade for every course they attended. Show id_mahasiswa, nama, and jumlah_mk.","Siapa aja mahasiswa yang dapet nilai akhir untuk semua matkul yang dia ambil? Kolom: id_mahasiswa, nama, jumlah_mk.","['id_mahasiswa', 'nama', 'jumlah_mk']"
"Which student has attended the most sessions? If there is a tie, show any of the student. Show nama and total_kehadiran.","SELECT m.nama, COUNT(k.id_kehadiran) AS total_kehadiran
  FROM Mahasiswa m
  JOIN CatatanKehadiran k ON m.id_mahasiswa = k.id_mahasiswa
  GROUP BY m.nama
  ORDER BY total_kehadiran DESC
  LIMIT 1;","This SQL query identifies the student with the highest attendance record by joining the 'Mahasiswa' (Students) and 'CatatanKehadiran' (Attendance Records) tables. It counts attendance records per student and returns the student with the most attendances, highlighting exemplary attendance behavior. The output helps academic institutions recognize students with perfect attendance and monitor class participation. Key operations include a table JOIN, COUNT aggregation, and ORDER BY with LIMIT to identify the top student. The query can be modified to: 1) filter by date range to analyze attendance patterns during specific periods, 2) include course information to identify attendance by subject, or 3) calculate attendance percentages rather than absolute counts. It helps answer questions like 'Which student has the best attendance record?' and 'How can we improve overall class attendance rates?'",Which student joined the most sessions? I want to see their name (nama) and how many sessions they attended (total_kehadiran).,Mahasiswa mana yang paling rajin ikut sesi kelas? Kasih liat nama (nama) dan jumlah kehadirannya (total_kehadiran).,"['nama', 'total_kehadiran']"
"List students who received the highest exam score in their respective exams. Show id_ujian, id_mahasiswa, nama, nilai_diperoleh.","SELECT h.id_ujian, h.id_mahasiswa, m.nama, h.nilai_diperoleh
  FROM HasilUjian h
  JOIN Mahasiswa m ON m.id_mahasiswa = h.id_mahasiswa
  WHERE h.nilai_diperoleh = (
  SELECT MAX(h2.nilai_diperoleh)
  FROM HasilUjian h2
  WHERE h2.id_ujian = h.id_ujian
  );","This query identifies the top-performing student(s) for each exam by joining the HasilUjian (exam results) and Mahasiswa (students) tables. It uses a correlated subquery to find the maximum score for each exam (MAX(h2.nilai_diperoleh)) and matches students who achieved that score. The output shows exam IDs, student IDs, names, and their scores, highlighting academic excellence. The query could be modified to: 1) include course information to analyze top performers by subject, 2) add date filters to examine performance trends over time, or 3) identify consistent top performers across multiple exams. It helps answer questions about academic achievement patterns, student excellence recognition, and potential benchmarking for exam difficulty.","Who got the highest score in each exam? Show id_ujian, id_mahasiswa, nama, nilai_diperoleh.","Siapa aja mahasiswa dengan nilai tertinggi di setiap ujian? Kolom: id_ujian, id_mahasiswa, nama, nilai_diperoleh.","['id_ujian', 'id_mahasiswa', 'nama', 'nilai_diperoleh']"
"Identify research projects involving students from at least 3 different departments (jurusan). Show id_proyek, judul, total_jurusan.","SELECT p.id_proyek, p.judul, COUNT(DISTINCT m.id_jurusan) AS total_jurusan
  FROM ProyekPenelitian p
  JOIN PartisipasiPenelitian pp ON pp.id_proyek = p.id_proyek
  JOIN Mahasiswa m ON m.id_mahasiswa = pp.id_mahasiswa
  GROUP BY p.id_proyek, p.judul
  HAVING COUNT(DISTINCT m.id_jurusan) >= 3;","This query identifies research projects with participation from students across at least 3 different departments by joining the ProyekPenelitian (research projects), PartisipasiPenelitian (research participation), and Mahasiswa (students) tables. It counts distinct departments per project (COUNT(DISTINCT m.id_jurusan)) and filters for projects with â‰¥3 participating departments (HAVING clause). The output shows project IDs, titles, and department counts, highlighting interdisciplinary research collaborations. The query could be modified to: 1) include department names to identify which disciplines collaborate most, 2) filter by project duration or status to analyze active collaborations, or 3) add student counts to measure participation levels. It helps answer questions about interdisciplinary research patterns, department collaboration trends, and the diversity of student involvement in research projects.","Which research projects involved students from 3+ departments? Show id_proyek, judul, total_jurusan.","Proyek penelitian mana yang diikuti mahasiswa dari minimal 3 jurusan? Kolom: id_proyek, judul, total_jurusan.","['id_proyek', 'judul', 'total_jurusan']"
"Find all lecturers who have both guided students and taught sessions in more than one semester. Show id_dosen, nama, total_mahasiswa, jumlah_semester.","SELECT d.id_dosen, d.nama,
  COUNT(DISTINCT m.id_mahasiswa) AS total_mahasiswa,
  COUNT(DISTINCT s.semester) AS jumlah_semester
  FROM Dosen d
  JOIN Mahasiswa m ON m.id_pembimbing = d.id_dosen
  JOIN Sesi s ON s.id_pengajar = d.id_dosen
  GROUP BY d.id_dosen, d.nama
  HAVING COUNT(DISTINCT s.semester) > 1;","This SQL query identifies faculty members who have both advised students and taught courses across multiple semesters. It joins the 'Dosen' (Faculty), 'Mahasiswa' (Students), and 'Sesi' (Sessions) tables to count the number of students advised and semesters taught by each faculty member. The HAVING clause filters for faculty who have taught in more than one semester, highlighting those with sustained teaching and advising commitments. The output helps academic administrators assess faculty workload distribution and continuity in student mentoring. Key operations include multiple JOINs, COUNT(DISTINCT) for accurate counting, and HAVING for semester filtering. The query can be modified to: 1) include specific time periods to analyze recent activity, 2) add course level information to assess teaching distribution, or 3) calculate student-to-semester ratios to evaluate advising intensity. It helps answer questions like 'Which faculty maintain consistent teaching and advising roles?' and 'How should teaching and advising responsibilities be balanced?'","Find lecturers who supervise students and teach in multiple semesters. Show id_dosen, nama, total_mahasiswa, jumlah_semester.","Dosen mana aja yang ngebimbing mahasiswa dan juga ngajar di lebih dari 1 semester? Tampilkan id_dosen, nama, total_mahasiswa, jumlah_semester.","['id_dosen', 'nama', 'total_mahasiswa', 'jumlah_semester']"
"Which students have taken exams, participated in research projects, and are active members in clubs? Show id_mahasiswa, nama, total_ujian, total_proyek, total_klub.","SELECT m.id_mahasiswa, m.nama,
  COUNT(DISTINCT h.id_ujian) AS total_ujian,
  COUNT(DISTINCT pp.id_proyek) AS total_proyek,
  COUNT(DISTINCT kk.id_klub) AS total_klub
  FROM Mahasiswa m
  LEFT JOIN HasilUjian h ON m.id_mahasiswa = h.id_mahasiswa
  LEFT JOIN PartisipasiPenelitian pp ON m.id_mahasiswa = pp.id_mahasiswa
  LEFT JOIN KeanggotaanKlub kk ON m.id_mahasiswa = kk.id_mahasiswa
  GROUP BY m.id_mahasiswa, m.nama
  HAVING COUNT(DISTINCT h.id_ujian) > 0 AND COUNT(DISTINCT pp.id_proyek) > 0 AND COUNT(DISTINCT kk.id_klub) > 0;","This query identifies well-rounded students who are active in academics, research, and extracurriculars by joining the Mahasiswa (students) table with HasilUjian (exam results), PartisipasiPenelitian (research participation), and KeanggotaanKlub (club membership) tables using LEFT JOINs. It counts each student's distinct exam attempts, research projects, and club memberships, then filters for students with at least one record in each category (HAVING conditions). The output shows student IDs, names, and their counts of exams, projects, and clubs, highlighting students balancing multiple aspects of university life. The query could be modified to: 1) include academic performance metrics from exam results, 2) filter by specific club types or research areas, or 3) add demographic filters. It helps answer questions about student engagement patterns, the relationship between extracurriculars and academics, and identifying potential student leaders.","Which students took exams, did research, and joined clubs? Show id_mahasiswa, nama, total_ujian, total_proyek, total_klub.","Mahasiswa mana yang ujian, ikut riset, dan aktif di klub? Kolom: id_mahasiswa, nama, total_ujian, total_proyek, total_klub.","['id_mahasiswa', 'nama', 'total_ujian', 'total_proyek', 'total_klub']"
"Which student has the highest total score from all exams combined? If there is a tie, show any of the tying student. Show id_mahasiswa, nama, and total_score.","SELECT h.id_mahasiswa, m.nama, SUM(h.nilai_diperoleh) AS total_score
  FROM HasilUjian h
  JOIN Mahasiswa m ON h.id_mahasiswa = m.id_mahasiswa
  GROUP BY h.id_mahasiswa, m.nama
  ORDER BY total_score DESC
  LIMIT 1;","This SQL query identifies the top-performing student by calculating total exam scores across all tests. It joins the 'HasilUjian' (Exam Results) and 'Mahasiswa' (Students) tables, sums all exam scores per student, and returns the student with the highest cumulative score. The output helps academic institutions recognize academic excellence and identify high-achieving students. Key operations include a table JOIN, SUM aggregation, and ORDER BY with LIMIT to highlight the top performer. The query can be modified to: 1) filter by semester to analyze performance trends, 2) include course information to identify subject strengths, or 3) calculate average scores rather than totals for fairer comparison. It helps answer questions like 'Who is our highest-achieving student?' and 'What patterns exist among top performers?'","Which student has the highest exam score total? I want to see id_mahasiswa, nama, and total_score.","Mahasiswa mana yang total nilainya dari semua ujian paling tinggi? Aku mau id_mahasiswa, nama, dan total_score.","['id_mahasiswa', 'nama', 'total_score']"
"Which students have participated in both research and received a grade above 85 in any course? Show id_mahasiswa, nama, total_proyek, nilai_tertinggi.","SELECT m.id_mahasiswa, m.nama, COUNT(DISTINCT pp.id_proyek) AS total_proyek, MAX(n.nilai_akhir) AS nilai_tertinggi
  FROM Mahasiswa m
  JOIN PartisipasiPenelitian pp ON m.id_mahasiswa = pp.id_mahasiswa
  JOIN Nilai n ON m.id_mahasiswa = n.id_mahasiswa
  GROUP BY m.id_mahasiswa, m.nama
  HAVING MAX(n.nilai_akhir) > 85;","This SQL query identifies high-achieving students who are also actively involved in research projects by analyzing both academic performance and research participation. It joins the 'Mahasiswa' (Students), 'PartisipasiPenelitian' (Research Participation), and 'Nilai' (Grades) tables to count each student's research projects while also tracking their highest course grade. The HAVING clause filters for students with at least one course grade above 85, highlighting academically strong researchers. The output helps identify well-rounded students excelling in both coursework and research. Key operations include multiple JOINs, COUNT(DISTINCT) for research projects, MAX() for highest grade, and HAVING for grade filtering. The query can be modified to: 1) include specific course categories to analyze performance by subject area, 2) add time periods to track performance trends, or 3) calculate average grades rather than maximum for broader performance assessment. It helps answer questions like 'Which research-active students also excel academically?' and 'How does research participation correlate with academic performance?'","Which students both did research and got a grade above 85? Show id_mahasiswa, nama, total_proyek, nilai_tertinggi.","Siapa mahasiswa yang ikut riset dan juga dapet nilai di atas 85? Tampilkan id_mahasiswa, nama, total_proyek, nilai_tertinggi.","['id_mahasiswa', 'nama', 'total_proyek', 'nilai_tertinggi']"
"List all courses that have at least one session and at least one exam, and calculate the average final grade (nilai_akhir) and exam score (nilai_diperoleh). Show id_mk, judul, avg_nilai_akhir, avg_nilai_ujian.","SELECT mk.id_mk, mk.judul,
  AVG(n.nilai_akhir) AS avg_nilai_akhir,
  AVG(h.nilai_diperoleh) AS avg_nilai_ujian
  FROM MataKuliah mk
  JOIN Nilai n ON mk.id_mk = n.id_mk
  JOIN Ujian u ON mk.id_mk = u.id_mk
  JOIN HasilUjian h ON u.id_ujian = h.id_ujian AND n.id_mahasiswa = h.id_mahasiswa
  GROUP BY mk.id_mk, mk.judul
  HAVING COUNT(DISTINCT u.id_ujian) > 0;","This SQL query calculates the average final grades ('avg_nilai_akhir') and average exam scores ('avg_nilai_ujian') for each course by joining the 'MataKuliah' (Courses), 'Nilai' (Grades), 'Ujian' (Exams), and 'HasilUjian' (ExamResults) tables on relevant keys. It groups results by course ID and title, filtering for courses with at least one exam. The output provides insights into course performance metrics, useful for academic assessment and curriculum planning. Key modifications could include: 1) Adding a filter for specific semesters by joining with a 'Semester' table, 2) Comparing performance across departments by incorporating faculty/department data, or 3) Calculating pass/fail rates by adding conditional logic to the averages. This query could help answer questions like: 'Which courses have the highest average scores?', 'How do final grades correlate with exam performance?', or 'Which courses might need curriculum review based on performance metrics?'","List all courses with both a session and an exam, and show the average grade and exam score. Show id_mk, judul, avg_nilai_akhir, avg_nilai_ujian.","Matkul apa yang punya sesi & ujian? Tampilkan nilai akhir rata-rata dan nilai ujian rata-rata. Kolom: id_mk, judul, avg_nilai_akhir, avg_nilai_ujian.","['id_mk', 'judul', 'avg_nilai_akhir', 'avg_nilai_ujian']"
"Which clubs have only students from one department? Show id_klub, nama_klub, id_jurusan.","SELECT k.id_klub, k.nama AS nama_klub, m.id_jurusan
  FROM OrganisasiKlub k
  JOIN KeanggotaanKlub kk ON kk.id_klub = k.id_klub
  JOIN Mahasiswa m ON kk.id_mahasiswa = m.id_mahasiswa
  GROUP BY k.id_klub, k.nama, m.id_jurusan
  HAVING COUNT(DISTINCT m.id_jurusan) = 1;","This SQL query identifies clubs (klub) whose members all come from a single academic department (jurusan), highlighting potentially department-exclusive clubs. It joins the OrganisasiKlub, KeanggotaanKlub, and Mahasiswa tables, using GROUP BY to aggregate by club and department, and HAVING COUNT(DISTINCT m.id_jurusan) = 1 to enforce the single-department condition. Key operations include JOINs for table relationships and HAVING for post-aggregation filtering. The output lists club IDs, names, and their uniform department IDs, useful for identifying department-affiliated clubs or assessing diversity in club membership. Modifications could include: 1) Adding department names for readability, 2) Counting members per club to assess size, or 3) Filtering for specific departments of interest. This query could answer questions like 'Which clubs are exclusively associated with a particular department?' or 'Are there clubs that could benefit from more diverse departmental representation?'","Which clubs have only students from the same department? Show id_klub, nama_klub, id_jurusan.","Klub mana yang semua anggotanya dari satu jurusan aja? Kolom: id_klub, nama_klub, id_jurusan.","['id_klub', 'nama_klub', 'id_jurusan']"
"Which faculty head (id_kepala) also teaches at least one course? Show id_kepala, nama_dosen, and jumlah_mk_diajar.","SELECT f.id_kepala, d.nama AS nama_dosen, COUNT(mk.id_mk) AS jumlah_mk_diajar
  FROM Fakultas f
  JOIN Dosen d ON f.id_kepala = d.id_dosen
  JOIN MataKuliah mk ON mk.id_pengajar = d.id_dosen
  GROUP BY f.id_kepala, d.nama
  HAVING COUNT(mk.id_mk) > 0;","This SQL query identifies faculty heads ('id_kepala') who are also teaching courses by counting the number of courses each faculty head teaches. It joins the 'Fakultas' (Faculties), 'Dosen' (Lecturers), and 'MataKuliah' (Courses) tables, grouping results by faculty head ID and lecturer name, and filtering for those teaching at least one course. The output helps assess faculty heads' teaching workloads and their direct involvement in academic instruction. Key modifications could include: 1) Adding semester filters by joining with a 'Semester' table to analyze teaching patterns over time, 2) Comparing teaching loads between faculty heads and regular lecturers by including all lecturers in the initial join, or 3) Incorporating course level or type to analyze if faculty heads focus on specific course categories. This query could answer questions like: 'How many faculty heads maintain active teaching roles?', 'What is the average teaching load for faculty heads compared to other lecturers?', or 'Are faculty heads concentrated in teaching certain types of courses?'","Which faculty head also teaches? Show id_kepala, nama_dosen, and jumlah_mk_diajar.","Kepala fakultas mana yang juga ngajar? Tampilkan id_kepala, nama_dosen, dan jumlah matkul yang diajarkan.","['id_kepala', 'nama_dosen', 'jumlah_mk_diajar']"
"Which student has participated in the most research projects? If there is a tie, show any of the tying student. Show nama and total_partisipasi.","SELECT m.nama, COUNT(pp.id_proyek) AS total_partisipasi
  FROM Mahasiswa m
  JOIN PartisipasiPenelitian pp ON m.id_mahasiswa = pp.id_mahasiswa
  GROUP BY m.nama
  ORDER BY total_partisipasi DESC
  LIMIT 1;","This SQL query identifies the student with the highest research participation by counting research projects per student across the 'Mahasiswa' (Students) and 'PartisipasiPenelitian' (Research Participation) tables. It returns the student involved in the most research projects, highlighting undergraduate research engagement. The output helps academic institutions recognize research-active students and assess undergraduate research opportunities. Key operations include a table JOIN, COUNT aggregation, and ORDER BY with LIMIT to identify the top participant. The query can be modified to: 1) filter by project type to analyze participation in specific research areas, 2) include project outcomes to assess student research impact, or 3) group by academic year to track participation trends. It helps answer questions like 'Which student is most engaged in research?' and 'How can we increase undergraduate research opportunities?'",Which student has joined the most research projects? I need their name (nama) and the total number (total_partisipasi).,Mahasiswa mana yang paling sering ikut proyek penelitian? Tunjukin namanya (nama) dan jumlah partisipasinya (total_partisipasi).,"['nama', 'total_partisipasi']"
"Which courses have been taught by more than one lecturer in different semesters? Show id_mk, judul, total_pengajar.","SELECT mk.id_mk, mk.judul, COUNT(DISTINCT s.id_pengajar) AS total_pengajar
  FROM MataKuliah mk
  JOIN Sesi s ON mk.id_mk = s.id_mk
  GROUP BY mk.id_mk, mk.judul
  HAVING COUNT(DISTINCT s.id_pengajar) > 1;","This query identifies courses that have been taught by multiple instructors by joining the MataKuliah (courses) and Sesi (sessions) tables. It counts distinct instructors per course (COUNT(DISTINCT s.id_pengajar)) and filters for courses with more than one instructor (HAVING clause). The output shows course IDs, titles, and instructor counts, highlighting courses with shared teaching responsibilities. The query could be modified to: 1) include semester information to analyze teaching patterns over time, 2) add department filters to examine discipline-specific practices, or 3) calculate the average number of instructors per course type. It helps answer questions about teaching collaboration, course staffing strategies, and instructor workload distribution across different subjects.","Which courses are taught by different lecturers in different semesters? Show id_mk, judul, total_pengajar.","Matkul mana yang diajar sama banyak dosen di semester berbeda? Kolom: id_mk, judul, total_pengajar.","['id_mk', 'judul', 'total_pengajar']"
"Which students have participated in more than 2 research projects and are also club members? Show id_mahasiswa, nama, total_proyek, total_klub.","SELECT m.id_mahasiswa, m.nama,
  COUNT(DISTINCT pp.id_proyek) AS total_proyek,
  COUNT(DISTINCT kk.id_klub) AS total_klub
  FROM Mahasiswa m
  JOIN PartisipasiPenelitian pp ON m.id_mahasiswa = pp.id_mahasiswa
  JOIN KeanggotaanKlub kk ON m.id_mahasiswa = kk.id_mahasiswa
  GROUP BY m.id_mahasiswa, m.nama
  HAVING COUNT(DISTINCT pp.id_proyek) > 2;","This SQL query identifies highly engaged students who participate in multiple research projects while also being involved in student clubs. It joins the 'Mahasiswa' (Students) table with both 'PartisipasiPenelitian' (Research Participation) and 'KeanggotaanKlub' (Club Membership) tables to count each student's research projects and club memberships. The HAVING clause filters for students involved in more than 2 research projects, highlighting those with exceptional extracurricular engagement. The output helps student affairs offices recognize well-rounded students and assess campus engagement opportunities. Key operations include multiple JOINs, COUNT(DISTINCT) to avoid duplicate counting, and HAVING for post-aggregation filtering. The query can be modified to: 1) include academic performance metrics to analyze engagement-impact correlations, 2) filter by year to track engagement trends, or 3) add club/research categories to identify popular activity types. It helps answer questions like 'Which students balance research and extracurriculars effectively?' and 'How can we support student involvement in multiple areas?'","Which students joined more than 2 projects and are in a club? Show id_mahasiswa, nama, total_proyek, and total_klub.","Siapa aja mahasiswa yang ikut lebih dari 2 proyek dan juga aktif di klub? Tampilkan id_mahasiswa, nama, total_proyek, total_klub.","['id_mahasiswa', 'nama', 'total_proyek', 'total_klub']"
"Which books have been borrowed more than 5 times and are still available in the library? Show id_buku, judul, total_peminjaman, salinan_tersedia.","SELECT b.id_buku, b.judul, COUNT(p.id_peminjaman) AS total_peminjaman, b.salinan_tersedia
  FROM BukuPerpustakaan b
  JOIN PeminjamanBuku p ON b.id_buku = p.id_buku
  GROUP BY b.id_buku, b.judul, b.salinan_tersedia
  HAVING COUNT(p.id_peminjaman) > 5 AND b.salinan_tersedia > 0;","This SQL query identifies popular library books that are both frequently borrowed and currently available by analyzing the 'BukuPerpustakaan' (Library Books) and 'PeminjamanBuku' (Book Loans) tables. It counts the number of loans for each book and filters for books with more than 5 loans that still have available copies. The output helps librarians identify high-demand books that may need additional copies while ensuring they're currently accessible to patrons. Key operations include a table JOIN, COUNT aggregation, and HAVING with multiple conditions to filter for both popularity and availability. The query can be modified to: 1) include date ranges to analyze seasonal popularity trends, 2) add book categories to identify popular genres, or 3) calculate loan-to-copy ratios to assess collection adequacy. It helps answer questions like 'Which popular books should we acquire more copies of?' and 'How well does our collection meet patron demand?'","Which books were borrowed more than 5 times and still have copies? Show id_buku, judul, total_peminjaman, salinan_tersedia.","Buku apa aja yang udah dipinjam lebih dari 5x tapi masih tersedia? Kolom: id_buku, judul, total_peminjaman, salinan_tersedia.","['id_buku', 'judul', 'total_peminjaman', 'salinan_tersedia']"
"Which students have both top 10% GPA and have participated in at least one publication via their supervising lecturer? Show id_mahasiswa, nama, IPK, total_publikasi_pembimbing.","SELECT m.id_mahasiswa, m.nama, MAX(n.IPK) AS IPK,
  COUNT(DISTINCT pp.id_publikasi) AS total_publikasi_pembimbing
  FROM Mahasiswa m
  JOIN Nilai n ON n.id_mahasiswa = m.id_mahasiswa
  JOIN Dosen d ON d.id_dosen = m.id_pembimbing
  JOIN PenulisPublikasi pp ON pp.id_dosen = d.id_dosen
  WHERE n.IPK > (SELECT percentile_cont(0.9) WITHIN GROUP (ORDER BY IPK) FROM Nilai)
  GROUP BY m.id_mahasiswa, m.nama;","This query identifies top-performing students (top 10% by GPA) and their advisors' publication records by joining Mahasiswa (students), Nilai (grades), Dosen (advisors), and PenulisPublikasi (publication authors) tables. It calculates each student's maximum GPA (MAX(n.IPK)) and counts their advisor's distinct publications (COUNT(DISTINCT pp.id_publikasi)), filtering for students in the 90th percentile GPA using a subquery with percentile_cont. The output includes student IDs, names, GPAs, and their advisors' publication counts, useful for analyzing relationships between student performance and advisor research activity. The query could be modified to: 1) include department filters to analyze discipline-specific patterns, 2) add student publication counts to assess direct research involvement, or 3) analyze publication quality metrics. It helps answer questions about advisor-student performance correlations, research mentorship effectiveness, and high-achieving student characteristics.","Which students have top GPA and their advisor published something? Show id_mahasiswa, nama, IPK, total_publikasi_pembimbing.","Siapa mahasiswa IPK-nya masuk top 10% dan pembimbingnya pernah publikasi? Kolom: id_mahasiswa, nama, IPK, total_publikasi_pembimbing.","['id_mahasiswa', 'nama', 'ipk', 'total_publikasi_pembimbing']"
