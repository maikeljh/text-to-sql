Question,Answer,Summary,Alternative Prompt 1 (English),Alternative Prompt 2 (Bahasa Indonesia),Expected Result
"Which actors have the first name ‘Scarlett’? Show actor_id, first_name, last_name","SELECT actor_id, first_name, last_name
FROM actor
WHERE first_name ILIKE 'scarlett';","This SQL query retrieves actor details for those with the first name 'Scarlett' (case-insensitive) from the 'actor' table, returning their actor_id, first_name, and last_name. The primary operation is a simple SELECT with an ILIKE filter on the first_name field, which enables case-insensitive pattern matching. The output provides a list of actors matching the name 'Scarlett', useful for casting or reference purposes. The query could be modified by: 1) changing the name filter to find actors with different names or patterns (e.g., '%scar%' for partial matches), 2) adding joins to related tables like 'film_actor' to see which movies these actors appeared in, or 3) incorporating sorting or limiting results for presentation. Potential questions this query might answer include identifying all actors with a specific name variant or verifying actor name spellings in the database.","Can you show me the actor_id, first_name, and last_name of actors named Scarlett?","Bisa kasih daftar actor_id, first_name, dan last_name dari aktor yang nama depannya Scarlett?","['actor_id', 'first_name', 'last_name']"
How many distinct actors last names are there? Show count,SELECT COUNT(DISTINCT last_name) FROM actor;,"This SQL query calculates the count of distinct 'last_name' values in the 'actor' table, providing the total number of unique actor last names. The main objective is to determine the diversity or uniqueness of last names among actors. The query uses the COUNT(DISTINCT column) function to perform the calculation, ensuring that only unique last names are counted. No filters or conditions are applied, as the query operates on the entire dataset. The expected output is a single integer representing the count of unique last names, which could be relevant for demographic analysis or identifying naming trends in the actor database. This query can be modified to count distinct values in other columns (e.g., first_name) or extended to include filters (e.g., counting last names for actors in specific films by joining the 'film_actor' table). Potential questions this query might answer include: 'How many unique last names are present in the actor database?' or 'What is the distribution of last names among actors?'.",How many different last_name values are there among all the actors?,Total ada berapa nama belakang (last_name) aktor yang beda-beda?,['count']
"Who is the top 1 actor who has appeared in the most films? Show actor_id, first_name, last_name","SELECT 
    a.actor_id, 
    a.first_name, 
    a.last_name, 
    COUNT(fa.film_id) AS film_count
FROM 
    actor a
    JOIN film_actor fa ON a.actor_id = fa.actor_id
GROUP BY 
    a.actor_id,
    a.first_name,
    a.last_name
ORDER BY 
    film_count DESC
LIMIT 1;","This SQL query identifies the actor who has appeared in the most films by joining the 'actor' and 'film_actor' tables on 'actor_id', counting film appearances per actor, and returning the top result. Key operations include an INNER JOIN to link actors with their films, COUNT aggregation to tally film appearances, and GROUP BY to organize results by actor. The query filters implicitly by focusing on the maximum count (via ORDER BY and LIMIT 1) and outputs the actor's ID, name, and total film count. This is useful for recognizing prolific actors or benchmarking performance. The query could be modified to: 1) remove the LIMIT to rank all actors by film count, 2) add a WHERE clause to focus on specific film categories or time periods, or 3) include additional actor details from related tables. Potential use cases include casting decisions, career longevity analysis, or identifying potential candidates for franchise roles based on prior experience.","Who’s the top 1 actor that’s been in the most movies? Just show me their actor_id, first_name, and last_name.","Siapa aktor top 1 yang paling sering main film? Kasih tau actor_id, first_name, sama last_name-nya aja ya.","['actor_id', 'first_name', 'last_name']"
List the top 5 film genres by total gross revenue and by looking from the payments in all store? Show the genre name in descending order of total revenue.,"SELECT 
    c.name AS genre, 
    SUM(p.amount) AS gross_revenue
FROM 
    category c
    JOIN film_category fc ON c.category_id = fc.category_id
    JOIN inventory i ON fc.film_id = i.film_id
    JOIN rental r ON i.inventory_id = r.inventory_id
    JOIN payment p ON r.rental_id = p.rental_id
GROUP BY 
    c.name
ORDER BY 
    gross_revenue DESC
LIMIT 5;","This SQL query calculates the top 5 highest-grossing film categories by joining the 'category', 'film_category', 'inventory', 'rental', and 'payment' tables. The main objective is to determine which film categories generate the most revenue. The query uses multiple JOIN operations to link the tables, a GROUP BY clause to aggregate results by category, and SUM(p.amount) to calculate total revenue per category. The results are ordered in descending order by revenue, and the LIMIT 5 clause ensures only the top 5 categories are returned. The expected output includes the category name and its corresponding gross revenue, which is useful for identifying high-performing genres and informing business decisions. This query can be modified to analyze revenue for specific time periods by adding a WHERE clause on the rental or payment dates, or extended to include additional metrics like average revenue per film by joining the 'film' table. Potential questions this query might answer include: 'Which film categories generate the most revenue?' or 'What is the revenue distribution across film categories?'.","What are the top 5 film genres that brought in the highest revenue by looking from the payments in all store? Just show the genre names, sorted from the highest.","Apa aja 5 genre film dengan pemasukan tertinggi dengan melihat pembayaran di semua toko? Cukup tampilkan nama genre-nya, urut dari yang paling banyak.",['genre']
"How much total revenue did each store generate by looking from the staff's payments? Show the store_id and total revenue, sorted from highest to lowest.","SELECT s.store_id, SUM(p.amount) AS total_revenue
FROM store s
JOIN staff st ON s.store_id = st.store_id
JOIN payment p ON st.staff_id = p.staff_id
GROUP BY s.store_id
ORDER BY total_revenue DESC;","This SQL query calculates the total revenue generated by each store by joining the 'store', 'staff', and 'payment' tables. The main objective is to determine the revenue contribution of each store. The query uses JOIN operations to link the tables, a GROUP BY clause to aggregate results by store, and SUM(p.amount) to calculate total revenue per store. The results are ordered in descending order by revenue, providing a ranking of stores by their financial performance. The expected output includes the store ID and its corresponding total revenue, which is useful for evaluating store performance and allocating resources. This query can be modified to analyze revenue for specific time periods by adding a WHERE clause on the payment date, or extended to include additional details like city or country by joining the 'address' and 'city' tables. Potential questions this query might answer include: 'Which store generates the most revenue?' or 'How does revenue vary across stores?'.","How much revenue did each store make by looking from the staff's payments? Just show me the store_id and total revenue, sorted from highest to lowest.","Tiap toko dapet pemasukan berapa kalau dilihat dari pembayaran oleh staffnya? Tampilkan store_id sama total pemasukannya aja, urut dari yang paling besar.","['store_id', 'total_revenue']"
Which language is the top 1 most used in films? Show only the name of the language.,"SELECT 
    l.name
FROM 
    language l
    JOIN film f ON l.language_id = f.language_id
GROUP BY 
    l.name
ORDER BY
    COUNT(f.film_id) DESC
LIMIT 1;","This SQL query identifies the most frequently used language in films by joining the 'language' and 'film' tables on 'language_id'. The main objective is to determine the language associated with the highest number of films. The query uses a JOIN operation to link the tables, a GROUP BY clause to aggregate results by language, and COUNT(f.film_id) to calculate the number of films per language. The results are ordered in descending order by film count, and the LIMIT 1 clause ensures only the top language is returned. The expected output is the name of the most used language, which is useful for understanding language preferences in film production. This query can be modified to return the top N languages by adjusting the LIMIT clause or extended to include additional metrics like revenue by language by joining the 'payment' table. Potential questions this query might answer include: 'Which language is most commonly used in films?' or 'How does language usage vary across films?'.",Which language shows up the most in our movie list? Just give me the top 1 language name.,Bahasa apa yang paling sering muncul di daftar film kita? Cukup kasih nama bahasa yang jadi top 1 aja.,['name']
"List the top five customers by number of rented movies, sorted from highest to lowest. Show the customer ID, first name, last name, and number of rented movies for each customer.","SELECT
    c.customer_id,
    c.first_name,
    c.last_name,
    COUNT(r.rental_id) as total_rentals
FROM
    customer c
    JOIN rental r ON c.customer_id= r.customer_id
GROUP BY
    c.customer_id,
    c.first_name,
    c.last_name
ORDER BY
    total_rentals DESC
LIMIT 5;","This SQL query identifies the top 5 customers with the highest number of movie rentals by joining the 'customer' and 'rental' tables on 'customer_id'. The main objective is to determine the most active customers based on rental activity. The query uses a JOIN operation to link the tables, a GROUP BY clause to aggregate results by customer, and COUNT(r.rental_id) to calculate the total number of rentals per customer. The results are ordered in descending order by rental count, and the LIMIT 5 clause ensures only the top 5 customers are returned. The expected output includes the customer ID, first name, last name, and total rentals, which is useful for identifying loyal customers or targeting marketing campaigns. This query can be modified to analyze rentals for specific time periods by adding a WHERE clause on the rental date, or extended to include additional metrics like total revenue by joining the 'payment' table. Potential questions this query might answer include: 'Who are the most active customers?' or 'How does rental activity vary across customers?'.","Who are the top 5 customers based on how many movies they've rented? Show their customer ID, first name, last name, and total number of rentals, sorted from highest to lowest.","Siapa sih 5 pelanggan yang paling sering nyewa film? Tunjukin customer ID, nama depan, nama belakang, sama total film yang mereka sewa, urut dari yang paling banyak ya.","['customer_id', 'first_name', 'last_name', 'total_rentals']"
"Which customers have rented films from more than 3 different categories? Show their customer ID, first name, last name, and the number of categories they've rented from.","SELECT 
    c.customer_id, 
    c.first_name, 
    c.last_name, 
    COUNT(DISTINCT fc.category_id) AS category_count
FROM 
    customer c
    JOIN rental r ON c.customer_id = r.customer_id
    JOIN inventory i ON r.inventory_id = i.inventory_id
    JOIN film_category fc ON i.film_id = fc.film_id
GROUP BY 
    c.customer_id
HAVING 
    COUNT(DISTINCT fc.category_id) > 3;","This SQL query identifies customers who have rented movies from more than three distinct categories. It pulls data from the 'customer', 'rental', 'inventory', and 'film_category' tables, joining them using 'customer_id', 'inventory_id', and 'film_id'. The query counts the distinct 'category_id' values per customer and filters results to only include those with more than three unique categories. The output consists of customer IDs, first names, last names, and their respective category counts. This can be adapted to analyze customers renting from specific categories by adding a WHERE clause on 'fc.category_id', or to track rental frequency per customer by counting rentals instead of categories. Analysts can use this query to segment customers based on rental diversity or identify those with broad movie preferences for targeted marketing campaigns.","Which customers have rented from more than 3 categories? Show the customer ID, first name, last name, and the number of categories they've rented from.","Pelanggan mana aja yang udah nyewa film dari lebih dari 3 kategori? Tampilkan ID pelanggan, nama depan, nama belakang, dan jumlah kategori yang disewa.","['customer_id', 'first_name', 'last_name', 'category_count']"
"Which films have never been rented across any store? Show the film_id, title, and release_year.","SELECT 
    f.film_id, 
    f.title, 
    f.release_year
FROM 
    film f
WHERE 
    NOT EXISTS (
        SELECT 1
        FROM inventory i
        JOIN rental r ON i.inventory_id = r.inventory_id
        WHERE i.film_id = f.film_id
    )
ORDER BY f.film_id;","This SQL query identifies films that have never been rented by using a NOT EXISTS subquery to check for missing rental records in the 'inventory' and 'rental' tables. The query selects film details (ID, title, release year) from the 'film' table where no corresponding rental transactions exist, ordered by film ID. Key operations include the anti-join pattern using NOT EXISTS, which efficiently filters out films with any rental history. The output helps identify underperforming or potentially problematic inventory that may need promotional efforts or removal. The query could be modified to: 1) include film categories to analyze which genres aren't renting, 2) add rental duration or rating filters to focus on specific segments, or 3) combine with inventory data to check if unrented films are actually in stock. Potential business questions include identifying dead inventory, evaluating acquisition decisions, or detecting potential catalog issues affecting rentability.","Are there any movies in our collection that have never been rented at all, across any store? I need the film ID, title, and release year.","Ada nggak film di koleksi kita yang belum pernah disewa sama sekali di semua store? Aku butuh film ID, judul, dan tahun rilisnya.","['film_id', 'release_year']"
"What is the total revenue generated by each actor based on the films they've appeared in by looking from the payments of all stores? Show the actor ID, first name, last name, and total revenue, sorted from highest to lowest.","SELECT 
    a.actor_id, 
    a.first_name, 
    a.last_name, 
    SUM(p.amount) AS total_revenue
FROM 
    actor a
    JOIN film_actor fa ON a.actor_id = fa.actor_id
    JOIN inventory i ON fa.film_id = i.film_id
    JOIN rental r ON i.inventory_id = r.inventory_id
    JOIN payment p ON r.rental_id = p.rental_id
GROUP BY 
    a.actor_id,
    a.first_name,
    a.last_name
ORDER BY 
    total_revenue DESC;","This SQL query calculates and ranks actors by their total revenue generated from film rentals, joining five tables ('actor', 'film_actor', 'inventory', 'rental', and 'payment') through a series of INNER JOINs on key IDs. The primary operation is a SUM aggregation of payment amounts grouped by actor, with results ordered by total revenue in descending order. The query outputs each actor's ID, name, and cumulative revenue, providing valuable insights into which actors drive the most rental income. This analysis could inform contract negotiations, marketing strategies, or content acquisition decisions. The query could be modified to: 1) filter by date range to analyze revenue trends over time, 2) add average revenue per film to identify particularly valuable actors, or 3) include film categories to determine which genres generate the most revenue per actor. Potential business questions include identifying top-performing actors for contract renewals, understanding revenue distribution across the actor roster, or evaluating the financial return on actor investments.","How much total revenue has each actor generated from the movies they've appeared in by looking from the payments of all store? Show the actor ID, first name, last name, and total revenue, sorted from highest to lowest.","Berapa total pemasukan yang dihasilkan tiap aktor dari film yang mereka bintangi dengan melihat pembayaran di seluruh toko? Tampilkan ID aktor, nama depan, nama belakang, dan total pendapatannya, diurutkan dari yang paling besar.","['actor_id', 'first_name', 'last_name', 'total_revenue']"
"Which store has the highest total revenue, and what is the name of the staff member managing that store?","SELECT 
    s.store_id, 
    CONCAT(st.first_name, ' ', st.last_name) AS manager_name, 
    SUM(p.amount) AS total_revenue
FROM 
    store s
JOIN staff st ON s.manager_staff_id = st.staff_id
JOIN inventory i ON s.store_id = i.store_id
JOIN rental r ON i.inventory_id = r.inventory_id
JOIN payment p ON r.rental_id = p.rental_id
GROUP BY 
    s.store_id, manager_name
ORDER BY 
    total_revenue DESC
LIMIT 1;","This SQL query identifies the store with the highest total revenue by aggregating payment amounts across all transactions. It joins the 'store' table with 'staff' to retrieve the store manager's name and further joins 'inventory', 'rental', and 'payment' tables to track revenue. The result provides the store ID, manager's full name, and total revenue, sorted in descending order, returning only the top-performing store. Potential modifications include removing the LIMIT clause to rank all stores by revenue, filtering by date range to analyze revenue trends over time, or incorporating additional metrics such as average transaction value. This query is useful for answering questions about store performance, revenue distribution, and managerial impact on sales.","Which store has earned the most revenue, and what is the name of the staff member managing it?","Toko mana yang penghasilannya paling tinggi, dan siapa nama staf yang megang toko itu?","['store_id', 'manager_name']"
"Which customers have rented the same film more than once? Show the customer ID, first name, last name, film title, and the number of times they rented it.","WITH customer_film_rentals AS (
    SELECT 
        r.customer_id, 
        f.film_id, 
        f.title, 
        COUNT(r.rental_id) AS rental_count
    FROM 
        rental r
        JOIN inventory i ON r.inventory_id = i.inventory_id
        JOIN film f ON i.film_id = f.film_id
    GROUP BY 
        r.customer_id, f.film_id
    HAVING 
        COUNT(r.rental_id) > 1
)
SELECT 
    c.customer_id, 
    c.first_name, 
    c.last_name, 
    cfr.title, 
    cfr.rental_count
FROM 
    customer c
    JOIN customer_film_rentals cfr ON c.customer_id = cfr.customer_id;","This SQL query retrieves customers who have rented the same film more than once, listing their names, rented film titles, and the number of times they have rented each film. It first creates a common table expression (CTE) 'customer_film_rentals' that aggregates rental counts per customer and film, filtering for those with more than one rental. The final selection joins this result with the 'customer' table to include customer details. Potential modifications include adjusting the HAVING clause to analyze customers with any number of repeat rentals, filtering by rental date range to identify recent trends, or adding film categories to understand customer preferences in different genres. This query helps answer questions about customer loyalty, film popularity, and rental frequency patterns.","Which customers have rented the same film more than once? Show the customer ID, first name, last name, film title, and the number of times they rented it.","Siapa aja pelanggan yang nyewa film yang sama lebih dari sekali? Tampilkan ID pelanggan, nama depan, nama belakang, judul film, dan jumlah penyewaan.","['customer_id', 'first_name', 'last_name', 'title', 'rental_count']"
"Which films belong to the top 5 most rented categories? List them sorted by replacement cost from highest to lowest, showing film ID, title, replacement cost, and category name.","WITH top_categories AS (
    SELECT 
        fc.category_id, 
        COUNT(r.rental_id) AS rental_count
    FROM 
        film_category fc
        JOIN inventory i ON fc.film_id = i.film_id
        JOIN rental r ON i.inventory_id = r.inventory_id
    GROUP BY 
        fc.category_id
    ORDER BY 
        rental_count DESC
    LIMIT 5
),
top_films AS (
    SELECT 
        f.film_id, 
        f.title, 
        f.replacement_cost, 
        c.name AS category_name
    FROM 
        film f
        JOIN film_category fc ON f.film_id = fc.film_id
        JOIN category c ON fc.category_id = c.category_id
        JOIN top_categories tc ON fc.category_id = tc.category_id
    ORDER BY 
        f.replacement_cost DESC
)
SELECT * FROM top_films;","This SQL query identifies the top 5 most rented film categories and retrieves the most expensive films within those categories. It first creates a common table expression (CTE) 'top_categories' to rank film categories based on rental frequency. Another CTE, 'top_films', filters films belonging to these top categories and selects the most expensive ones by replacement cost. The final result includes film titles, their replacement costs, and corresponding category names. Possible modifications include adjusting the LIMIT value to analyze a broader range of categories, incorporating rental revenue data to prioritize high-earning films, or filtering by rental date ranges to capture recent trends. This query helps answer questions related to film category popularity, pricing strategy, and rental demand for premium films.","Which films are in the top 5 most rented categories? Show the film ID, title, replacement cost, and category name, sorted by replacement cost from highest to lowest.","Film apa saja yang masuk dalam 5 kategori paling sering disewa? Tampilkan ID film, judul, biaya ganti, dan nama kategori, urut biaya ganti dari yang paling mahal.","['film_id', 'title', 'replacement_cost', 'category_name']"
"Which pairs of actors have appeared together in the most films? Show only the actor IDs for each pair and the number of films they've worked on together, sorted by the number of films in descending order.","SELECT 
    fa1.actor_id AS actor1_id, 
    fa2.actor_id AS actor2_id, 
    COUNT(*) AS films_together
FROM 
    film_actor fa1
    JOIN film_actor fa2 ON fa1.film_id = fa2.film_id
WHERE 
    fa1.actor_id < fa2.actor_id
GROUP BY 
    fa1.actor_id, fa2.actor_id
ORDER BY 
    films_together DESC;
","This SQL query identifies actor pairs who have appeared together in films most frequently by self-joining the 'film_actor' table on film_id. The key operations include a self-join with inequality condition (fa1.actor_id < fa2.actor_id) to avoid duplicate pairs, COUNT aggregation to tally co-appearances, and descending sort by collaboration frequency. The output shows actor pairs with their collaboration count, useful for analyzing on-screen chemistry or casting trends. The query could be modified to: 1) filter by specific actors to find their most frequent co-stars, 2) include actor names from the 'actor' table for readability, or 3) add date filters to analyze collaboration trends over time. Potential business questions include identifying popular acting duos for marketing campaigns, understanding ensemble dynamics, or planning future cast combinations based on past success.","Which pairs of actors have appeared together in the most films? Show only the actor IDs for each pair and how many films they've worked on together, sorted from most to least.","Pasangan aktor mana saja yang paling sering main film bareng? Tampilkan ID kedua aktor dan jumlah film yang mereka bintangi bersama, urut dari yang paling banyak.","['actor1_id', 'actor2_id', 'films_together']"
"Which films are in the top 10% of revenue-generating films? Show the film ID, title, and total revenue.","WITH film_revenue AS (
    SELECT 
        f.film_id, 
        f.title, 
        SUM(p.amount) AS total_revenue
    FROM 
        film f
        JOIN inventory i ON f.film_id = i.film_id
        JOIN rental r ON i.inventory_id = r.inventory_id
        JOIN payment p ON r.rental_id = p.rental_id
    GROUP BY 
        f.film_id
),
top_10_percent AS (
    SELECT 
        film_id, 
        title, 
        total_revenue, 
        PERCENT_RANK() OVER (ORDER BY total_revenue DESC) AS pct_rank
    FROM 
        film_revenue
)
SELECT 
    film_id, 
    title, 
    total_revenue
FROM 
    top_10_percent
WHERE 
    pct_rank <= 0.1;","This SQL query identifies the top 10% highest-grossing films based on total revenue from customer payments. It first computes the total revenue per film using a CTE 'film_revenue', aggregating payments from the 'payment' table via joins with 'rental', 'inventory', and 'film' tables. A second CTE, 'top_10_percent', assigns a percentile rank to each film based on descending revenue using the PERCENT_RANK() window function. The final selection filters for films in the top 10% by revenue. Possible modifications include adjusting the percentile threshold for different ranking levels, incorporating genre information by joining the 'film_category' table, or analyzing revenue trends over time by grouping payments by year or quarter. This query helps answer questions about top-performing films, revenue distribution, and trends in customer preferences.","Which movies are in the top 10% by total revenue? Show the film ID, title, and total revenue.","Film apa aja yang masuk 10% teratas berdasarkan pendapatan? Tampilkan ID film, judul, dan total pendapatan.","['film_id', 'title', 'total_revenue']"
"Which customers have rented every film in a specific category (e.g., 'Action')? Show the customer ID, first name, and last name.","WITH action_films AS (
    SELECT 
        fc.film_id
    FROM 
        film_category fc
        JOIN category c ON fc.category_id = c.category_id
    WHERE 
        c.name = 'Action'
),
customer_rentals AS (
    SELECT 
        r.customer_id, 
        COUNT(DISTINCT i.film_id) AS films_rented
    FROM 
        rental r
        JOIN inventory i ON r.inventory_id = i.inventory_id
        JOIN action_films af ON i.film_id = af.film_id
    GROUP BY 
        r.customer_id
)
SELECT 
    c.customer_id, 
    c.first_name, 
    c.last_name
FROM 
    customer c
    JOIN customer_rentals cr ON c.customer_id = cr.customer_id
WHERE 
    cr.films_rented = (SELECT COUNT(*) FROM action_films);","This SQL query identifies customers who have rented every available 'Action' film. It first creates a CTE 'action_films' to retrieve all film IDs classified under the 'Action' category from the 'film_category' and 'category' tables. Another CTE, 'customer_rentals', counts the distinct 'Action' films rented by each customer using joins with the 'rental' and 'inventory' tables. The final selection filters for customers whose rental count matches the total number of 'Action' films, ensuring only those who have rented every 'Action' film are included in the output. Possible modifications include filtering for different genres, analyzing rental trends over time by incorporating rental dates, or ranking customers based on the percentage of action films they have rented instead of an exact match. This query helps answer questions about highly engaged customers, genre-based rental behaviors, and potential marketing opportunities for loyal renters.","Which customers have rented every film in a specific category (e.g., 'Action')? Show the customer ID, first name, and last name.","Siapa pelanggan yang sudah menyewa semua film dalam satu genre (misalnya genre 'Action')? Tampilkan ID pelanggan, nama depan, dan nama belakang.","['customer_id', 'first_name', 'last_name']"
"Which film has the highest average rental duration per customer? Show the film ID, title, and the average rental duration. Return only the top 1.","SELECT f.film_id, f.title, AVG(f.rental_duration) AS average_rental_duration
FROM film f
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
GROUP BY f.film_id, f.title
ORDER BY average_rental_duration DESC
LIMIT 1;","This SQL query identifies the top 10 films with the longest average rental duration. It first calculates the average rental duration for each film by computing the difference between 'return_date' and 'rental_date' using the 'rental', 'inventory', and 'film' tables. The results are grouped by film ID and title, then ordered in descending order of average rental duration. The final selection retrieves the top 10 films with the highest values. Potential modifications include filtering by specific genres by joining with the 'film_category' table, analyzing rental duration trends over time by incorporating rental dates, or segmenting results by customer demographics to understand rental behaviors. This query helps answer questions related to film popularity in terms of rental retention, customer engagement with longer rentals, and inventory management strategies.","Which movie has the highest average rental duration per customer? Show the film ID, title, and average rental duration. Just return the top 1.","Film mana yang punya rata-rata waktu sewa paling lama per pelanggan? Tampilkan ID film, judul, dan rata-rata durasi sewanya. Cukup ambil satu yang paling tinggi.","['film_id', 'title', 'avg_rental_duration']"
"Which staff member has processed the most payments in total? Show their staff ID, first name, last name, and the total amount processed. Return only the top 1.","SELECT 
    s.staff_id, 
    s.first_name, 
    s.last_name, 
    COUNT(p.payment_id) AS total_payments, 
    SUM(p.amount) AS total_amount
FROM 
    staff s
    JOIN payment p ON s.staff_id = p.staff_id
GROUP BY 
    s.staff_id
ORDER BY 
    total_amount DESC;","This SQL query retrieves payment performance metrics for each staff member by calculating the total number of payments processed and the total revenue collected. It joins the 'staff' and 'payment' tables using 'staff_id', then groups results by staff ID while aggregating the total number of transactions and the total payment amount per staff member. The output is ordered in descending order of total revenue collected. Possible modifications include filtering by date range to analyze performance trends over time, segmenting by store location if multiple stores exist, or incorporating customer demographics to assess payment trends by staff interactions. This query can help answer questions about staff efficiency in handling transactions, revenue contribution per staff member, and potential training needs based on performance.","Which staff member has processed the most payments, and what is the total amount they’ve handled? Show the staff ID, first name, last name, and total amount. Just return the top 1.","Siapa staf yang paling banyak memproses pembayaran, dan berapa total yang mereka proses? Tampilkan ID staf, nama depan, nama belakang, dan total jumlahnya. Cukup ambil satu yang paling atas.","['staff_id', 'first_name', 'last_name', 'total_amount']"
"Which films have never been rented but are in the top 5 most popular categories? Show the film ID, title, and category name, and sort the results by film ID ascending.","WITH top_categories AS (
    SELECT 
        fc.category_id
    FROM 
        film_category fc
        JOIN inventory i ON fc.film_id = i.film_id
        JOIN rental r ON i.inventory_id = r.inventory_id
    GROUP BY 
        fc.category_id
    ORDER BY 
        COUNT(r.rental_id) DESC
    LIMIT 5
),
films_in_top_categories AS (
    SELECT 
        f.film_id, 
        f.title, 
        c.name AS category_name
    FROM 
        film f
        JOIN film_category fc ON f.film_id = fc.film_id
        JOIN category c ON fc.category_id = c.category_id
        JOIN top_categories tc ON fc.category_id = tc.category_id
),
rented_films AS (
    SELECT DISTINCT 
        f.film_id
    FROM 
        film f
        JOIN inventory i ON f.film_id = i.film_id
        JOIN rental r ON i.inventory_id = r.inventory_id
)
SELECT 
    f.film_id, 
    f.title, 
    f.category_name
FROM 
    films_in_top_categories f
EXCEPT
SELECT 
    f.film_id, 
    f.title, 
    f.category_name
FROM 
    films_in_top_categories f
    JOIN rented_films r ON f.film_id = r.film_id
ORDER BY 
    film_id;
","This SQL query identifies unrented films within the top 5 most popular rental categories using a multi-step CTE approach. It first identifies the top categories by rental count, then finds all films in those categories, and finally filters out any films that have been rented at least once using an EXCEPT operation. The query employs three CTEs (top_categories, films_in_top_categories, and rented_films) with multiple joins across the 'film_category', 'inventory', 'rental', and 'category' tables. The output lists unrented films in high-demand categories, which could indicate missed revenue opportunities. The query could be modified to: 1) include rental rates to prioritize promotion of higher-value films, 2) add film age to identify if newer releases are underperforming, or 3) expand the category selection beyond top 5. Potential business questions include identifying hidden gems in popular genres, evaluating inventory acquisition strategies, or detecting potential marketing gaps for quality content.","Which films have never been rented but belong to the top 5 most popular categories? Show the film ID, title, and category name, and sort the results by film ID.","Film apa saja yang belum pernah disewa tetapi termasuk dalam 5 kategori film paling populer? Tampilkan ID film, judul, dan nama kategori, lalu urutkan hasilnya berdasarkan ID film.","['film_id', 'title', 'category_name']"
"Which customers have rented films from all categories? Show the customer ID, first name, and last name.","WITH customer_categories AS (
    SELECT 
        r.customer_id, 
        COUNT(DISTINCT fc.category_id) AS category_count
    FROM 
        rental r
        JOIN inventory i ON r.inventory_id = i.inventory_id
        JOIN film_category fc ON i.film_id = fc.film_id
    GROUP BY 
        r.customer_id
)
SELECT 
    c.customer_id, 
    c.first_name, 
    c.last_name
FROM 
    customer c
    JOIN customer_categories cc ON c.customer_id = cc.customer_id
WHERE 
    cc.category_count = (SELECT COUNT(*) FROM category);","This SQL query identifies customers who have rented films from every available category. It first calculates the number of distinct film categories each customer has rented from using the 'rental', 'inventory', and 'film_category' tables. Then, it filters customers whose category count matches the total number of available categories, ensuring only those who have rented across all categories are included. The final output consists of customer IDs, first names, and last names, which can be useful for analyzing highly engaged customers or tailoring loyalty programs. Potential modifications include adjusting the query to find customers who have rented from a minimum threshold of categories rather than all, tracking rental patterns over time to analyze changes in customer preferences, or incorporating rental frequency to differentiate occasional renters from frequent customers. This query helps answer questions related to customer engagement, cross-category rental behavior, and targeted marketing strategies.","Which customers have rented films from all categories? Show the customer ID, first name, and last name.","Siapa aja pelanggan yang sudah nyewa film dari semua kategori? Tampilkan ID pelanggan, nama depan, dan nama belakang.","['customer_id', 'first_name', 'last_name']"
"Which films have the highest revenue per day of rental? Show the film ID, title, and revenue per day.","WITH film_revenue_per_day AS (
    SELECT 
        f.film_id, 
        f.title, 
        SUM(p.amount) / NULLIF(SUM(EXTRACT(DAY FROM (r.return_date - r.rental_date))), 0) AS revenue_per_day
    FROM 
        film f
    JOIN inventory i ON f.film_id = i.film_id
    JOIN rental r ON i.inventory_id = r.inventory_id
    JOIN payment p ON r.rental_id = p.rental_id
    WHERE 
        r.return_date IS NOT NULL
    GROUP BY 
        f.film_id, f.title
)
SELECT 
    film_id, 
    title, 
    revenue_per_day
FROM 
    film_revenue_per_day
ORDER BY 
    revenue_per_day DESC
LIMIT 10;","This SQL query calculates the revenue generated per rental day for each film and retrieves the top 10 highest-earning films based on this metric. It derives revenue per day by summing payment amounts and dividing by the total rental duration, using the 'film', 'inventory', 'rental', and 'payment' tables. The results are grouped by film ID, ordered by revenue per day in descending order, and limited to the top 10. This query is useful for identifying the most profitable films on a per-day basis, which can inform pricing strategies and inventory management. Potential modifications include filtering by a specific time period to analyze recent trends, incorporating rental counts to compare revenue per day with rental volume, or adding film categories to see which genres contribute the most to revenue efficiency. Analysts may use this query to answer questions about film profitability, rental efficiency, and the impact of pricing strategies.","Which films have the highest revenue per day of rental? Show the film ID, title, and revenue per day.","Film mana yang penghasilannya paling tinggi per hari sewa? Tampilkan ID film, judul, dan pendapatan per hari.","['film_id', 'title', 'revenue_per_day']"
"Which films have the longest and shortest rental durations in each category? Show the category name, film title, and rental duration.","WITH film_durations AS (
    SELECT 
        c.name AS category_name, 
        f.title, 
        f.rental_duration,
        RANK() OVER (PARTITION BY c.name ORDER BY f.rental_duration DESC) AS longest_rank,
        RANK() OVER (PARTITION BY c.name ORDER BY f.rental_duration ASC) AS shortest_rank
    FROM 
        film f
        JOIN film_category fc ON f.film_id = fc.film_id
        JOIN category c ON fc.category_id = c.category_id
)
SELECT 
    category_name, 
    title, 
    rental_duration
FROM 
    film_durations
WHERE 
    longest_rank = 1 OR shortest_rank = 1
ORDER BY 
    category_name, rental_duration DESC;","This SQL query identifies the films with the longest and shortest rental durations within each category. It utilizes the 'film', 'film_category', and 'category' tables and employs window functions (RANK()) to rank films by rental duration in descending and ascending order for each category. The results filter only the top-ranked (longest and shortest) films per category and are sorted by category name and rental duration. This query is useful for understanding rental duration trends across different film categories, which can inform inventory planning and pricing strategies. Potential modifications include adding rental frequency metrics to analyze whether longer or shorter rental durations correlate with higher rentals, filtering by specific time periods to track changes in rental duration preferences over time, or incorporating customer demographics to assess preferences by audience segments. Analysts may use this query to explore category-based rental patterns, identify extreme rental durations, and evaluate the impact of rental policies.","Which films have the longest and shortest rental durations in each category? Show the category name, film title, and rental duration.","Untuk tiap kategori, film mana yang punya durasi sewa terpanjang dan terpendek? Tampilkan nama kategori, judul film, dan durasi sewa.","['category_name', 'title', 'rental_duration']"
"Which customers have rented films from exactly 2 categories? Show the customer ID, first name, last name, and the categories they've rented from.","WITH customer_categories AS (
    SELECT 
        r.customer_id, 
        c.name AS category_name
    FROM 
        rental r
    JOIN inventory i ON r.inventory_id = i.inventory_id
    JOIN film_category fc ON i.film_id = fc.film_id
    JOIN category c ON fc.category_id = c.category_id
    GROUP BY 
        r.customer_id, c.name
),
customer_category_count AS (
    SELECT 
        cc.customer_id, 
        cu.first_name, 
        cu.last_name, 
        STRING_AGG(cc.category_name, ', ' ORDER BY cc.category_name) AS categories,
        COUNT(DISTINCT cc.category_name) AS category_count
    FROM 
        customer_categories cc
    JOIN customer cu ON cc.customer_id = cu.customer_id
    GROUP BY 
        cc.customer_id, cu.first_name, cu.last_name
)
SELECT 
    customer_id, 
    first_name, 
    last_name, 
    categories
FROM 
    customer_category_count
WHERE 
    category_count = 2;","This SQL query identifies customers who have rented films from exactly two distinct categories. It utilizes the 'rental', 'inventory', 'film_category', and 'category' tables to associate customers with film categories based on rental history. The query employs GROUP_CONCAT() to concatenate category names per customer and filters the results using HAVING COUNT(category_name) = 2 to retain only those with rentals spanning two categories. The output includes customer details and their rented categories, providing insights into customer preferences. Potential modifications include adjusting the category count filter to analyze customers with broader or narrower genre preferences, incorporating rental frequency metrics to highlight customers with consistent rental patterns, or joining payment data to assess revenue contributions from multi-category renters. Analysts can leverage this query to understand cross-category rental behavior, segment customers by rental diversity, and refine marketing strategies for targeted promotions.","Which customers have rented films from exactly 2 categories? Show the customer ID, first name, last name, and the categories they've rented from.","Ada gak pelanggan yang nyewa film dari tepat 2 kategori? Tampilkan ID pelanggan, nama depan, nama belakang, dan daftar kategorinya.","['customer_id', 'first_name', 'last_name', 'categories']"
"Which films have been rented more than the average number of rentals for their category? Show the film ID, title, category name, and rental count.","WITH category_rentals AS (
    SELECT 
        fc.category_id, 
        f.film_id, 
        f.title, 
        COUNT(r.rental_id) AS rental_count,
        AVG(COUNT(r.rental_id)) OVER (PARTITION BY fc.category_id) AS avg_rentals_per_category
    FROM 
        film f
        JOIN film_category fc ON f.film_id = fc.film_id
        JOIN inventory i ON f.film_id = i.film_id
        JOIN rental r ON i.inventory_id = r.inventory_id
    GROUP BY 
        fc.category_id, f.film_id
)
SELECT 
    film_id, 
    title, 
    c.name AS category_name, 
    rental_count
FROM 
    category_rentals cr
    JOIN category c ON cr.category_id = c.category_id
WHERE 
    rental_count > avg_rentals_per_category;","This SQL query identifies films that have been rented more frequently than the average rental count within their respective categories. It utilizes the 'film', 'film_category', 'inventory', 'rental', and 'category' tables to count rentals per film, compute the average rentals per category using a window function, and filter films with above-average rentals. The final output includes the film ID, title, category name, and rental count, offering insights into high-performing films within each category. Potential modifications include adjusting the threshold for selection (e.g., identifying top 10% most-rented films per category), incorporating revenue data to analyze financial performance alongside rental popularity, or expanding the query to evaluate rental trends over time. Analysts can use this query to determine which films drive engagement, optimize inventory stocking, and refine marketing efforts based on rental demand patterns.","Which films have been rented more than the average number of rentals for their category? Show the film ID, title, category name, and rental count.","Film mana yang disewa lebih banyak dari rata-rata di kategori-nya? Tampilkan ID film, judul, nama kategori, dan jumlah penyewaannya.","['film_id', 'title', 'category_name', 'rental_count']"
"Which actors have never appeared in a film with a rating of 'R'? Show the actor ID, first name, and last name.","SELECT 
    a.actor_id, 
    a.first_name, 
    a.last_name
FROM 
    actor a
WHERE 
    NOT EXISTS (
        SELECT 1
        FROM film_actor fa
        JOIN film f ON fa.film_id = f.film_id
        WHERE fa.actor_id = a.actor_id AND f.rating = 'R'
    );","This SQL query retrieves a list of actors who have never appeared in an 'R'-rated film. It utilizes the 'actor', 'film_actor', and 'film' tables, employing a NOT EXISTS subquery to exclude actors associated with films that have an 'R' rating. The result includes the actor ID, first name, and last name, offering insights into actors who have exclusively worked in less restrictive film categories. Potential modifications include adjusting the rating filter to analyze actors by other MPAA ratings, identifying actors who have only appeared in a specific genre by joining with the 'film_category' table, or incorporating rental data to assess the popularity of these actors’ films. This query can help analysts study trends in casting choices, assess actors' suitability for family-friendly productions, or explore correlations between rating preferences and box office performance.","Which actors have never appeared in a film with a rating of 'R'? Show the actor ID, first name, and last name.","Aktor mana yang belum pernah main di film dengan rating 'R'? Tampilkan ID aktor, nama depan, dan nama belakang.","['actor_id', 'first_name', 'last_name']"
"Which films have the highest replacement cost but have never been rented? Show the film ID, title, and replacement cost.","SELECT 
    f.film_id, 
    f.title, 
    f.replacement_cost
FROM 
    film f
    LEFT JOIN inventory i ON f.film_id = i.film_id
    LEFT JOIN rental r ON i.inventory_id = r.inventory_id
WHERE 
    r.rental_id IS NULL
ORDER BY 
    f.replacement_cost DESC
LIMIT 10;","This SQL query identifies the ten most expensive films (by replacement cost) that have never been rented. It retrieves film details from the 'film' table and performs LEFT JOINs with 'inventory' and 'rental' tables to check for rental activity. The NULL filter on 'rental_id' ensures that only films without any recorded rentals are included. Results are ordered by 'replacement_cost' in descending order and limited to the top 10. Potential modifications include adjusting the LIMIT value to analyze a broader set of films, filtering by specific categories by joining with the 'film_category' table, or incorporating last rental dates to identify films that have not been rented in a long time rather than never rented at all. This query can help inventory managers assess underperforming assets, optimize film selections, or determine pricing strategies for seldom-rented titles.","Which films have the highest replacement cost but have never been rented? Show the film ID, title, and replacement cost.","Film apa yang biaya gantinya paling mahal tapi belum pernah disewa? Tampilkan ID film, judul, dan biaya ganti.","['film_id', 'title', 'replacement_cost']"
"Which customers have rented films from all stores? Show the customer ID, first name, and last name.","WITH customer_stores AS (
    SELECT 
        r.customer_id, 
        COUNT(DISTINCT i.store_id) AS store_count
    FROM 
        rental r
        JOIN inventory i ON r.inventory_id = i.inventory_id
    GROUP BY 
        r.customer_id
)
SELECT 
    c.customer_id, 
    c.first_name, 
    c.last_name
FROM 
    customer c
    JOIN customer_stores cs ON c.customer_id = cs.customer_id
WHERE 
    cs.store_count = (SELECT COUNT(*) FROM store);","This SQL query identifies customers who have rented movies from all available stores. It first creates a temporary table ('customer_stores') that counts the number of distinct stores each customer has rented from by joining the 'rental' and 'inventory' tables. The final selection retrieves customer details from the 'customer' table for those whose 'store_count' matches the total number of stores from the 'store' table. Potential modifications include adjusting the filter to find customers who have rented from a specific minimum number of stores, incorporating rental frequency to analyze high-value customers, or adding time constraints to track multi-store renters within a given period. This query can help businesses understand customer engagement across multiple locations, identify loyal customers, or inform marketing strategies targeting multi-location renters.","Which customers have rented films from all stores? Show the customer ID, first name, and last name.","Siapa pelanggan yang sudah nyewa dari semua toko? Tampilkan ID pelanggan, nama depan, dan nama belakang.","['customer_id', 'first_name', 'last_name']"
"Which films have been rented in all stores? Show the film ID, title, and the number of stores it was rented in.","WITH film_stores AS (
    SELECT 
        f.film_id, 
        f.title, 
        COUNT(DISTINCT i.store_id) AS store_count
    FROM 
        film f
        JOIN inventory i ON f.film_id = i.film_id
        JOIN rental r ON i.inventory_id = r.inventory_id
    GROUP BY 
        f.film_id
)
SELECT 
    film_id, 
    title, 
    store_count
FROM 
    film_stores
WHERE 
    store_count = (SELECT COUNT(*) FROM store);","This SQL query identifies films that have been rented from all available store locations. It first constructs a temporary table ('film_stores') that calculates the number of distinct stores each film has been rented from by joining the 'film', 'inventory', and 'rental' tables. The final selection retrieves films where the 'store_count' matches the total number of stores from the 'store' table. Potential modifications include adjusting the filter to find films available in a specific minimum number of stores, incorporating rental frequency to highlight the most rented films across all locations, or adding a time filter to track recent distribution patterns. This query helps businesses assess film availability, optimize inventory distribution, and identify popular films across multiple locations.","Which films have been rented in all stores? Show the film ID, title, and the number of stores it was rented in.","Film mana yang sudah pernah disewa di semua toko? Tampilkan ID film, judul, dan jumlah toko tempat film itu disewa.","['film_id', 'title', 'store_count']"
"Which films have the highest revenue per minute of runtime? Show the film ID, title, runtime, and revenue per minute.","WITH film_revenue AS (
    SELECT 
        f.film_id, 
        f.title, 
        f.length, 
        SUM(p.amount) AS total_revenue
    FROM 
        film f
        JOIN inventory i ON f.film_id = i.film_id
        JOIN rental r ON i.inventory_id = r.inventory_id
        JOIN payment p ON r.rental_id = p.rental_id
    GROUP BY 
        f.film_id
)
SELECT 
    film_id, 
    title, 
    length, 
    total_revenue / length AS revenue_per_minute
FROM 
    film_revenue
ORDER BY 
    revenue_per_minute DESC
LIMIT 10;","This SQL query identifies the top 10 films generating the highest revenue per minute of runtime. It first calculates total revenue per film by summing payments from the 'payment' table, linking through the 'rental' and 'inventory' tables to the 'film' table. The final selection computes revenue per minute by dividing total revenue by film length and sorts the results in descending order. Potential modifications include filtering by genre or release year to analyze trends, adjusting the ranking threshold to highlight underperforming films, or incorporating rental counts to compare profitability based on demand. This query is useful for evaluating film profitability, optimizing pricing strategies, and identifying high-value films based on rental revenue efficiency.","Which films have the highest revenue per minute of runtime? Show the film ID, title, runtime, and revenue per minute.","Film mana yang punya pendapatan paling tinggi per menit durasi? Tampilkan ID film, judul, durasi, dan pendapatan per menit.","['film_id', 'title', 'length', 'revenue_per_minute']"
"Which customers have rented films from every actor in a specific film (e.g., film_id = 1)? Show the customer ID, first name, and last name.","WITH film_actors AS (
    SELECT 
        fa.actor_id
    FROM 
        film_actor fa
    WHERE 
        fa.film_id = 1
),
customer_actors AS (
    SELECT 
        r.customer_id, 
        COUNT(DISTINCT fa.actor_id) AS actor_count
    FROM 
        rental r
        JOIN inventory i ON r.inventory_id = i.inventory_id
        JOIN film_actor fa ON i.film_id = fa.film_id
    WHERE 
        fa.actor_id IN (SELECT actor_id FROM film_actors)
    GROUP BY 
        r.customer_id
)
SELECT 
    c.customer_id, 
    c.first_name, 
    c.last_name
FROM 
    customer c
    JOIN customer_actors ca ON c.customer_id = ca.customer_id
WHERE 
    ca.actor_count = (SELECT COUNT(*) FROM film_actors);","This SQL query identifies customers who have rented films featuring all actors from a specific film (film_id = 1). It first extracts the actors associated with the given film from the 'film_actor' table. Then, it calculates how many of those actors appear in the films rented by each customer using a join between 'rental', 'inventory', and 'film_actor'. The final selection filters customers who have rented films with every actor from the target film. Possible modifications include changing the reference film to analyze different actor combinations, adding rental timestamps to track customer behavior over time, or incorporating genre data to identify customer preferences. This query is useful for customer segmentation, targeted marketing based on actor preferences, and analyzing viewing patterns related to specific casts.","Which customers have rented films from every actor in a specific film (e.g., film_id = 1)? Show the customer ID, first name, and last name.","Siapa pelanggan yang nyewa dari semua aktor di film tertentu (misalnya ID film = 1)? Tampilkan ID pelanggan, nama depan, dan nama belakang.","['customer_id', 'first_name', 'last_name']"
"Which films have the highest number of actors but have never been rented? Show the film ID, title, and number of actors.","WITH film_actor_counts AS (
    SELECT 
        f.film_id, 
        f.title, 
        COUNT(fa.actor_id) AS actor_count
    FROM 
        film f
        JOIN film_actor fa ON f.film_id = fa.film_id
        LEFT JOIN inventory i ON f.film_id = i.film_id
        LEFT JOIN rental r ON i.inventory_id = r.inventory_id
    WHERE 
        r.rental_id IS NULL
    GROUP BY 
        f.film_id
)
SELECT 
    film_id, 
    title, 
    actor_count
FROM 
    film_actor_counts
ORDER BY 
    actor_count DESC
LIMIT 10;","This SQL query identifies the top 10 unrented films with the highest number of actors. It first counts the number of actors associated with each film using the 'film' and 'film_actor' tables. The query then performs left joins with 'inventory' and 'rental' to filter out any films that have been rented (i.e., where 'rental_id' is NULL). The results are ordered by actor count in descending order, showing films that feature the most actors but have never been rented. Possible modifications include adjusting the filter to show films with low but nonzero rentals, incorporating genre data to analyze trends in specific categories, or adding release dates to examine whether newer films are underperforming. This query can help with inventory decisions, marketing strategies for underperforming films, and actor-based analysis of rental patterns.","Which films have the highest number of actors but have never been rented? Show the film ID, title, and number of actors.","Film mana yang punya jumlah aktor terbanyak tapi belum pernah disewa? Tampilkan ID film, judul, dan jumlah aktor.","['film_id', 'title', 'actor_count']"
Which movies have the longest runtime but have never been rented? Show the movie title and runtime.,"SELECT 
    f.title, 
    f.length AS runtime
FROM 
    film f
    LEFT JOIN inventory i ON f.film_id = i.film_id
    LEFT JOIN rental r ON i.inventory_id = r.inventory_id
WHERE 
    r.rental_id IS NULL
ORDER BY 
    f.length DESC
LIMIT 10;","This SQL query retrieves the 10 longest films that have never been rented. It uses the 'film' table and performs left joins with 'inventory' and 'rental' to identify films where 'rental_id' is NULL, indicating no rentals. The results are ordered by film length in descending order to highlight the longest unrented films. Possible modifications include adjusting the filter to find films with low rental counts rather than zero, incorporating genre data to determine if certain types of films are underperforming, or analyzing rental trends over time by adding rental timestamps. This query can help identify films that may need better marketing, removal from inventory, or reassessment for availability in stores.",Which movies have the longest runtime but have never been rented? Show the movie title and runtime.,Film apa yang durasinya paling panjang tapi belum pernah disewa? Tampilkan judul film dan durasi.,"['title', 'runtime']"
Which customers have rented the most movies in a single day? Show the customer name and the number of movies rented on that day.,"WITH customer_daily_rentals AS (
    SELECT 
        c.customer_id, 
        CONCAT(c.first_name, ' ', c.last_name) AS customer_name, 
        DATE(r.rental_date) AS rental_day, 
        COUNT(r.rental_id) AS rentals_count
    FROM 
        customer c
        JOIN rental r ON c.customer_id = r.customer_id
    GROUP BY 
        c.customer_id, rental_day
)
SELECT 
    customer_name, 
    rentals_count
FROM 
    customer_daily_rentals
ORDER BY 
    rentals_count DESC
LIMIT 10;","This SQL query identifies the top 10 customers with the highest number of rentals on a single day. It retrieves rental data from the 'rental' table, joining it with the 'customer' table, and groups results by customer and rental date. The query then calculates the total rentals per customer per day and orders the results in descending order based on daily rental count. The expected output provides insight into high-frequency renters, which can be useful for customer loyalty analysis or targeted promotions. Possible modifications include filtering by a specific date range to analyze seasonal trends, grouping results by month instead of day to observe broader rental behaviors, or incorporating payment data to analyze spending patterns among frequent renters.",Which customers have rented the most movies in a single day? Show the customer name and the number of movies rented on that day.,Siapa pelanggan yang nyewa film terbanyak dalam satu hari? Tampilkan nama pelanggan dan jumlah film yang disewa hari itu.,"['customer_name', 'rentals_count']"
Which movies have been rented more than 10 times but have never been returned late? Show the movie title and number of rentals.,"SELECT 
    f.title, 
    COUNT(r.rental_id) AS rentals_count
FROM 
    film f
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
WHERE 
    r.return_date <= (r.rental_date + f.rental_duration * INTERVAL '1 day')
GROUP BY 
    f.film_id, f.title
HAVING 
    COUNT(r.rental_id) > 10;","This SQL query identifies films that have been rented more than 10 times while being returned within the allocated rental duration. It retrieves data from the 'film', 'inventory', and 'rental' tables, filtering rentals where the return date does not exceed the rental duration. The query groups results by film ID and counts the number of rentals per film, applying a HAVING clause to include only films with more than 10 rentals. The output provides insights into popular films that are returned on time, which can be useful for inventory management and rental policy analysis. Possible modifications include adjusting the rental threshold to identify highly or rarely rented films, incorporating late returns to analyze overdue rentals, or filtering by a specific time period to examine seasonal trends in film popularity.",Which movies have been rented more than 10 times but have never been returned late? Show the movie title and number of rentals.,Film apa yang disewa lebih dari 10 kali tapi gak pernah telat dikembalikan? Tampilkan judul film dan jumlah penyewaannya.,"['title', 'rentals_count']"
Which staff members have processed the most payments on weekends? Show the staff name and the number of payments processed.,"SELECT 
    s.first_name || ' ' || s.last_name AS staff_name, 
    COUNT(p.payment_id) AS payments_count
FROM 
    staff s
JOIN payment p ON s.staff_id = p.staff_id
WHERE 
    EXTRACT(DOW FROM p.payment_date) IN (0, 6)
GROUP BY 
    s.staff_id, s.first_name, s.last_name
ORDER BY 
    payments_count DESC
LIMIT 10;
","This SQL query retrieves the top 10 staff members who processed the highest number of payments on weekends (Saturday and Sunday). It queries the 'staff' and 'payment' tables, joining them on 'staff_id', and filters transactions occurring on weekends using the DAYOFWEEK function. The query then groups results by staff member, counting the number of payments processed per staff, and orders them in descending order of payment count. The output provides insights into weekend workload distribution among staff, which could inform staffing decisions and scheduling. Possible modifications include adjusting the filter to analyze payments on weekdays, adding a date range filter to focus on a specific time period, or incorporating total payment amounts to evaluate staff performance based on revenue generated rather than transaction count.""",Which staff members have processed the most payments on weekends? Show the staff name and the number of payments processed.,Staf mana yang paling banyak memproses pembayaran saat akhir pekan? Tampilkan nama staf dan jumlah pembayaran yang diproses.,"['staff_name', 'payments_count']"
"Which movies have the highest revenue but the lowest rental rate? Show the movie title, rental rate, and total revenue.
","WITH film_revenue AS (
    SELECT 
        f.film_id, 
        f.title, 
        f.rental_rate, 
        SUM(p.amount) AS total_revenue
    FROM 
        film f
        JOIN inventory i ON f.film_id = i.film_id
        JOIN rental r ON i.inventory_id = r.inventory_id
        JOIN payment p ON r.rental_id = p.rental_id
    GROUP BY 
        f.film_id
)
SELECT 
    title, 
    rental_rate, 
    total_revenue
FROM 
    film_revenue
ORDER BY 
    total_revenue DESC, rental_rate ASC
LIMIT 10;","This SQL query retrieves the top 10 films that generated the highest total revenue, ordered by revenue in descending order and rental rate in ascending order for tie-breaking. It uses the 'film', 'inventory', 'rental', and 'payment' tables, joining them on relevant keys to calculate total revenue per film by summing the 'amount' field from 'payment'. The query also includes each film's rental rate for additional context. This output helps in identifying the most profitable films, aiding in business decisions such as pricing strategies and inventory management. Potential modifications include filtering results by a specific time period to analyze revenue trends, adding a genre-based breakdown to assess profitability by category, or incorporating rental frequency to determine if high revenue films also have high rental counts.","Which movies have the highest revenue but the lowest rental rate? Show the movie title, rental rate, and total revenue.","Film mana yang pendapatannya tinggi tapi harga sewanya rendah? Tampilkan judul film, harga sewa, dan total pendapatan.","['title', 'rental_rate', 'total_revenue']"
Which customers have rented movies from every store but have never rented a movie with a rating of 'R'? Show the customer full name.,"WITH customer_stores AS (
    SELECT 
        c.customer_id, 
        CONCAT(c.first_name, ' ', c.last_name) AS customer_name, 
        COUNT(DISTINCT i.store_id) AS store_count
    FROM 
        customer c
        JOIN rental r ON c.customer_id = r.customer_id
        JOIN inventory i ON r.inventory_id = i.inventory_id
    GROUP BY 
        c.customer_id
),
customer_no_r_ratings AS (
    SELECT 
        c.customer_id
    FROM 
        customer c
    WHERE 
        NOT EXISTS (
            SELECT 1
            FROM rental r
            JOIN inventory i ON r.inventory_id = i.inventory_id
            JOIN film f ON i.film_id = f.film_id
            WHERE r.customer_id = c.customer_id AND f.rating = 'R'
        )
)
SELECT 
    cs.customer_name
FROM 
    customer_stores cs
    JOIN customer_no_r_ratings cnr ON cs.customer_id = cnr.customer_id
WHERE 
    cs.store_count = (SELECT COUNT(*) FROM store);","This SQL query identifies customers who have rented from all available stores and have never rented a film with an 'R' rating. It utilizes the 'customer', 'rental', 'inventory', 'film', and 'store' tables, employing common table expressions (CTEs) to calculate the number of distinct stores each customer has rented from and to filter out customers who have rented 'R'-rated films. The final result lists customers who meet both conditions. This query is useful for understanding customer rental behavior and identifying family-friendly renters. Possible modifications include adjusting the rating filter to analyze customer preferences for specific film ratings, segmenting results by rental frequency to identify high-value customers, or adding a time filter to focus on recent rental activity.",Which customers have rented movies from every store but have never rented a movie with a rating of 'R'? Show the customer full name.,Ada pelanggan yang sudah nyewa dari semua toko tapi gak pernah nyewa film dengan rating 'R'? Tampilkan nama lengkap pelanggan.,['customer_name']
Which movies have been rented by customers from more than 5 different cities? Show the movie title and the number of cities.,"WITH movie_city_rentals AS (
    SELECT 
        f.title, 
        COUNT(DISTINCT ci.city_id) AS city_count
    FROM 
        film f
        JOIN inventory i ON f.film_id = i.film_id
        JOIN rental r ON i.inventory_id = r.inventory_id
        JOIN customer c ON r.customer_id = c.customer_id
        JOIN address a ON c.address_id = a.address_id
        JOIN city ci ON a.city_id = ci.city_id
    GROUP BY 
        f.film_id
)
SELECT 
    title, 
    city_count
FROM 
    movie_city_rentals
WHERE 
    city_count > 5;","This SQL query identifies films that have been rented in more than five distinct cities, helping analyze the geographical reach and popularity of films. It utilizes the 'film', 'inventory', 'rental', 'customer', 'address', and 'city' tables, using joins to track rental activity across cities. The query aggregates the count of unique cities per film and filters results to include only those rented in more than five cities. This query is useful for understanding film demand distribution across locations. Potential modifications include adjusting the city threshold to analyze varying levels of popularity, incorporating revenue metrics to assess profitability by region, or adding a time filter to focus on recent rental trends.",Which movies have been rented by customers from more than 5 different cities? Show the movie title and the number of cities.,Film mana yang disewa oleh pelanggan dari lebih dari 5 kota? Tampilkan judul film dan jumlah kotanya.,"['title', 'city_count']"
Which movies have the highest number of actors but have never been rented? Show the movie title and number of actors.,"WITH film_actor_counts AS (
    SELECT 
        f.film_id, 
        f.title, 
        COUNT(fa.actor_id) AS actor_count
    FROM 
        film f
        JOIN film_actor fa ON f.film_id = fa.film_id
        LEFT JOIN inventory i ON f.film_id = i.film_id
        LEFT JOIN rental r ON i.inventory_id = r.inventory_id
    WHERE 
        r.rental_id IS NULL
    GROUP BY 
        f.film_id
)
SELECT 
    title, 
    actor_count
FROM 
    film_actor_counts
ORDER BY 
    actor_count DESC
LIMIT 10;","This SQL query identifies the top 10 films that have never been rented, ranked by the number of actors associated with each film. It utilizes the 'film', 'film_actor', 'inventory', and 'rental' tables, employing joins to count actors for each film while filtering out those that have rental records. The main metric calculated is the count of actors per film, which is then sorted in descending order. This query is useful for understanding films with high-profile casts that have not yet been rented, aiding inventory and marketing decisions. Possible modifications include removing the rental exclusion condition to analyze all films, incorporating rental revenue metrics to compare actor count with financial performance, or adding genre-based filtering to explore trends within specific film categories.",Which movies have the highest number of actors but have never been rented? Show the movie title and number of actors.,Film mana yang punya banyak aktor tapi belum pernah disewa? Tampilkan judul film dan jumlah aktor.,"['title', 'actor_count']"
"Which customers have rented the same movie more than once in a single month? Show the customer name, movie title, and the number of times rented.","WITH customer_movie_rentals AS (
    SELECT 
        c.customer_id, 
        CONCAT(c.first_name, ' ', c.last_name) AS customer_name, 
        f.title, 
        TO_CHAR(r.rental_date, 'YYYY-MM') AS rental_month,
        COUNT(r.rental_id) AS rentals_count
    FROM 
        customer c
    JOIN rental r ON c.customer_id = r.customer_id
    JOIN inventory i ON r.inventory_id = i.inventory_id
    JOIN film f ON i.film_id = f.film_id
    GROUP BY 
        c.customer_id, f.film_id, rental_month, c.first_name, c.last_name, f.title
)
SELECT 
    customer_name, 
    title, 
    rentals_count
FROM 
    customer_movie_rentals
WHERE 
    rentals_count > 1;","This SQL query identifies customers who have rented the same movie more than once within a given month. It pulls data from the 'customer', 'rental', 'inventory', and 'film' tables, utilizing joins to associate rentals with customers and films. The key metric computed is the count of rentals per customer per film per month, using DATE_FORMAT to group by month. The final filter ensures only cases where a movie was rented more than once by the same customer within a month are included. This query helps analyze customer re-engagement with specific films, which could be useful for targeted promotions or understanding movie popularity trends. Potential modifications include adjusting the rental count threshold to study broader viewing patterns, filtering by specific movie genres to analyze genre-based rewatch behavior, or incorporating rental revenue data to examine financial impact.","Which customers have rented the same movie more than once in a single month? Show the customer name, movie title, and the number of times rented.","Ada pelanggan yang nyewa film yang sama lebih dari sekali dalam bulan yang sama? Tampilkan nama pelanggan, judul film, dan jumlah penyewaan.","['customer_name', 'title', 'rentals_count']"
Which movies have been rented by customers from every country? Show the movie title and the number of countries.,"WITH movie_country_rentals AS (
    SELECT 
        f.title, 
        COUNT(DISTINCT co.country_id) AS country_count
    FROM 
        film f
        JOIN inventory i ON f.film_id = i.film_id
        JOIN rental r ON i.inventory_id = r.inventory_id
        JOIN customer c ON r.customer_id = c.customer_id
        JOIN address a ON c.address_id = a.address_id
        JOIN city ci ON a.city_id = ci.city_id
        JOIN country co ON ci.country_id = co.country_id
    GROUP BY 
        f.film_id
)
SELECT 
    title, 
    country_count
FROM 
    movie_country_rentals
WHERE 
    country_count = (SELECT COUNT(*) FROM country);","This SQL query identifies movies that have been rented in every available country by analyzing rental data across geographic locations. It pulls data from the 'film', 'inventory', 'rental', 'customer', 'address', 'city', and 'country' tables, using joins to link rentals to the countries where they occurred. The key metric computed is the number of distinct countries where each movie has been rented, and the final filter ensures that only movies rented in all countries are included. This query is useful for assessing global movie popularity and identifying films with universal appeal. Possible modifications include adjusting the threshold to find movies rented in a minimum number of countries, filtering by genre to analyze international genre performance, or incorporating rental revenue to examine global financial impact.",Which movies have been rented by customers from every country? Show the movie title and the number of countries.,Film mana yang disewa oleh pelanggan dari semua negara? Tampilkan judul film dan jumlah negara.,"['title', 'country_count']"
"Which movies have been rented the most during holidays (e.g., December)? Show the movie title and the number of rentals.","SELECT 
    f.title, 
    COUNT(r.rental_id) AS rentals_count
FROM 
    film f
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
WHERE 
    EXTRACT(MONTH FROM r.rental_date) = 12
GROUP BY 
    f.film_id, f.title
ORDER BY 
    rentals_count DESC
LIMIT 10;
","This SQL query identifies the top 10 most rented movies in December by counting the number of rentals for each film. It retrieves data from the 'film', 'inventory', and 'rental' tables, filtering rentals to include only those made in December using the MONTH() function. The query aggregates rental counts per film, orders the results in descending order, and limits the output to the top 10. This analysis is useful for understanding seasonal rental trends and identifying popular holiday movies. Potential modifications include adjusting the month filter to analyze different periods, incorporating revenue data to determine the highest-grossing films, or segmenting results by customer demographics to explore audience preferences.","Which movies have been rented the most during holidays (e.g., December)? Show the movie title and the number of rentals.",Film mana yang paling sering disewa saat libur (misalnya bulan Desember)? Tampilkan judul film dan jumlah penyewaan.,"['title', 'rentals_count']"
Which customers have rented movies from every category but have never rented a movie with a replacement cost over $20? Show the customer full name.,"WITH customer_categories AS (
    SELECT 
        c.customer_id, 
        CONCAT(c.first_name, ' ', c.last_name) AS customer_name, 
        COUNT(DISTINCT fc.category_id) AS category_count
    FROM 
        customer c
        JOIN rental r ON c.customer_id = r.customer_id
        JOIN inventory i ON r.inventory_id = i.inventory_id
        JOIN film_category fc ON i.film_id = fc.film_id
    GROUP BY 
        c.customer_id
),
customer_no_expensive_rentals AS (
    SELECT 
        c.customer_id
    FROM 
        customer c
    WHERE 
        NOT EXISTS (
            SELECT 1
            FROM rental r
            JOIN inventory i ON r.inventory_id = i.inventory_id
            JOIN film f ON i.film_id = f.film_id
            WHERE r.customer_id = c.customer_id AND f.replacement_cost > 20
        )
)
SELECT 
    cc.customer_name
FROM 
    customer_categories cc
    JOIN customer_no_expensive_rentals cne ON cc.customer_id = cne.customer_id
WHERE 
    cc.category_count = (SELECT COUNT(*) FROM category);","This SQL query identifies customers who have rented movies from every available category while never renting a movie with a replacement cost greater than $20. It uses the 'customer', 'rental', 'inventory', 'film_category', and 'film' tables, employing two CTEs: one to count the number of distinct categories each customer has rented from and another to filter out customers who have rented expensive films. The final result lists customers meeting both conditions. This query is useful for identifying budget-conscious but highly diverse renters. Possible modifications include adjusting the replacement cost threshold to analyze different spending behaviors, incorporating rental frequency to identify high-volume renters, or adding demographic data to explore patterns among customer segments.",Which customers have rented movies from every category but have never rented a movie with a replacement cost over $20? Show the customer full name.,Ada pelanggan yang nyewa dari semua kategori tapi gak pernah nyewa film dengan biaya ganti di atas $20? Tampilkan nama lengkap pelanggan.,['customer_name']
"Which movies have the highest number of rentals but the lowest replacement cost? Show the movie title, replacement cost, and number of rentals.","WITH film_rentals AS (
    SELECT 
        f.film_id, 
        f.title, 
        f.replacement_cost, 
        COUNT(r.rental_id) AS rentals_count
    FROM 
        film f
        JOIN inventory i ON f.film_id = i.film_id
        JOIN rental r ON i.inventory_id = r.inventory_id
    GROUP BY 
        f.film_id
)
SELECT 
    title, 
    replacement_cost, 
    rentals_count
FROM 
    film_rentals
ORDER BY 
    rentals_count DESC, replacement_cost ASC
LIMIT 10;","This SQL query retrieves the top 10 most rented films, prioritizing those with the highest rental counts and resolving ties by selecting the ones with the lowest replacement costs. It utilizes the 'film', 'inventory', and 'rental' tables, aggregating rental counts for each film and incorporating replacement cost as a secondary sorting criterion. The expected output provides insights into the most popular yet cost-effective films, which could inform inventory management and promotional strategies. Potential modifications include filtering by rental date range to analyze trends over time, adding genre information to identify category-specific popularity, or incorporating customer demographics to determine audience preferences.","Which movies have the highest number of rentals but the lowest replacement cost? Show the movie title, replacement cost, and number of rentals.","Film apa yang paling sering disewa tapi biaya gantinya rendah? Tampilkan judul film, biaya ganti, dan jumlah penyewaan.","['title', 'replacement_cost', 'rentals_count']"
Which customers have rented movies from every store but have never rented a movie with a runtime over 2 hours? Show the customer full name.,"WITH customer_stores AS (
    SELECT 
        c.customer_id, 
        CONCAT(c.first_name, ' ', c.last_name) AS customer_name, 
        COUNT(DISTINCT i.store_id) AS store_count
    FROM 
        customer c
        JOIN rental r ON c.customer_id = r.customer_id
        JOIN inventory i ON r.inventory_id = i.inventory_id
    GROUP BY 
        c.customer_id
),
customer_no_long_movies AS (
    SELECT 
        c.customer_id
    FROM 
        customer c
    WHERE 
        NOT EXISTS (
            SELECT 1
            FROM rental r
            JOIN inventory i ON r.inventory_id = i.inventory_id
            JOIN film f ON i.film_id = f.film_id
            WHERE r.customer_id = c.customer_id AND f.length > 120
        )
)
SELECT 
    cs.customer_name
FROM 
    customer_stores cs
    JOIN customer_no_long_movies cnl ON cs.customer_id = cnl.customer_id
WHERE 
    cs.store_count = (SELECT COUNT(*) FROM store);","This SQL query identifies customers who have rented movies from all available stores but have never rented a film longer than 2 hours. It leverages the 'customer', 'rental', 'inventory', 'film', and 'store' tables, using a common table expression (CTE) to calculate the number of unique stores each customer has rented from and another CTE to filter out customers who have rented long movies. The final result provides a list of such customers, which can be useful for targeted marketing campaigns or analyzing customer rental preferences. Potential modifications include adjusting the movie length threshold to study preferences for different movie durations, segmenting customers based on their rental frequency, or incorporating genre data to determine specific content preferences.",Which customers have rented movies from every store but have never rented a movie with a runtime over 2 hours? Show the customer full name.,Siapa pelanggan yang nyewa dari semua toko tapi gak pernah nyewa film berdurasi lebih dari 2 jam? Tampilkan nama lengkap pelanggan.,['customer_name']
Which movies have been rented by customers from more than 10 different cities? Show the movie title and the number of cities.,"WITH movie_city_rentals AS (
    SELECT 
        f.title, 
        COUNT(DISTINCT ci.city_id) AS city_count
    FROM 
        film f
        JOIN inventory i ON f.film_id = i.film_id
        JOIN rental r ON i.inventory_id = r.inventory_id
        JOIN customer c ON r.customer_id = c.customer_id
        JOIN address a ON c.address_id = a.address_id
        JOIN city ci ON a.city_id = ci.city_id
    GROUP BY 
        f.film_id
)
SELECT 
    title, 
    city_count
FROM 
    movie_city_rentals
WHERE 
    city_count > 10;","This SQL query identifies movies that have been rented in more than 10 different cities. It utilizes the 'film', 'inventory', 'rental', 'customer', 'address', and 'city' tables, aggregating rental data at the city level using COUNT(DISTINCT ci.city_id). The result is a list of movie titles along with the number of unique cities where they have been rented, which can help in analyzing the geographic popularity of films. Possible modifications include adjusting the city count threshold to explore movies with varying levels of geographic reach, incorporating rental frequency per city to assess demand concentration, or filtering by genre to analyze regional preferences for specific types of movies.",Which movies have been rented by customers from more than 10 different cities? Show the movie title and the number of cities.,Film mana yang disewa oleh pelanggan dari lebih dari 10 kota? Tampilkan judul film dan jumlah kotanya.,"['title', 'city_count']"
Which movies have been rented the most by customers under the age of 25? Show the movie title and the number of rentals.,"WITH young_customer_rentals AS (
    SELECT 
        f.title, 
        COUNT(r.rental_id) AS rentals_count
    FROM 
        film f
    JOIN inventory i ON f.film_id = i.film_id
    JOIN rental r ON i.inventory_id = r.inventory_id
    JOIN customer c ON r.customer_id = c.customer_id
    WHERE 
        EXTRACT(YEAR FROM AGE(CURRENT_DATE, c.create_date)) < 25
    GROUP BY 
        f.film_id, f.title
)
SELECT 
    title, 
    rentals_count
FROM 
    young_customer_rentals
ORDER BY 
    rentals_count DESC
LIMIT 10;
","This SQL query identifies the top 10 most rented movies among customers who have had an account for less than 25 years. It pulls data from the 'film', 'inventory', 'rental', and 'customer' tables, filtering customers based on their account creation date using TIMESTAMPDIFF(YEAR, c.create_date, CURDATE()) < 25. The query counts the number of rentals per film and orders the results in descending order of rental count. The output provides insight into the movie preferences of relatively new or younger customers. Potential modifications include adjusting the age threshold to analyze different customer cohorts, incorporating genre information to examine category-specific popularity, or extending the analysis to include rental frequency trends over time.",Which movies have been rented the most by customers under the age of 25? Show the movie title and the number of rentals.,Film mana yang paling banyak disewa oleh pelanggan berusia di bawah 25 tahun? Tampilkan judul film dan jumlah penyewaan.,"['title', 'rentals_count']"
Which movies have the highest revenue but have never been rented on weekends? Show the movie title and total revenue.,"WITH film_revenue AS (
    SELECT 
        f.film_id, 
        f.title, 
        SUM(p.amount) AS total_revenue
    FROM 
        film f
    JOIN inventory i ON f.film_id = i.film_id
    JOIN rental r ON i.inventory_id = r.inventory_id
    JOIN payment p ON r.rental_id = p.rental_id
    WHERE 
        EXTRACT(DOW FROM r.rental_date) NOT IN (0, 6)
    GROUP BY 
        f.film_id, f.title
)
SELECT 
    title, 
    total_revenue
FROM 
    film_revenue
ORDER BY 
    total_revenue DESC
LIMIT 10;
","This SQL query identifies the top 10 highest-grossing films based on total revenue generated from payments, excluding rentals that occurred on weekends. It utilizes the 'film', 'inventory', 'rental', and 'payment' tables, summing payment amounts per film while filtering out transactions made on Saturdays and Sundays using DAYOFWEEK(r.rental_date) NOT IN (1, 7). The output highlights the most profitable movies during weekdays, which can be useful for understanding demand trends outside peak weekend periods. Potential modifications include analyzing revenue specifically for weekends to compare performance, incorporating customer demographics to identify key spending groups, or adjusting the date filter to study seasonal revenue trends.",Which movies have the highest revenue but have never been rented on weekends? Show the movie title and total revenue.,Film mana yang pendapatannya tinggi tapi tidak pernah disewa saat akhir pekan? Tampilkan judul film dan total pendapatan.,"['title', 'total_revenue']"
Which customers have rented movies from every category but have never rented a movie with a rating of 'PG-13'? Show the customer full name.,"WITH customer_categories AS (
    SELECT 
        c.customer_id, 
        CONCAT(c.first_name, ' ', c.last_name) AS customer_name, 
        COUNT(DISTINCT fc.category_id) AS category_count
    FROM 
        customer c
        JOIN rental r ON c.customer_id = r.customer_id
        JOIN inventory i ON r.inventory_id = i.inventory_id
        JOIN film_category fc ON i.film_id = fc.film_id
    GROUP BY 
        c.customer_id
),
customer_no_pg13 AS (
    SELECT 
        c.customer_id
    FROM 
        customer c
    WHERE 
        NOT EXISTS (
            SELECT 1
            FROM rental r
            JOIN inventory i ON r.inventory_id = i.inventory_id
            JOIN film f ON i.film_id = f.film_id
            WHERE r.customer_id = c.customer_id AND f.rating = 'PG-13'
        )
)
SELECT 
    cc.customer_name
FROM 
    customer_categories cc
    JOIN customer_no_pg13 cnp ON cc.customer_id = cnp.customer_id
WHERE 
    cc.category_count = (SELECT COUNT(*) FROM category);","This SQL query identifies customers who have rented films from all available categories while never renting a movie with a 'PG-13' rating. It utilizes the 'customer', 'rental', 'inventory', 'film_category', and 'film' tables, counting the number of distinct film categories each customer has rented and filtering out customers who have rented at least one 'PG-13' film. The final result lists customers who have rented from every category without ever selecting a 'PG-13' film, which can be useful for understanding customer preferences and restrictions. Potential modifications include adjusting the rating filter to analyze customer behavior for other classifications, grouping results by customer demographics to identify patterns, or expanding the query to examine rental frequency in each category for deeper insights.",Which customers have rented movies from every category but have never rented a movie with a rating of 'PG-13'? Show the customer full name.,Ada pelanggan yang nyewa dari semua kategori tapi gak pernah nyewa film dengan rating 'PG-13'? Tampilkan nama lengkap pelanggan.,['customer_name']
Which movies have been rented by customers from more than 5 different countries? Show the movie title and the number of countries.,"WITH movie_country_rentals AS (
    SELECT 
        f.title, 
        COUNT(DISTINCT co.country_id) AS country_count
    FROM 
        film f
        JOIN inventory i ON f.film_id = i.film_id
        JOIN rental r ON i.inventory_id = r.inventory_id
        JOIN customer c ON r.customer_id = c.customer_id
        JOIN address a ON c.address_id = a.address_id
        JOIN city ci ON a.city_id = ci.city_id
        JOIN country co ON ci.country_id = co.country_id
    GROUP BY 
        f.film_id
)
SELECT 
    title, 
    country_count
FROM 
    movie_country_rentals
WHERE 
    country_count > 5;","This SQL query identifies movies that have been rented in more than five distinct countries. It aggregates rental data from the 'film', 'inventory', 'rental', 'customer', 'address', 'city', and 'country' tables, counting the number of unique countries where each movie has been rented. The final output lists movie titles along with their rental country count, providing insight into globally popular films. Possible modifications include adjusting the country threshold to analyze more or fewer globally distributed films, filtering results by rental date ranges to track trends over time, or incorporating revenue data to evaluate the financial impact of international rentals.",Which movies have been rented by customers from more than 5 different countries? Show the movie title and the number of countries.,Film mana yang disewa oleh pelanggan dari lebih dari 5 negara? Tampilkan judul film dan jumlah negara.,"['title', 'country_count']"