Question,Answer,Summary,Alternative Prompt 1 (English),Alternative Prompt 2 (Bahasa Indonesia),Expected Result,Checked
"Which actors have the first name ‘Scarlett’? Show actor_id, first_name, last_name","SELECT actor_id, first_name, last_name
FROM actor
WHERE first_name ILIKE 'scarlett';","This SQL query retrieves actor details for those with the first name 'Scarlett' (case-insensitive) from the 'actor' table, returning their actor_id, first_name, and last_name. The primary operation is a simple SELECT with an ILIKE filter on the first_name field, which enables case-insensitive pattern matching. The output provides a list of actors matching the name 'Scarlett', useful for casting or reference purposes. The query could be modified by: 1) changing the name filter to find actors with different names or patterns (e.g., '%scar%' for partial matches), 2) adding joins to related tables like 'film_actor' to see which movies these actors appeared in, or 3) incorporating sorting or limiting results for presentation. Potential questions this query might answer include identifying all actors with a specific name variant or verifying actor name spellings in the database.","Can you show me the actor_id, first_name, and last_name of actors with the first name Scarlett?","Bisa kasih daftar actor_id, first_name, dan last_name dari aktor yang nama depannya Scarlett?","['actor_id', 'first_name', 'last_name']",True
Which customers have rented any movies from every store but have never rented a movie with a runtime over 3 hours? Show the customer first name. Sort by customer name,"WITH customer_stores AS (
    SELECT 
        c.customer_id, 
        c.first_name AS customer_name, 
        COUNT(DISTINCT i.store_id) AS store_count
    FROM 
        customer c
        JOIN rental r ON c.customer_id = r.customer_id
        JOIN inventory i ON r.inventory_id = i.inventory_id
    GROUP BY 
        c.customer_id
),
customer_no_long_movies AS (
    SELECT 
        c.customer_id
    FROM 
        customer c
    WHERE 
        NOT EXISTS (
            SELECT 1
            FROM rental r
            JOIN inventory i ON r.inventory_id = i.inventory_id
            JOIN film f ON i.film_id = f.film_id
            WHERE r.customer_id = c.customer_id and f.length > 180
        )
)
SELECT 
    cs.customer_name
FROM 
    customer_stores cs
    JOIN customer_no_long_movies cnl ON cs.customer_id = cnl.customer_id
WHERE 
    cs.store_count = (SELECT COUNT(*) FROM store)
ORDER BY
    cs.customer_name;","This SQL query identifies customers who have rented movies from all available stores but have never rented a film longer than 3 hours. It leverages the 'customer', 'rental', 'inventory', 'film', and 'store' tables, using a common table expression (CTE) to calculate the number of unique stores each customer has rented from and another CTE to filter out customers who have rented long movies. The final result provides a list of such customers, which can be useful for targeted marketing campaigns or analyzing customer rental preferences. Potential modifications include adjusting the movie length threshold to study preferences for different movie durations, segmenting customers based on their rental frequency, or incorporating genre data to determine specific content preferences.",Which customers have rented movies from every store but have never rented a movie with a runtime over 3 hours? Show the customer first name. Sort by customer name,Siapa pelanggan yang nyewa dari semua toko tapi gak pernah nyewa film apapun yang berdurasi lebih dari 3 jam? Tampilkan nama awal pelanggan. Urutkan dengan nama awal pelanggan.,['customer_name'],True
"Which films have been rented in all stores? Show the film ID, title, and the number of stores it was rented in.","WITH film_stores AS (
    SELECT 
        f.film_id, 
        f.title, 
        COUNT(DISTINCT i.store_id) AS store_count
    FROM 
        film f
        JOIN inventory i ON f.film_id = i.film_id
        JOIN rental r ON i.inventory_id = r.inventory_id
    GROUP BY 
        f.film_id
)
SELECT 
    film_id, 
    title, 
    store_count
FROM 
    film_stores
WHERE 
    store_count = (SELECT COUNT(*) FROM store);","This SQL query identifies films that have been rented from all available store locations. It first constructs a temporary table ('film_stores') that calculates the number of distinct stores each film has been rented from by joining the 'film', 'inventory', and 'rental' tables. The final selection retrieves films where the 'store_count' matches the total number of stores from the 'store' table. Potential modifications include adjusting the filter to find films available in a specific minimum number of stores, incorporating rental frequency to highlight the most rented films across all locations, or adding a time filter to track recent distribution patterns. This query helps businesses assess film availability, optimize inventory distribution, and identify popular films across multiple locations.","Which films have been rented in all stores? Show the film ID, title, and the number of stores it was rented in.","Film mana yang sudah pernah disewa di semua toko? Tampilkan ID film, judul, dan jumlah toko tempat film itu disewa.","['film_id', 'title', 'store_count']",True
Which movies have been rented less than 10 times across all customers and dates? Show the movie title and the total number of times each movie has been rented. Sort the results alphabetically by movie title.,"SELECT 
    f.title, 
    COUNT(r.rental_id) AS rentals_count
FROM 
    film f
LEFT JOIN inventory i ON f.film_id = i.film_id
LEFT JOIN rental r ON i.inventory_id = r.inventory_id
GROUP BY 
    f.title
HAVING 
    COUNT(r.rental_id) < 10
order by title;","This SQL query identifies films with fewer than 10 rentals by joining the 'film', 'inventory', and 'rental' tables and counting rental occurrences per film title. The query groups results by film title, applies a HAVING clause to filter for titles with rental counts below 10, and orders alphabetically. This helps pinpoint underperforming inventory that may need promotion or removal. Key operations include COUNT aggregation and HAVING for post-aggregation filtering. The query could be modified to: 1) include rental_date filters to focus on recent underperformance, 2) join with the 'payment' table to analyze revenue impact, or 3) compare against inventory counts to identify overstocked items. It answers questions like 'Which films are least popular in our inventory?' or 'What items should we consider for promotional campaigns?'",List the movies that have been rented under 10 times in total. Include each movie’s title and the number of times it has been rented. Order the results by title alphabetically.,"Film apa saja yang telah disewa kurang dari 10 kali secara keseluruhan? Tampilkan judul film dan jumlah total penyewaannya, lalu urutkan hasilnya berdasarkan judul secara alfabet.","['title', 'rentals_count']",True
Which language is the top 1 most used in films? Show only the name of the language.,"SELECT 
    l.name
FROM 
    language l
    JOIN film f ON l.language_id = f.language_id
GROUP BY 
    l.name
ORDER BY
    COUNT(f.film_id) DESC
LIMIT 1;","This SQL query identifies the most frequently used language in films by joining the 'language' and 'film' tables on 'language_id'. The main objective is to determine the language associated with the highest number of films. The query uses a JOIN operation to link the tables, a GROUP BY clause to aggregate results by language, and COUNT(f.film_id) to calculate the number of films per language. The results are ordered in descending order by film count, and the LIMIT 1 clause ensures only the top language is returned. The expected output is the name of the most used language, which is useful for understanding language preferences in film production. This query can be modified to return the top N languages by adjusting the LIMIT clause or extended to include additional metrics like revenue by language by joining the 'payment' table. Potential questions this query might answer include: 'Which language is most commonly used in films?' or 'How does language usage vary across films?'.",Which language shows up the most in our movie list? Just give me the top 1 language name.,Bahasa apa yang paling sering muncul di daftar film kita? Cukup kasih nama bahasa yang jadi top 1 aja.,['name'],True
"Which customers have rented film ZORRO ARK more than one time? Show the customer ID, first name, and last name.","WITH zorro_film AS (
    SELECT film_id
    FROM film
    WHERE title = 'ZORRO ARK'
),
zorro_rentals AS (
    SELECT r.customer_id
    FROM rental r
    JOIN inventory i ON r.inventory_id = i.inventory_id
    WHERE i.film_id IN (SELECT film_id FROM zorro_film)
)
SELECT 
    c.customer_id,
    c.first_name,
    c.last_name
FROM 
    customer c
JOIN (
    SELECT customer_id
    FROM zorro_rentals
    GROUP BY customer_id
    HAVING COUNT(*) > 1
) zr ON c.customer_id = zr.customer_id;","This SQL query identifies customers who have rented the film 'ZORRO ARK' more than once by using two CTEs (zorro_film and zorro_rentals) to first isolate the film ID and then find all rentals of that film. It joins the 'film', 'inventory', 'rental', and 'customer' tables, applying a HAVING COUNT(*) > 1 filter to select only repeat customers. The output provides marketing insights by revealing loyal customers for this specific title. Key modifications could include: (1) expanding to multiple films to find fans of a franchise, (2) adding rental dates to analyze repeat viewing patterns, or (3) incorporating payment data to calculate customer lifetime value for these repeat viewers. This query helps answer business questions like 'Who are our most engaged fans for specific content?' or 'Which customers might be interested in similar titles or merchandise?' The nested CTE approach efficiently isolates the target film before analyzing customer behavior.","Who are the customers that have rented the movie ZORRO ARK more than once? Just show their ID, first name, and last name.","Siapa aja pelanggan yang udah nyewa film ZORRO ARK lebih dari satu kali? Tampilkan ID, nama depan, dan nama belakang mereka ya.","['customer_id', 'first_name', 'last_name']",True
"Which customers have rented the same film more than once? Show the customer ID, first name, last name, film title, and the number of times they rented it.","WITH customer_film_rentals AS (
    SELECT 
        r.customer_id, 
        f.film_id, 
        f.title, 
        COUNT(r.rental_id) AS rental_count
    FROM 
        rental r
        JOIN inventory i ON r.inventory_id = i.inventory_id
        JOIN film f ON i.film_id = f.film_id
    GROUP BY 
        r.customer_id, f.film_id
    HAVING 
        COUNT(r.rental_id) > 1
)
SELECT 
    c.customer_id, 
    c.first_name, 
    c.last_name, 
    cfr.title, 
    cfr.rental_count
FROM 
    customer c
    JOIN customer_film_rentals cfr ON c.customer_id = cfr.customer_id;","This SQL query retrieves customers who have rented the same film more than once, listing their names, rented film titles, and the number of times they have rented each film. It first creates a common table expression (CTE) 'customer_film_rentals' that aggregates rental counts per customer and film, filtering for those with more than one rental. The final selection joins this result with the 'customer' table to include customer details. Potential modifications include adjusting the HAVING clause to analyze customers with any number of repeat rentals, filtering by rental date range to identify recent trends, or adding film categories to understand customer preferences in different genres. This query helps answer questions about customer loyalty, film popularity, and rental frequency patterns.","Which customers have rented the same film more than once? Show the customer ID, first name, last name, film title, and the number of times they rented it.","Siapa aja pelanggan yang nyewa film yang sama lebih dari sekali? Tampilkan ID pelanggan, nama depan, nama belakang, judul film, dan jumlah penyewaan.","['customer_id', 'first_name', 'last_name', 'title', 'rental_count']",True
Which customers have rented movies from every store but have never rented a movie with a rating of 'R'? Show the customer first name.,"WITH customer_stores AS (
    SELECT 
        c.customer_id, 
        c.first_name AS customer_name, 
        COUNT(DISTINCT i.store_id) AS store_count
    FROM 
        customer c
        JOIN rental r ON c.customer_id = r.customer_id
        JOIN inventory i ON r.inventory_id = i.inventory_id
    GROUP BY 
        c.customer_id
),
customer_no_r_ratings AS (
    SELECT 
        c.customer_id
    FROM 
        customer c
    WHERE 
        NOT EXISTS (
            SELECT 1
            FROM rental r
            JOIN inventory i ON r.inventory_id = i.inventory_id
            JOIN film f ON i.film_id = f.film_id
            WHERE r.customer_id = c.customer_id AND f.rating = 'R'
        )
)
SELECT 
    cs.customer_name
FROM 
    customer_stores cs
    JOIN customer_no_r_ratings cnr ON cs.customer_id = cnr.customer_id
WHERE 
    cs.store_count = (SELECT COUNT(*) FROM store);","This SQL query identifies customers who have rented from all available stores and have never rented a film with an 'R' rating. It utilizes the 'customer', 'rental', 'inventory', 'film', and 'store' tables, employing common table expressions (CTEs) to calculate the number of distinct stores each customer has rented from and to filter out customers who have rented 'R'-rated films. The final result lists customers who meet both conditions. This query is useful for understanding customer rental behavior and identifying family-friendly renters. Possible modifications include adjusting the rating filter to analyze customer preferences for specific film ratings, segmenting results by rental frequency to identify high-value customers, or adding a time filter to focus on recent rental activity.",Which customers have rented movies from every store but have never rented a movie with a rating of 'R'? Show the customer first name.,Ada pelanggan yang sudah nyewa dari semua toko tapi gak pernah nyewa film dengan rating 'R'? Tampilkan nama awal pelanggan.,['customer_name'],True
How many distinct actors last names are there? Show count,SELECT COUNT(DISTINCT last_name) FROM actor;,"This SQL query calculates the count of distinct 'last_name' values in the 'actor' table, providing the total number of unique actor last names. The main objective is to determine the diversity or uniqueness of last names among actors. The query uses the COUNT(DISTINCT column) function to perform the calculation, ensuring that only unique last names are counted. No filters or conditions are applied, as the query operates on the entire dataset. The expected output is a single integer representing the count of unique last names, which could be relevant for demographic analysis or identifying naming trends in the actor database. This query can be modified to count distinct values in other columns (e.g., first_name) or extended to include filters (e.g., counting last names for actors in specific films by joining the 'film_actor' table). Potential questions this query might answer include: 'How many unique last names are present in the actor database?' or 'What is the distribution of last names among actors?'.",How many different last_name values are there among all the actors?,Total ada berapa nama belakang (last_name) aktor yang beda-beda?,['count'],True
"Which films have the longest and shortest rental durations in each category? Show the category name, film title, and rental duration. For each category, return only one film with the longest and one with the shortest duration (even if multiple films have the same duration). Sort the results by category name (ascending) and rental duration (descending).","WITH CategoryRentalDuration AS (
  SELECT
    c.name AS category_name,
    f.title AS film_title,
    f.rental_duration,
    ROW_NUMBER() OVER (PARTITION BY c.category_id ORDER BY f.rental_duration DESC) AS rn_desc,
    ROW_NUMBER() OVER (PARTITION BY c.category_id ORDER BY f.rental_duration ASC) AS rn_asc
  FROM film AS f
  JOIN film_category AS fc
    ON f.film_id = fc.film_id
  JOIN category AS c
    ON fc.category_id = c.category_id
)
SELECT
  category_name,
  film_title,
  rental_duration
FROM CategoryRentalDuration
WHERE
  rn_desc = 1 OR rn_asc = 1
ORDER BY
  category_name,
  rn_desc;","This SQL query identifies the films with the longest and shortest rental durations within each category. It utilizes the 'film', 'film_category', and 'category' tables and employs window functions (RANK()) to rank films by rental duration in descending and ascending order for each category. The results filter only the top-ranked (longest and shortest) films per category and are sorted by category name and rental duration. This query is useful for understanding rental duration trends across different film categories, which can inform inventory planning and pricing strategies. Potential modifications include adding rental frequency metrics to analyze whether longer or shorter rental durations correlate with higher rentals, filtering by specific time periods to track changes in rental duration preferences over time, or incorporating customer demographics to assess preferences by audience segments. Analysts may use this query to explore category-based rental patterns, identify extreme rental durations, and evaluate the impact of rental policies.","For each category, which films have the longest and shortest rental durations? Show the category name, film title, and rental duration. Return only one film for the longest and one for the shortest duration in each category (even if others have the same duration). Sort by category name ascending and rental duration descending.","Untuk setiap kategori, film mana yang punya durasi sewa terpanjang dan terpendek? Tampilkan nama kategori, judul film, dan durasi sewa. Ambil hanya satu film untuk yang durasinya paling panjang dan satu untuk yang paling pendek (meskipun ada film lain dengan durasi sama). Urutkan berdasarkan nama kategori secara menaik dan durasi sewa secara menurun.","['category_name', 'title', 'rental_duration']",True
"Who is the top 1 actor who has appeared in the most films? Show actor_id, first_name, last_name","SELECT 
    a.actor_id, 
    a.first_name, 
    a.last_name, 
    COUNT(fa.film_id) AS film_count
FROM 
    actor a
    JOIN film_actor fa ON a.actor_id = fa.actor_id
GROUP BY 
    a.actor_id,
    a.first_name,
    a.last_name
ORDER BY 
    film_count DESC
LIMIT 1;","This SQL query identifies the actor who has appeared in the most films by joining the 'actor' and 'film_actor' tables on 'actor_id', counting film appearances per actor, and returning the top result. Key operations include an INNER JOIN to link actors with their films, COUNT aggregation to tally film appearances, and GROUP BY to organize results by actor. The query filters implicitly by focusing on the maximum count (via ORDER BY and LIMIT 1) and outputs the actor's ID, name, and total film count. This is useful for recognizing prolific actors or benchmarking performance. The query could be modified to: 1) remove the LIMIT to rank all actors by film count, 2) add a WHERE clause to focus on specific film categories or time periods, or 3) include additional actor details from related tables. Potential use cases include casting decisions, career longevity analysis, or identifying potential candidates for franchise roles based on prior experience.","Who’s the top 1 actor that’s been in the most films? Just show me their actor_id, first_name, and last_name.","Siapa aktor top 1 yang paling sering main film? Kasih tau actor_id, first_name, sama last_name-nya aja ya.","['actor_id', 'first_name', 'last_name']",True
"Which movies have the highest number of rentals but the lowest replacement cost? Show the movie title, replacement cost, and number of rentals. Get top 1","WITH film_rentals AS (
    SELECT 
        f.film_id, 
        f.title, 
        f.replacement_cost, 
        COUNT(r.rental_id) AS rentals_count
    FROM 
        film f
        JOIN inventory i ON f.film_id = i.film_id
        JOIN rental r ON i.inventory_id = r.inventory_id
    GROUP BY 
        f.film_id
)
SELECT 
    title, 
    replacement_cost, 
    rentals_count
FROM 
    film_rentals
ORDER BY 
    rentals_count DESC, replacement_cost ASC
LIMIT 1;","This SQL query retrieves the top 1 most rented film, prioritizing those with the highest rental counts and resolving ties by selecting the ones with the lowest replacement costs. It utilizes the 'film', 'inventory', and 'rental' tables, aggregating rental counts for each film and incorporating replacement cost as a secondary sorting criterion. The expected output provides insights into the most popular yet cost-effective films, which could inform inventory management and promotional strategies. Potential modifications include filtering by rental date range to analyze trends over time, adding genre information to identify category-specific popularity, or incorporating customer demographics to determine audience preferences.","Which movies have the highest number of rentals but the lowest replacement cost? Show the movie title, replacement cost, and number of rentals. Get top 1","Film apa yang paling sering disewa tapi biaya gantinya rendah? Tampilkan judul film, biaya ganti, dan jumlah penyewaan. Dapatkan top 1","['title', 'replacement_cost', 'rentals_count']",True
"Which top 1 movie have the highest revenue but the lowest rental rate? Show the movie title, rental rate, and total revenue.
","WITH film_revenue AS (
    SELECT 
        f.film_id, 
        f.title, 
        f.rental_rate, 
        SUM(p.amount) AS total_revenue
    FROM 
        film f
        JOIN inventory i ON f.film_id = i.film_id
        JOIN rental r ON i.inventory_id = r.inventory_id
        JOIN payment p ON r.rental_id = p.rental_id
    GROUP BY 
        f.film_id
)
SELECT 
    title, 
    rental_rate, 
    total_revenue
FROM 
    film_revenue
ORDER BY 
    total_revenue DESC, rental_rate ASC
LIMIT 1;","This SQL query identifies the highest-grossing film by total revenue while also considering rental rate efficiency, using a CTE (film_revenue) to join the 'film', 'inventory', 'rental', and 'payment' tables. The query calculates total revenue per film through SUM aggregation, then returns the top performer when ordered by total revenue (descending) and rental rate (ascending). This helps identify films that generate the most revenue regardless of their base rental price. Key operations include CTE usage, multi-table joins, and multi-criteria sorting. Business applications include pricing strategy analysis and inventory valuation. The query could be modified to: 1) include rental duration to calculate revenue per day, 2) filter by release year to analyze trends, or 3) compare against replacement cost for ROI analysis. It answers questions like 'Which film generates the highest total revenue?' and 'How does rental rate correlate with overall revenue generation?'","Which movie has the highest revenue but the lowest rental rate? Show the movie title, rental rate, and total revenue. Get top 1","Film mana yang pendapatannya tinggi tapi harga sewanya rendah? Tampilkan judul film, harga sewa, dan total pendapatan. Dapatkan top 1 saja","['title', 'rental_rate', 'total_revenue']",True
"Which films have been rented more than the average number of rentals for their category? Show the film ID, title, category name, and rental count.","WITH film_rentals AS (
    SELECT 
        fc.category_id, 
        f.film_id, 
        f.title, 
        COUNT(r.rental_id) AS rental_count
    FROM 
        film f
        JOIN film_category fc ON f.film_id = fc.film_id
        JOIN inventory i ON f.film_id = i.film_id
        JOIN rental r ON i.inventory_id = r.inventory_id
    GROUP BY 
        fc.category_id, f.film_id, f.title
),
category_avg AS (
    SELECT 
        category_id,
        AVG(rental_count) AS avg_rental_count
    FROM film_rentals
    GROUP BY category_id
)
SELECT 
    fr.film_id, 
    fr.title, 
    c.name AS category_name, 
    fr.rental_count
FROM 
    film_rentals fr
    JOIN category_avg ca ON fr.category_id = ca.category_id
    JOIN category c ON fr.category_id = c.category_id
WHERE 
    fr.rental_count > ca.avg_rental_count;","This SQL query identifies films that have been rented more frequently than the average rental count within their respective categories. It utilizes the 'film', 'film_category', 'inventory', 'rental', and 'category' tables to count rentals per film, compute the average rentals per category using a window function, and filter films with above-average rentals. The final output includes the film ID, title, category name, and rental count, offering insights into high-performing films within each category. Potential modifications include adjusting the threshold for selection (e.g., identifying top 10% most-rented films per category), incorporating revenue data to analyze financial performance alongside rental popularity, or expanding the query to evaluate rental trends over time. Analysts can use this query to determine which films drive engagement, optimize inventory stocking, and refine marketing efforts based on rental demand patterns.","Which films have been rented more than the average number of rentals for their category? Show the film ID, title, category name, and rental count.","Film mana yang disewa lebih banyak dari rata-rata di kategori-nya? Tampilkan ID film, judul, nama kategori, dan jumlah penyewaannya.","['film_id', 'title', 'category_name', 'rental_count']",True
Which movies have been rented by customers from every country? Show the movie title and the number of countries.,"WITH movie_country_rentals AS (
    SELECT 
        f.title, 
        COUNT(DISTINCT co.country_id) AS country_count
    FROM 
        film f
        JOIN inventory i ON f.film_id = i.film_id
        JOIN rental r ON i.inventory_id = r.inventory_id
        JOIN customer c ON r.customer_id = c.customer_id
        JOIN address a ON c.address_id = a.address_id
        JOIN city ci ON a.city_id = ci.city_id
        JOIN country co ON ci.country_id = co.country_id
    GROUP BY 
        f.film_id
)
SELECT 
    title, 
    country_count
FROM 
    movie_country_rentals
WHERE 
    country_count = (SELECT COUNT(*) FROM country);","This SQL query identifies movies that have been rented in every available country by analyzing rental data across geographic locations. It pulls data from the 'film', 'inventory', 'rental', 'customer', 'address', 'city', and 'country' tables, using joins to link rentals to the countries where they occurred. The key metric computed is the number of distinct countries where each movie has been rented, and the final filter ensures that only movies rented in all countries are included. This query is useful for assessing global movie popularity and identifying films with universal appeal. Possible modifications include adjusting the threshold to find movies rented in a minimum number of countries, filtering by genre to analyze international genre performance, or incorporating rental revenue to examine global financial impact.",Which movies have been rented by customers from every country? Show the movie title and the number of countries.,Film apa saja yang telah disewa oleh pelanggan dari seluruh negara yang ada di database? Tampilkan judul film dan jumlah negara asal pelanggan yang menyewa film tersebut. Hanya tampilkan film yang disewa oleh pelanggan dari semua negara.,"['title', 'country_count']",True
Which staff member has processed the highest total payment amount? Show their staff ID and the total amount.,"SELECT 
    st.staff_id,
    SUM(p.amount) AS total_amount_processed
FROM 
    staff st
JOIN payment p ON st.staff_id = p.staff_id
GROUP BY 
    st.staff_id
ORDER BY 
    total_amount_processed DESC
LIMIT 1;","This SQL query identifies the staff member who processed the highest total payment amount by joining the 'staff' and 'payment' tables on 'staff_id', then aggregating and summing payment amounts per staff member. The query groups results by staff_id, orders them by the total amount processed in descending order, and returns only the top performer. This is useful for performance analysis or incentive calculations. Key modifications could include: 1) adding a date filter to analyze performance for a specific period, 2) including staff names in the output for readability, or 3) calculating average transaction amounts alongside totals. The query could help answer questions like 'Which staff member handles the most payment volume?' or 'How does payment processing performance vary among staff?'",Which staff member handled the highest total payment? Just show their staff ID and the total amount they processed.,Siapa staf yang memproses pembayaran dengan total terbesar? Tampilkan ID staf dan total jumlah yang mereka proses.,"['staff_id', 'total_amount_processed']",True
"Which customers have rented films from exactly 2 categories? Show the customer ID, first name, last name, and the categories they've rented from.","WITH customer_categories AS (
    SELECT 
        r.customer_id, 
        c.name AS category_name
    FROM 
        rental r
    JOIN inventory i ON r.inventory_id = i.inventory_id
    JOIN film_category fc ON i.film_id = fc.film_id
    JOIN category c ON fc.category_id = c.category_id
    GROUP BY 
        r.customer_id, c.name
),
customer_category_count AS (
    SELECT 
        cc.customer_id, 
        cu.first_name, 
        cu.last_name, 
        STRING_AGG(cc.category_name, ', ' ORDER BY cc.category_name) AS categories,
        COUNT(DISTINCT cc.category_name) AS category_count
    FROM 
        customer_categories cc
    JOIN customer cu ON cc.customer_id = cu.customer_id
    GROUP BY 
        cc.customer_id, cu.first_name, cu.last_name
)
SELECT 
    customer_id, 
    first_name, 
    last_name, 
    categories
FROM 
    customer_category_count
WHERE 
    category_count = 2;","This SQL query identifies customers who have rented films from exactly two distinct categories. It utilizes the 'rental', 'inventory', 'film_category', and 'category' tables to associate customers with film categories based on rental history. The query employs GROUP_CONCAT() to concatenate category names per customer and filters the results using HAVING COUNT(category_name) = 2 to retain only those with rentals spanning two categories. The output includes customer details and their rented categories, providing insights into customer preferences. Potential modifications include adjusting the category count filter to analyze customers with broader or narrower genre preferences, incorporating rental frequency metrics to highlight customers with consistent rental patterns, or joining payment data to assess revenue contributions from multi-category renters. Analysts can leverage this query to understand cross-category rental behavior, segment customers by rental diversity, and refine marketing strategies for targeted promotions.","Which customers have rented films from exactly 2 categories? Show the customer ID, first name, last name, and the categories they've rented from.","Ada gak pelanggan yang nyewa film dari tepat 2 kategori? Tampilkan ID pelanggan, nama depan, nama belakang, dan daftar kategorinya.","['customer_id', 'first_name', 'last_name', 'categories']",True
"Which films have never been rented but belong to the top 5 film categories based on total number of rentals? Show the film ID, title, and category name. Sort the results by film ID in ascending order.","WITH top_categories AS (
    SELECT 
        fc.category_id
    FROM 
        film_category fc
        JOIN inventory i ON fc.film_id = i.film_id
        JOIN rental r ON i.inventory_id = r.inventory_id
    GROUP BY 
        fc.category_id
    ORDER BY 
        COUNT(r.rental_id) DESC
    LIMIT 5
),
films_in_top_categories AS (
    SELECT 
        f.film_id, 
        f.title, 
        c.name AS category_name
    FROM 
        film f
        JOIN film_category fc ON f.film_id = fc.film_id
        JOIN category c ON fc.category_id = c.category_id
        JOIN top_categories tc ON fc.category_id = tc.category_id
),
rented_films AS (
    SELECT DISTINCT 
        f.film_id
    FROM 
        film f
        JOIN inventory i ON f.film_id = i.film_id
        JOIN rental r ON i.inventory_id = r.inventory_id
)
SELECT 
    f.film_id, 
    f.title, 
    f.category_name
FROM 
    films_in_top_categories f
EXCEPT
SELECT 
    f.film_id, 
    f.title, 
    f.category_name
FROM 
    films_in_top_categories f
    JOIN rented_films r ON f.film_id = r.film_id
ORDER BY 
    film_id;
","This SQL query identifies unrented films within the top 5 most popular rental categories using a multi-step CTE approach. It first identifies the top categories by rental count, then finds all films in those categories, and finally filters out any films that have been rented at least once using an EXCEPT operation. The query employs three CTEs (top_categories, films_in_top_categories, and rented_films) with multiple joins across the 'film_category', 'inventory', 'rental', and 'category' tables. The output lists unrented films in high-demand categories, which could indicate missed revenue opportunities. The query could be modified to: 1) include rental rates to prioritize promotion of higher-value films, 2) add film age to identify if newer releases are underperforming, or 3) expand the category selection beyond top 5. Potential business questions include identifying hidden gems in popular genres, evaluating inventory acquisition strategies, or detecting potential marketing gaps for quality content.","Which films were never rented but are in the 5 most rented film categories? Show film ID, title, and category name, sorted by film ID.","Film apa saja yang belum pernah disewa tetapi termasuk dalam 5 kategori film yang paling sering disewa? Tampilkan ID film, judul, dan nama kategori, lalu urutkan berdasarkan ID film.","['film_id', 'title', 'category_name']",True
Which movies have been rented by customers from more than 5 different countries? Show the movie title and the number of countries.,"WITH movie_country_rentals AS (
    SELECT 
        f.title, 
        COUNT(DISTINCT co.country_id) AS country_count
    FROM 
        film f
        JOIN inventory i ON f.film_id = i.film_id
        JOIN rental r ON i.inventory_id = r.inventory_id
        JOIN customer c ON r.customer_id = c.customer_id
        JOIN address a ON c.address_id = a.address_id
        JOIN city ci ON a.city_id = ci.city_id
        JOIN country co ON ci.country_id = co.country_id
    GROUP BY 
        f.film_id
)
SELECT 
    title, 
    country_count
FROM 
    movie_country_rentals
WHERE 
    country_count > 5;","This SQL query identifies movies that have been rented in more than five distinct countries. It aggregates rental data from the 'film', 'inventory', 'rental', 'customer', 'address', 'city', and 'country' tables, counting the number of unique countries where each movie has been rented. The final output lists movie titles along with their rental country count, providing insight into globally popular films. Possible modifications include adjusting the country threshold to analyze more or fewer globally distributed films, filtering results by rental date ranges to track trends over time, or incorporating revenue data to evaluate the financial impact of international rentals.",Which movies have been rented by customers from more than 5 different countries? Show the movie title and the number of countries.,Film mana yang disewa oleh pelanggan dari lebih dari 5 negara? Tampilkan judul film dan jumlah negara.,"['title', 'country_count']",True
"Which films have the highest revenue per day of rental across all stores? Calculate this by dividing the total payment amount by the total number of rental days (using return date minus rental date), based only on rentals that have been returned. Show the film ID, title, and revenue per day for the top 10 films, rounded to two decimal places.","WITH film_revenue_per_day AS (
    SELECT 
        f.film_id, 
        f.title, 
        ROUND(
            SUM(p.amount) / NULLIF(SUM(EXTRACT(DAY FROM (r.return_date - r.rental_date))), 0),
            2
        ) AS revenue_per_day
    FROM 
        film f
    JOIN inventory i ON f.film_id = i.film_id
    JOIN rental r ON i.inventory_id = r.inventory_id
    JOIN payment p ON r.rental_id = p.rental_id
    WHERE 
        r.return_date IS NOT NULL
    GROUP BY 
        f.film_id, f.title
)
SELECT 
    film_id, 
    title, 
    revenue_per_day
FROM 
    film_revenue_per_day
ORDER BY 
    revenue_per_day DESC
LIMIT 10;
","This SQL query calculates and ranks films by their average revenue generated per rental day, using a CTE (film_revenue_per_day) to join the 'film', 'inventory', 'rental', and 'payment' tables. The query computes daily revenue by dividing total payment amounts by the rental duration in days (handling division by zero with NULLIF), then returns the top 10 highest-earning films. Key operations include date arithmetic (EXTRACT), aggregation (SUM), and rounding. The filter ensures only completed rentals (with return_date) are considered. This helps identify high-performing films for inventory or promotional decisions. Modifications could: 1) add a release year filter to analyze trends, 2) include rental counts to distinguish between frequency vs. duration profitability, or 3) compare against replacement_cost for ROI analysis. The query answers questions like 'Which films generate the most revenue per day rented?' or 'How does rental duration impact film profitability?'","Which films earn the most revenue per rental day across all stores, based only on rentals that have been returned? Calculate this by dividing total payments by total rental days. Show the film ID, title, and revenue per day (rounded to two decimal places) for the top 10 films.","Film mana yang menghasilkan pendapatan paling tinggi per hari sewa di seluruh store, hanya berdasarkan sewaan yang sudah dikembalikan? Hitung dengan membagi total pembayaran dengan total hari sewa. Tampilkan ID film, judul, dan pendapatan per harinya (dibulatkan sampai dua angka di belakang koma) untuk 10 film teratas.","['film_id', 'title', 'revenue_per_day']",True
"Which customers have rented films from more than 3 different categories? Show their customer ID, first name, last name, and the number of categories they've rented from.","SELECT 
    c.customer_id, 
    c.first_name, 
    c.last_name, 
    COUNT(DISTINCT fc.category_id) AS category_count
FROM 
    customer c
    JOIN rental r ON c.customer_id = r.customer_id
    JOIN inventory i ON r.inventory_id = i.inventory_id
    JOIN film_category fc ON i.film_id = fc.film_id
GROUP BY 
    c.customer_id
HAVING 
    COUNT(DISTINCT fc.category_id) > 3;","This SQL query identifies customers who have rented movies from more than three distinct categories. It pulls data from the 'customer', 'rental', 'inventory', and 'film_category' tables, joining them using 'customer_id', 'inventory_id', and 'film_id'. The query counts the distinct 'category_id' values per customer and filters results to only include those with more than three unique categories. The output consists of customer IDs, first names, last names, and their respective category counts. This can be adapted to analyze customers renting from specific categories by adding a WHERE clause on 'fc.category_id', or to track rental frequency per customer by counting rentals instead of categories. Analysts can use this query to segment customers based on rental diversity or identify those with broad movie preferences for targeted marketing campaigns.","Which customers have rented from more than 3 categories? Show the customer ID, first name, last name, and the number of categories they've rented from.","Pelanggan mana aja yang udah nyewa film dari lebih dari 3 kategori? Tampilkan ID pelanggan, nama depan, nama belakang, dan jumlah kategori yang disewa.","['customer_id', 'first_name', 'last_name', 'category_count']",True
Which customers have rented movies from every category but have never rented a movie with a replacement cost over $20? Show the customer full name.,"WITH customer_categories AS (
    SELECT 
        c.customer_id, 
        CONCAT(c.first_name, ' ', c.last_name) AS customer_name, 
        COUNT(DISTINCT fc.category_id) AS category_count
    FROM 
        customer c
        JOIN rental r ON c.customer_id = r.customer_id
        JOIN inventory i ON r.inventory_id = i.inventory_id
        JOIN film_category fc ON i.film_id = fc.film_id
    GROUP BY 
        c.customer_id
),
customer_no_expensive_rentals AS (
    SELECT 
        c.customer_id
    FROM 
        customer c
    WHERE 
        NOT EXISTS (
            SELECT 1
            FROM rental r
            JOIN inventory i ON r.inventory_id = i.inventory_id
            JOIN film f ON i.film_id = f.film_id
            WHERE r.customer_id = c.customer_id AND f.replacement_cost > 20
        )
)
SELECT 
    cc.customer_name
FROM 
    customer_categories cc
    JOIN customer_no_expensive_rentals cne ON cc.customer_id = cne.customer_id
WHERE 
    cc.category_count = (SELECT COUNT(*) FROM category);","This SQL query identifies customers who have rented movies from every available category while never renting a movie with a replacement cost greater than $20. It uses the 'customer', 'rental', 'inventory', 'film_category', and 'film' tables, employing two CTEs: one to count the number of distinct categories each customer has rented from and another to filter out customers who have rented expensive films. The final result lists customers meeting both conditions. This query is useful for identifying budget-conscious but highly diverse renters. Possible modifications include adjusting the replacement cost threshold to analyze different spending behaviors, incorporating rental frequency to identify high-volume renters, or adding demographic data to explore patterns among customer segments.",Which customers have rented movies from every category but have never rented a movie with a replacement cost over $20? Show the customer full name.,Ada pelanggan yang nyewa dari semua kategori tapi gak pernah nyewa film dengan biaya ganti di atas $20? Tampilkan nama lengkap pelanggan.,['customer_name'],True
"Which films are in the top 10% of revenue-generating films? Show the film ID, title, and total revenue.","WITH film_revenue AS (
    SELECT 
        f.film_id, 
        f.title, 
        SUM(p.amount) AS total_revenue
    FROM 
        film f
        JOIN inventory i ON f.film_id = i.film_id
        JOIN rental r ON i.inventory_id = r.inventory_id
        JOIN payment p ON r.rental_id = p.rental_id
    GROUP BY 
        f.film_id
),
top_10_percent AS (
    SELECT 
        film_id, 
        title, 
        total_revenue, 
        PERCENT_RANK() OVER (ORDER BY total_revenue DESC) AS pct_rank
    FROM 
        film_revenue
)
SELECT 
    film_id, 
    title, 
    total_revenue
FROM 
    top_10_percent
WHERE 
    pct_rank <= 0.1;","This SQL query identifies the top 10% highest-grossing films based on total revenue from customer payments. It first computes the total revenue per film using a CTE 'film_revenue', aggregating payments from the 'payment' table via joins with 'rental', 'inventory', and 'film' tables. A second CTE, 'top_10_percent', assigns a percentile rank to each film based on descending revenue using the PERCENT_RANK() window function. The final selection filters for films in the top 10% by revenue. Possible modifications include adjusting the percentile threshold for different ranking levels, incorporating genre information by joining the 'film_category' table, or analyzing revenue trends over time by grouping payments by year or quarter. This query helps answer questions about top-performing films, revenue distribution, and trends in customer preferences.","Which movies are in the top 10% by total revenue? Show the film ID, title, and total revenue.","Film apa aja yang masuk 10% teratas berdasarkan pendapatan? Tampilkan ID film, judul, dan total pendapatan.","['film_id', 'title', 'total_revenue']",True
"Which film has the highest total rental revenue per minute of runtime? Show the film ID, title, runtime (in minutes), and revenue per minute. Return only the top 1 result, round to two decimal points, and sorted by revenue per minute in descending order.","WITH film_revenue AS (
    SELECT 
        f.film_id, 
        f.title, 
        f.length, 
        SUM(p.amount) AS total_revenue
    FROM 
        film f
        JOIN inventory i ON f.film_id = i.film_id
        JOIN rental r ON i.inventory_id = r.inventory_id
        JOIN payment p ON r.rental_id = p.rental_id
    GROUP BY 
        f.film_id, f.title, f.length
)
SELECT 
    film_id, 
    title, 
    length, 
    ROUND(total_revenue / length, 2) AS revenue_per_minute
FROM 
    film_revenue
WHERE 
    length > 0
ORDER BY 
    revenue_per_minute DESC
LIMIT 1;","This SQL query identifies the film with the highest revenue per minute by calculating total revenue divided by film length, using a CTE (film_revenue) to aggregate rental payments for each film. It joins the 'film', 'inventory', 'rental', and 'payment' tables to compute total revenue per film, then calculates revenue per minute while filtering out films with zero length. The output highlights the most financially efficient film by runtime, useful for content valuation and programming decisions. Key modifications could include: (1) removing the LIMIT to rank all films by revenue efficiency, (2) adding category information to analyze performance by genre, or (3) incorporating rental dates to examine temporal trends. This query helps answer business questions like 'Which films generate the most value relative to their runtime?' or 'How should we prioritize content acquisition based on revenue efficiency?' The clever use of revenue-per-minute metric provides a normalized comparison across films of varying lengths.","Which film has the highest revenue per minute of runtime? Show the film ID, title, runtime, and revenue per minute. Round to two decimal points. Return only the top 1 result.","Film mana yang memiliki pendapatan tertinggi per menit durasi? Tampilkan ID film, judul, durasi, dan pendapatan per menit. Ambil hanya 1 film teratas. Bulatkan ke 2 angka desimal","['film_id', 'title', 'length', 'revenue_per_minute']",True
Which movies have the lowest number of actors and have never been rented in all stores? Show the movie title and number of actors. Get top 1,"SELECT 
    f.title, 
    COUNT(DISTINCT fa.actor_id) AS actor_count
FROM 
    film f
JOIN film_actor fa ON f.film_id = fa.film_id
WHERE NOT EXISTS (
    SELECT 1
    FROM inventory i
    JOIN rental r ON i.inventory_id = r.inventory_id
    WHERE i.film_id = f.film_id
)
GROUP BY f.film_id, f.title
ORDER BY actor_count ASC
LIMIT 1;","This SQL query identifies the film with the fewest actors that has never been rented, by joining the 'film' and 'film_actor' tables and using a NOT EXISTS subquery to exclude films present in the 'inventory' and 'rental' tables. The query counts distinct actors per film, groups by film details, and returns the film with the lowest actor count. This helps identify potentially problematic inventory items that may need marketing attention or removal. Key operations include a NOT EXISTS anti-join, COUNT(DISTINCT) aggregation, and subquery filtering. Business applications include inventory optimization and content analysis. The query could be modified to: 1) include film categories to analyze genre patterns, 2) add rental_rate to assess pricing impact, or 3) filter by release year to identify outdated content. It answers questions like 'Which unrented films have the simplest casting?' and 'Are there correlations between actor count and rental performance?'",Which movies have the lowest number of actors and have never been rented in all stores? Show the movie title and number of actors. Get top 1,Film mana yang punya sedikit aktor dan belum pernah disewa di toko manapun? Tampilkan judul film dan jumlah aktor. Dapatkan top 1,"['title', 'actor_count']",True
